//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2011-11-11/HTMLQuestion.xsd
package go_HTMLQuestion

import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasElem_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_ struct {
	HTMLContent xsdt.String `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2011-11-11/HTMLQuestion.xsd HTMLContent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_ instance.
func (me *XsdGoPkgHasElem_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FrameHeightsequenceTxsdHTMLQuestionHTMLQuestionschema_FrameHeight_XsdtInteger_ struct {
	FrameHeight xsdt.Integer `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2011-11-11/HTMLQuestion.xsd FrameHeight"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FrameHeightsequenceTxsdHTMLQuestionHTMLQuestionschema_FrameHeight_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FrameHeightsequenceTxsdHTMLQuestionHTMLQuestionschema_FrameHeight_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FrameHeightsequenceTxsdHTMLQuestionHTMLQuestionschema_FrameHeight_XsdtInteger_ instance.
func (me *XsdGoPkgHasElem_FrameHeightsequenceTxsdHTMLQuestionHTMLQuestionschema_FrameHeight_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FrameHeightsequenceTxsdHTMLQuestionHTMLQuestionschema_FrameHeight_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHTMLQuestion struct {
	XsdGoPkgHasElem_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_

	XsdGoPkgHasElem_FrameHeightsequenceTxsdHTMLQuestionHTMLQuestionschema_FrameHeight_XsdtInteger_
}

//	If the WalkHandlers.TxsdHTMLQuestion function is not nil (ie. was set by outside code), calls it with this TxsdHTMLQuestion instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdHTMLQuestion instance.
func (me *TxsdHTMLQuestion) Walk() (err error) {
	if fn := WalkHandlers.TxsdHTMLQuestion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FrameHeightsequenceTxsdHTMLQuestionHTMLQuestionschema_FrameHeight_XsdtInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HTMLQuestion struct {
	HTMLQuestion *TxsdHTMLQuestion `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2011-11-11/HTMLQuestion.xsd HTMLQuestion"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HTMLQuestion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HTMLQuestion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HTMLQuestion instance.
func (me *XsdGoPkgHasElem_HTMLQuestion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HTMLQuestion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HTMLQuestion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HTMLQuestion struct {
	HTMLQuestions []*TxsdHTMLQuestion `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2011-11-11/HTMLQuestion.xsd HTMLQuestion"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HTMLQuestion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HTMLQuestion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HTMLQuestion instance.
func (me *XsdGoPkgHasElems_HTMLQuestion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HTMLQuestion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HTMLQuestions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FrameHeightsequenceHTMLQuestionschema_FrameHeight_XsdtInteger_ struct {
	FrameHeights []xsdt.Integer `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2011-11-11/HTMLQuestion.xsd FrameHeight"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FrameHeightsequenceHTMLQuestionschema_FrameHeight_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FrameHeightsequenceHTMLQuestionschema_FrameHeight_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FrameHeightsequenceHTMLQuestionschema_FrameHeight_XsdtInteger_ instance.
func (me *XsdGoPkgHasElems_FrameHeightsequenceHTMLQuestionschema_FrameHeight_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FrameHeightsequenceHTMLQuestionschema_FrameHeight_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_ struct {
	HTMLContents []xsdt.String `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2011-11-11/HTMLQuestion.xsd HTMLContent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_ instance.
func (me *XsdGoPkgHasElems_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 8 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 8 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_  func(*XsdGoPkgHasElem_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_, bool) error
	XsdGoPkgHasElem_FrameHeightsequenceTxsdHTMLQuestionHTMLQuestionschema_FrameHeight_XsdtInteger_ func(*XsdGoPkgHasElem_FrameHeightsequenceTxsdHTMLQuestionHTMLQuestionschema_FrameHeight_XsdtInteger_, bool) error
	TxsdHTMLQuestion                                                                               func(*TxsdHTMLQuestion, bool) error
	XsdGoPkgHasElem_HTMLQuestion                                                                   func(*XsdGoPkgHasElem_HTMLQuestion, bool) error
	XsdGoPkgHasElems_HTMLQuestion                                                                  func(*XsdGoPkgHasElems_HTMLQuestion, bool) error
	XsdGoPkgHasCdata                                                                               func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_FrameHeightsequenceHTMLQuestionschema_FrameHeight_XsdtInteger_                func(*XsdGoPkgHasElems_FrameHeightsequenceHTMLQuestionschema_FrameHeight_XsdtInteger_, bool) error
	XsdGoPkgHasElems_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_ func(*XsdGoPkgHasElems_HTMLContentsequenceTxsdHTMLQuestionHTMLQuestionschema_HTMLContent_XsdtString_, bool) error
}
