//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd
package go_ExternalQuestion

import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasElem_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_ struct {
	ExternalURL xsdt.AnyURI `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd ExternalURL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FrameHeightsequenceTxsdExternalQuestionExternalQuestionschema_FrameHeight_XsdtInteger_ struct {
	FrameHeight xsdt.Integer `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd FrameHeight"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FrameHeightsequenceTxsdExternalQuestionExternalQuestionschema_FrameHeight_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FrameHeightsequenceTxsdExternalQuestionExternalQuestionschema_FrameHeight_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FrameHeightsequenceTxsdExternalQuestionExternalQuestionschema_FrameHeight_XsdtInteger_ instance.
func (me *XsdGoPkgHasElem_FrameHeightsequenceTxsdExternalQuestionExternalQuestionschema_FrameHeight_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FrameHeightsequenceTxsdExternalQuestionExternalQuestionschema_FrameHeight_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdExternalQuestion struct {
	XsdGoPkgHasElem_FrameHeightsequenceTxsdExternalQuestionExternalQuestionschema_FrameHeight_XsdtInteger_

	XsdGoPkgHasElem_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_
}

//	If the WalkHandlers.TxsdExternalQuestion function is not nil (ie. was set by outside code), calls it with this TxsdExternalQuestion instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdExternalQuestion instance.
func (me *TxsdExternalQuestion) Walk() (err error) {
	if fn := WalkHandlers.TxsdExternalQuestion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FrameHeightsequenceTxsdExternalQuestionExternalQuestionschema_FrameHeight_XsdtInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExternalQuestion struct {
	ExternalQuestion *TxsdExternalQuestion `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd ExternalQuestion"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExternalQuestion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExternalQuestion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExternalQuestion instance.
func (me *XsdGoPkgHasElem_ExternalQuestion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExternalQuestion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ExternalQuestion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExternalQuestion struct {
	ExternalQuestions []*TxsdExternalQuestion `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd ExternalQuestion"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExternalQuestion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExternalQuestion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExternalQuestion instance.
func (me *XsdGoPkgHasElems_ExternalQuestion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExternalQuestion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ExternalQuestions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FrameHeightsequenceExternalQuestionschema_FrameHeight_XsdtInteger_ struct {
	FrameHeights []xsdt.Integer `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd FrameHeight"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FrameHeightsequenceExternalQuestionschema_FrameHeight_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FrameHeightsequenceExternalQuestionschema_FrameHeight_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FrameHeightsequenceExternalQuestionschema_FrameHeight_XsdtInteger_ instance.
func (me *XsdGoPkgHasElems_FrameHeightsequenceExternalQuestionschema_FrameHeight_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FrameHeightsequenceExternalQuestionschema_FrameHeight_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_ struct {
	ExternalURLs []xsdt.AnyURI `xml:"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd ExternalURL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElems_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 8 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 8 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_ExternalQuestion                                                                       func(*XsdGoPkgHasElem_ExternalQuestion, bool) error
	XsdGoPkgHasElems_ExternalQuestion                                                                      func(*XsdGoPkgHasElems_ExternalQuestion, bool) error
	XsdGoPkgHasElems_FrameHeightsequenceExternalQuestionschema_FrameHeight_XsdtInteger_                    func(*XsdGoPkgHasElems_FrameHeightsequenceExternalQuestionschema_FrameHeight_XsdtInteger_, bool) error
	XsdGoPkgHasElems_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_ func(*XsdGoPkgHasElems_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_, bool) error
	XsdGoPkgHasCdata                                                                                       func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_  func(*XsdGoPkgHasElem_ExternalURLsequenceTxsdExternalQuestionExternalQuestionschema_ExternalURL_XsdtAnyURI_, bool) error
	XsdGoPkgHasElem_FrameHeightsequenceTxsdExternalQuestionExternalQuestionschema_FrameHeight_XsdtInteger_ func(*XsdGoPkgHasElem_FrameHeightsequenceTxsdExternalQuestionExternalQuestionschema_FrameHeight_XsdtInteger_, bool) error
	TxsdExternalQuestion                                                                                   func(*TxsdExternalQuestion, bool) error
}
