//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		mechanicalturk.amazonaws.com/AWSMechanicalTurk/2014-08-15/AWSMechanicalTurkRequester.xsd
package go_AWSMechanicalTurkRequester

import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_ struct {
	Validate xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Validate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_ struct {
	Credential xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Credential"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_ struct {
	MaxAssignments xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MaxAssignments"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_ struct {
	AutoApprovalDelayInSeconds xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AutoApprovalDelayInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_ struct {
	Keywords xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Keywords"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_ instance.
func (me *XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_ struct {
	UniqueRequestToken xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UniqueRequestToken"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_ instance.
func (me *XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_ struct {
	LifetimeInSeconds xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 LifetimeInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElem_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_ struct {
	AssignmentDurationInSeconds xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignmentDurationInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_ struct {
	PolicyName xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 PolicyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_ struct {
	Key xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Key"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_ instance.
func (me *XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_ struct {
	Values []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Value"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TParameterMapEntry struct {
	XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_

	XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_
}

//	If the WalkHandlers.TParameterMapEntry function is not nil (ie. was set by outside code), calls it with this TParameterMapEntry instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TParameterMapEntry instance.
func (me *TParameterMapEntry) Walk() (err error) {
	if fn := WalkHandlers.TParameterMapEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_ struct {
	MapEntries []*TParameterMapEntry `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MapEntry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_ instance.
func (me *XsdGoPkgHasElems_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MapEntries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPolicyParameter struct {
	XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_

	XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_

	XsdGoPkgHasElems_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_
}

//	If the WalkHandlers.TPolicyParameter function is not nil (ie. was set by outside code), calls it with this TPolicyParameter instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TPolicyParameter instance.
func (me *TPolicyParameter) Walk() (err error) {
	if fn := WalkHandlers.TPolicyParameter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_ struct {
	Parameters []*TPolicyParameter `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Parameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_ instance.
func (me *XsdGoPkgHasElems_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Parameters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TReviewPolicy struct {
	XsdGoPkgHasElems_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_

	XsdGoPkgHasElem_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_
}

//	If the WalkHandlers.TReviewPolicy function is not nil (ie. was set by outside code), calls it with this TReviewPolicy instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TReviewPolicy instance.
func (me *TReviewPolicy) Walk() (err error) {
	if fn := WalkHandlers.TReviewPolicy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_ struct {
	AssignmentReviewPolicy *TReviewPolicy `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignmentReviewPolicy"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_ instance.
func (me *XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssignmentReviewPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_ struct {
	HITReviewPolicy *TReviewPolicy `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITReviewPolicy"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_ instance.
func (me *XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HITReviewPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_ struct {
	ResponseGroups []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ResponseGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_ struct {
	HITTypeId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITTypeId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AmountsequencePriceschema_Amount_XsdtDecimal_ struct {
	Amount xsdt.Decimal `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Amount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AmountsequencePriceschema_Amount_XsdtDecimal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AmountsequencePriceschema_Amount_XsdtDecimal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AmountsequencePriceschema_Amount_XsdtDecimal_ instance.
func (me *XsdGoPkgHasElem_AmountsequencePriceschema_Amount_XsdtDecimal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AmountsequencePriceschema_Amount_XsdtDecimal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_ struct {
	CurrencyCode xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CurrencyCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_ struct {
	FormattedPrice xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 FormattedPrice"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_ instance.
func (me *XsdGoPkgHasElem_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPrice struct {
	XsdGoPkgHasElem_AmountsequencePriceschema_Amount_XsdtDecimal_

	XsdGoPkgHasElem_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_

	XsdGoPkgHasElem_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_
}

//	If the WalkHandlers.TPrice function is not nil (ie. was set by outside code), calls it with this TPrice instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TPrice instance.
func (me *TPrice) Walk() (err error) {
	if fn := WalkHandlers.TPrice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AmountsequencePriceschema_Amount_XsdtDecimal_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_ struct {
	Reward *TPrice `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Reward"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_ instance.
func (me *XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reward.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_ struct {
	Description xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Description"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_ instance.
func (me *XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_ struct {
	Question xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Question"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_ instance.
func (me *XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_ struct {
	RequesterAnnotation xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RequesterAnnotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_ instance.
func (me *XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_ struct {
	HITLayoutId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITLayoutId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_ struct {
	Title xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Title"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_ instance.
func (me *XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_ struct {
	QualificationTypeId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationTypeId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TComparator xsdt.String

//	Returns true if the value of this enumerated TComparator is "NotEqualTo".
func (me TComparator) IsNotEqualTo() bool { return me.String() == "NotEqualTo" }

//	Returns true if the value of this enumerated TComparator is "DoesNotExist".
func (me TComparator) IsDoesNotExist() bool { return me.String() == "DoesNotExist" }

//	Since TComparator is just a simple String type, this merely sets the current value from the specified string.
func (me *TComparator) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TComparator is just a simple String type, this merely returns the current string value.
func (me TComparator) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TComparator's alias type xsdt.String.
func (me TComparator) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TComparator is "LessThan".
func (me TComparator) IsLessThan() bool { return me.String() == "LessThan" }

//	Returns true if the value of this enumerated TComparator is "Exists".
func (me TComparator) IsExists() bool { return me.String() == "Exists" }

//	Returns true if the value of this enumerated TComparator is "In".
func (me TComparator) IsIn() bool { return me.String() == "In" }

//	Returns true if the value of this enumerated TComparator is "NotIn".
func (me TComparator) IsNotIn() bool { return me.String() == "NotIn" }

//	Returns true if the value of this enumerated TComparator is "LessThanOrEqualTo".
func (me TComparator) IsLessThanOrEqualTo() bool { return me.String() == "LessThanOrEqualTo" }

//	Returns true if the value of this enumerated TComparator is "GreaterThan".
func (me TComparator) IsGreaterThan() bool { return me.String() == "GreaterThan" }

//	Returns true if the value of this enumerated TComparator is "GreaterThanOrEqualTo".
func (me TComparator) IsGreaterThanOrEqualTo() bool { return me.String() == "GreaterThanOrEqualTo" }

//	Returns true if the value of this enumerated TComparator is "EqualTo".
func (me TComparator) IsEqualTo() bool { return me.String() == "EqualTo" }

type XsdGoPkgHasElem_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_ struct {
	Comparator TComparator `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Comparator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_ instance.
func (me *XsdGoPkgHasElem_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IntegerValuesequenceQualificationRequirementschema_IntegerValue_XsdtInt_ struct {
	IntegerValues []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 IntegerValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IntegerValuesequenceQualificationRequirementschema_IntegerValue_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IntegerValuesequenceQualificationRequirementschema_IntegerValue_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IntegerValuesequenceQualificationRequirementschema_IntegerValue_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_IntegerValuesequenceQualificationRequirementschema_IntegerValue_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IntegerValuesequenceQualificationRequirementschema_IntegerValue_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CountrysequenceLocaleschema_Country_XsdtString_ struct {
	Country xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Country"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CountrysequenceLocaleschema_Country_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CountrysequenceLocaleschema_Country_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CountrysequenceLocaleschema_Country_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CountrysequenceLocaleschema_Country_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CountrysequenceLocaleschema_Country_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_ struct {
	Subdivision xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Subdivision"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_ instance.
func (me *XsdGoPkgHasElem_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TLocale struct {
	XsdGoPkgHasElem_CountrysequenceLocaleschema_Country_XsdtString_

	XsdGoPkgHasElem_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_
}

//	If the WalkHandlers.TLocale function is not nil (ie. was set by outside code), calls it with this TLocale instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TLocale instance.
func (me *TLocale) Walk() (err error) {
	if fn := WalkHandlers.TLocale; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CountrysequenceLocaleschema_Country_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LocaleValuesequenceQualificationRequirementschema_LocaleValue_TLocale_ struct {
	LocaleValues []*TLocale `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 LocaleValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LocaleValuesequenceQualificationRequirementschema_LocaleValue_TLocale_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LocaleValuesequenceQualificationRequirementschema_LocaleValue_TLocale_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LocaleValuesequenceQualificationRequirementschema_LocaleValue_TLocale_ instance.
func (me *XsdGoPkgHasElems_LocaleValuesequenceQualificationRequirementschema_LocaleValue_TLocale_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LocaleValuesequenceQualificationRequirementschema_LocaleValue_TLocale_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LocaleValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_ struct {
	RequiredToPreview xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RequiredToPreview"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TQualificationRequirement struct {
	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElem_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_

	XsdGoPkgHasElems_IntegerValuesequenceQualificationRequirementschema_IntegerValue_XsdtInt_

	XsdGoPkgHasElems_LocaleValuesequenceQualificationRequirementschema_LocaleValue_TLocale_

	XsdGoPkgHasElem_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_
}

//	If the WalkHandlers.TQualificationRequirement function is not nil (ie. was set by outside code), calls it with this TQualificationRequirement instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TQualificationRequirement instance.
func (me *TQualificationRequirement) Walk() (err error) {
	if fn := WalkHandlers.TQualificationRequirement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_LocaleValuesequenceQualificationRequirementschema_LocaleValue_TLocale_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_IntegerValuesequenceQualificationRequirementschema_IntegerValue_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_ struct {
	QualificationRequirements []*TQualificationRequirement `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationRequirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_ instance.
func (me *XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.QualificationRequirements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_ struct {
	Value xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_ struct {
	Name xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Name"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_ instance.
func (me *XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type THITLayoutParameter struct {
	XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_

	XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_
}

//	If the WalkHandlers.THITLayoutParameter function is not nil (ie. was set by outside code), calls it with this THITLayoutParameter instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this THITLayoutParameter instance.
func (me *THITLayoutParameter) Walk() (err error) {
	if fn := WalkHandlers.THITLayoutParameter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_ struct {
	HITLayoutParameters []*THITLayoutParameter `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITLayoutParameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_ instance.
func (me *XsdGoPkgHasElems_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HITLayoutParameters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCreateHITRequest struct {
	XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_

	XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_

	XsdGoPkgHasElems_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_

	XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_

	XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_

	XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_

	XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_

	XsdGoPkgHasElem_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_

	XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_

	XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_

	XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_

	XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_

	XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_

	XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_

	XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_

	XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_

	XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TCreateHITRequest function is not nil (ie. was set by outside code), calls it with this TCreateHITRequest instance as the single argument. Then calls the Walk() method on 18/18 embed(s) and 0/0 field(s) belonging to this TCreateHITRequest instance.
func (me *TCreateHITRequest) Walk() (err error) {
	if fn := WalkHandlers.TCreateHITRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_ struct {
	Requests []*TCreateHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_ struct {
	AWSAccessKeyId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AWSAccessKeyId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_ struct {
	Timestamp xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Timestamp"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_ struct {
	Signature xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Signature"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_ instance.
func (me *XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCreateHIT struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_
}

//	If the WalkHandlers.TxsdCreateHIT function is not nil (ie. was set by outside code), calls it with this TxsdCreateHIT instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdCreateHIT instance.
func (me *TxsdCreateHIT) Walk() (err error) {
	if fn := WalkHandlers.TxsdCreateHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CreateHIT struct {
	CreateHITs []*TxsdCreateHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CreateHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CreateHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CreateHIT instance.
func (me *XsdGoPkgHasElems_CreateHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CreateHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CreateHITs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CreateHIT struct {
	CreateHIT *TxsdCreateHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CreateHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CreateHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CreateHIT instance.
func (me *XsdGoPkgHasElem_CreateHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CreateHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CreateHIT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_ struct {
	NumberOfAssignmentsAvailable xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NumberOfAssignmentsAvailable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_ struct {
	CreationTime xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreationTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExpirationsequenceHITschema_Expiration_XsdtDateTime_ struct {
	Expiration xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Expiration"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExpirationsequenceHITschema_Expiration_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExpirationsequenceHITschema_Expiration_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExpirationsequenceHITschema_Expiration_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_ExpirationsequenceHITschema_Expiration_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExpirationsequenceHITschema_Expiration_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type THITReviewStatus xsdt.String

//	Returns true if the value of this enumerated THITReviewStatus is "MarkedForReview".
func (me THITReviewStatus) IsMarkedForReview() bool { return me.String() == "MarkedForReview" }

//	Returns true if the value of this enumerated THITReviewStatus is "ReviewedAppropriate".
func (me THITReviewStatus) IsReviewedAppropriate() bool { return me.String() == "ReviewedAppropriate" }

//	Returns true if the value of this enumerated THITReviewStatus is "ReviewedInappropriate".
func (me THITReviewStatus) IsReviewedInappropriate() bool {
	return me.String() == "ReviewedInappropriate"
}

//	Since THITReviewStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *THITReviewStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since THITReviewStatus is just a simple String type, this merely returns the current string value.
func (me THITReviewStatus) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to THITReviewStatus's alias type xsdt.String.
func (me THITReviewStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated THITReviewStatus is "NotReviewed".
func (me THITReviewStatus) IsNotReviewed() bool { return me.String() == "NotReviewed" }

type XsdGoPkgHasElem_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_ struct {
	HITReviewStatus THITReviewStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITReviewStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_ instance.
func (me *XsdGoPkgHasElem_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TReviewableHITStatus xsdt.String

//	Since TReviewableHITStatus is just a simple String type, this merely returns the current string value.
func (me TReviewableHITStatus) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TReviewableHITStatus's alias type xsdt.String.
func (me TReviewableHITStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TReviewableHITStatus is "Reviewable".
func (me TReviewableHITStatus) IsReviewable() bool { return me.String() == "Reviewable" }

//	Returns true if the value of this enumerated TReviewableHITStatus is "Reviewing".
func (me TReviewableHITStatus) IsReviewing() bool { return me.String() == "Reviewing" }

//	Since TReviewableHITStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TReviewableHITStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElem_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_ struct {
	Status TReviewableHITStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Status"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_ instance.
func (me *XsdGoPkgHasElem_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSortDirection xsdt.String

//	This convenience method just performs a simple type conversion to TSortDirection's alias type xsdt.String.
func (me TSortDirection) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TSortDirection is "Ascending".
func (me TSortDirection) IsAscending() bool { return me.String() == "Ascending" }

//	Returns true if the value of this enumerated TSortDirection is "Descending".
func (me TSortDirection) IsDescending() bool { return me.String() == "Descending" }

//	Since TSortDirection is just a simple String type, this merely sets the current value from the specified string.
func (me *TSortDirection) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSortDirection is just a simple String type, this merely returns the current string value.
func (me TSortDirection) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_ struct {
	SortDirection TSortDirection `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortDirection"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_ instance.
func (me *XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetReviewableHITsSortProperty xsdt.String

//	Since TGetReviewableHITsSortProperty is just a simple String type, this merely returns the current string value.
func (me TGetReviewableHITsSortProperty) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TGetReviewableHITsSortProperty's alias type xsdt.String.
func (me TGetReviewableHITsSortProperty) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TGetReviewableHITsSortProperty is "Title".
func (me TGetReviewableHITsSortProperty) IsTitle() bool { return me.String() == "Title" }

//	Returns true if the value of this enumerated TGetReviewableHITsSortProperty is "Reward".
func (me TGetReviewableHITsSortProperty) IsReward() bool { return me.String() == "Reward" }

//	Returns true if the value of this enumerated TGetReviewableHITsSortProperty is "Expiration".
func (me TGetReviewableHITsSortProperty) IsExpiration() bool { return me.String() == "Expiration" }

//	Returns true if the value of this enumerated TGetReviewableHITsSortProperty is "CreationTime".
func (me TGetReviewableHITsSortProperty) IsCreationTime() bool { return me.String() == "CreationTime" }

//	Returns true if the value of this enumerated TGetReviewableHITsSortProperty is "Enumeration".
func (me TGetReviewableHITsSortProperty) IsEnumeration() bool { return me.String() == "Enumeration" }

//	Since TGetReviewableHITsSortProperty is just a simple String type, this merely sets the current value from the specified string.
func (me *TGetReviewableHITsSortProperty) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElem_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_ struct {
	SortProperty TGetReviewableHITsSortProperty `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_ instance.
func (me *XsdGoPkgHasElem_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_ struct {
	PageNumber xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 PageNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_ struct {
	PageSize xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 PageSize"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetReviewableHITsRequest struct {
	XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_

	XsdGoPkgHasElem_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_

	XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_

	XsdGoPkgHasElem_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TGetReviewableHITsRequest function is not nil (ie. was set by outside code), calls it with this TGetReviewableHITsRequest instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TGetReviewableHITsRequest instance.
func (me *TGetReviewableHITsRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetReviewableHITsRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetReviewableHITsRequestsequenceTxsdRequestRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_ struct {
	GetReviewableHITsRequest *TGetReviewableHITsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewableHITsRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetReviewableHITsRequestsequenceTxsdRequestRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetReviewableHITsRequestsequenceTxsdRequestRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetReviewableHITsRequestsequenceTxsdRequestRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_ instance.
func (me *XsdGoPkgHasElem_GetReviewableHITsRequestsequenceTxsdRequestRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetReviewableHITsRequestsequenceTxsdRequestRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetReviewableHITsRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetHITsForQualificationTypeRequest struct {
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_
}

//	If the WalkHandlers.TGetHITsForQualificationTypeRequest function is not nil (ie. was set by outside code), calls it with this TGetHITsForQualificationTypeRequest instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TGetHITsForQualificationTypeRequest instance.
func (me *TGetHITsForQualificationTypeRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetHITsForQualificationTypeRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetHITsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_ struct {
	GetHITsForQualificationTypeRequest *TGetHITsForQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITsForQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetHITsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetHITsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetHITsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_GetHITsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetHITsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetHITsForQualificationTypeRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_ struct {
	HITId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_ struct {
	AssignmentId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignmentId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetBonusPaymentsRequest struct {
	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TGetBonusPaymentsRequest function is not nil (ie. was set by outside code), calls it with this TGetBonusPaymentsRequest instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TGetBonusPaymentsRequest instance.
func (me *TGetBonusPaymentsRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetBonusPaymentsRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_ struct {
	GetBonusPaymentsRequest *TGetBonusPaymentsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBonusPaymentsRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_ instance.
func (me *XsdGoPkgHasElem_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetBonusPaymentsRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_ struct {
	MessageText xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MessageText"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_ instance.
func (me *XsdGoPkgHasElem_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WorkerIdsequenceNotifyWorkersRequestschema_WorkerId_XsdtString_ struct {
	WorkerIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 WorkerId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WorkerIdsequenceNotifyWorkersRequestschema_WorkerId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WorkerIdsequenceNotifyWorkersRequestschema_WorkerId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WorkerIdsequenceNotifyWorkersRequestschema_WorkerId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_WorkerIdsequenceNotifyWorkersRequestschema_WorkerId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WorkerIdsequenceNotifyWorkersRequestschema_WorkerId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_ struct {
	Subject xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Subject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_ instance.
func (me *XsdGoPkgHasElem_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNotifyWorkersRequest struct {
	XsdGoPkgHasElem_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_

	XsdGoPkgHasElems_WorkerIdsequenceNotifyWorkersRequestschema_WorkerId_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_
}

//	If the WalkHandlers.TNotifyWorkersRequest function is not nil (ie. was set by outside code), calls it with this TNotifyWorkersRequest instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TNotifyWorkersRequest instance.
func (me *TNotifyWorkersRequest) Walk() (err error) {
	if fn := WalkHandlers.TNotifyWorkersRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_WorkerIdsequenceNotifyWorkersRequestschema_WorkerId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_ struct {
	NotifyWorkersRequest *TNotifyWorkersRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_ instance.
func (me *XsdGoPkgHasElem_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NotifyWorkersRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_ struct {
	Reason xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Reason"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_ struct {
	QualificationRequestId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationRequestId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRejectQualificationRequestRequest struct {
	XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_

	XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TRejectQualificationRequestRequest function is not nil (ie. was set by outside code), calls it with this TRejectQualificationRequestRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TRejectQualificationRequestRequest instance.
func (me *TRejectQualificationRequestRequest) Walk() (err error) {
	if fn := WalkHandlers.TRejectQualificationRequestRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_ struct {
	RejectQualificationRequestRequest *TRejectQualificationRequestRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectQualificationRequestRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_ instance.
func (me *XsdGoPkgHasElem_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RejectQualificationRequestRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetQualificationTypeRequest struct {
	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TGetQualificationTypeRequest function is not nil (ie. was set by outside code), calls it with this TGetQualificationTypeRequest instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TGetQualificationTypeRequest instance.
func (me *TGetQualificationTypeRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetQualificationTypeRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_ struct {
	GetQualificationTypeRequest *TGetQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_GetQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationTypeRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_ struct {
	Code xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Code"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_ struct {
	Message xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Message"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_ instance.
func (me *XsdGoPkgHasElem_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TKeyValuePair struct {
	XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_

	XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_
}

//	If the WalkHandlers.TKeyValuePair function is not nil (ie. was set by outside code), calls it with this TKeyValuePair instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TKeyValuePair instance.
func (me *TKeyValuePair) Walk() (err error) {
	if fn := WalkHandlers.TKeyValuePair; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_ struct {
	Datas []*TKeyValuePair `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Data"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_ instance.
func (me *XsdGoPkgHasElems_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Datas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdErrorsSequenceError struct {
	XsdGoPkgHasElem_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_

	XsdGoPkgHasElem_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_

	XsdGoPkgHasElems_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_
}

//	If the WalkHandlers.TxsdErrorsSequenceError function is not nil (ie. was set by outside code), calls it with this TxsdErrorsSequenceError instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdErrorsSequenceError instance.
func (me *TxsdErrorsSequenceError) Walk() (err error) {
	if fn := WalkHandlers.TxsdErrorsSequenceError; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_ struct {
	Errors []*TxsdErrorsSequenceError `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Error"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_ instance.
func (me *XsdGoPkgHasElems_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Errors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdErrors struct {
	XsdGoPkgHasElems_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_
}

//	If the WalkHandlers.TxsdErrors function is not nil (ie. was set by outside code), calls it with this TxsdErrors instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdErrors instance.
func (me *TxsdErrors) Walk() (err error) {
	if fn := WalkHandlers.TxsdErrors; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Errors struct {
	Errors *TxsdErrors `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Errors"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Errors function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Errors instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Errors instance.
func (me *XsdGoPkgHasElem_Errors) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Errors; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Errors.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_ struct {
	Query xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Query"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_ instance.
func (me *XsdGoPkgHasElem_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_ struct {
	MustBeRequestable xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MustBeRequestable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_ struct {
	MustBeOwnedByCaller xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MustBeOwnedByCaller"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSearchQualificationTypesSortProperty xsdt.String

//	Returns true if the value of this enumerated TSearchQualificationTypesSortProperty is "Name".
func (me TSearchQualificationTypesSortProperty) IsName() bool { return me.String() == "Name" }

//	Since TSearchQualificationTypesSortProperty is just a simple String type, this merely sets the current value from the specified string.
func (me *TSearchQualificationTypesSortProperty) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSearchQualificationTypesSortProperty is just a simple String type, this merely returns the current string value.
func (me TSearchQualificationTypesSortProperty) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSearchQualificationTypesSortProperty's alias type xsdt.String.
func (me TSearchQualificationTypesSortProperty) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_ struct {
	SortProperty TSearchQualificationTypesSortProperty `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_ instance.
func (me *XsdGoPkgHasElem_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSearchQualificationTypesRequest struct {
	XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_

	XsdGoPkgHasElem_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_

	XsdGoPkgHasElem_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_

	XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_

	XsdGoPkgHasElem_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_
}

//	If the WalkHandlers.TSearchQualificationTypesRequest function is not nil (ie. was set by outside code), calls it with this TSearchQualificationTypesRequest instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TSearchQualificationTypesRequest instance.
func (me *TSearchQualificationTypesRequest) Walk() (err error) {
	if fn := WalkHandlers.TSearchQualificationTypesRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SearchQualificationTypesRequestsequenceTxsdRequestRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_ struct {
	SearchQualificationTypesRequest *TSearchQualificationTypesRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchQualificationTypesRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SearchQualificationTypesRequestsequenceTxsdRequestRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SearchQualificationTypesRequestsequenceTxsdRequestRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SearchQualificationTypesRequestsequenceTxsdRequestRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_ instance.
func (me *XsdGoPkgHasElem_SearchQualificationTypesRequestsequenceTxsdRequestRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SearchQualificationTypesRequestsequenceTxsdRequestRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SearchQualificationTypesRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_ struct {
	Count xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Count"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRequesterStatistic xsdt.String

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberPluralityAnswersEvaluated".
func (me TRequesterStatistic) IsNumberPluralityAnswersEvaluated() bool {
	return me.String() == "NumberPluralityAnswersEvaluated"
}

//	Since TRequesterStatistic is just a simple String type, this merely returns the current string value.
func (me TRequesterStatistic) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberAssignmentsApproved".
func (me TRequesterStatistic) IsNumberAssignmentsApproved() bool {
	return me.String() == "NumberAssignmentsApproved"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberAssignmentsAbandoned".
func (me TRequesterStatistic) IsNumberAssignmentsAbandoned() bool {
	return me.String() == "NumberAssignmentsAbandoned"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberPluralityAnswersIncorrect".
func (me TRequesterStatistic) IsNumberPluralityAnswersIncorrect() bool {
	return me.String() == "NumberPluralityAnswersIncorrect"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "TotalFeePayout".
func (me TRequesterStatistic) IsTotalFeePayout() bool { return me.String() == "TotalFeePayout" }

//	Returns true if the value of this enumerated TRequesterStatistic is "EstimatedTotalLiability".
func (me TRequesterStatistic) IsEstimatedTotalLiability() bool {
	return me.String() == "EstimatedTotalLiability"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "TotalRewardAndFeePayout".
func (me TRequesterStatistic) IsTotalRewardAndFeePayout() bool {
	return me.String() == "TotalRewardAndFeePayout"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberAssignmentsRejected".
func (me TRequesterStatistic) IsNumberAssignmentsRejected() bool {
	return me.String() == "NumberAssignmentsRejected"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "PercentKnownAnswersCorrect".
func (me TRequesterStatistic) IsPercentKnownAnswersCorrect() bool {
	return me.String() == "PercentKnownAnswersCorrect"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberAssignmentsPending".
func (me TRequesterStatistic) IsNumberAssignmentsPending() bool {
	return me.String() == "NumberAssignmentsPending"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberHITsAssignable".
func (me TRequesterStatistic) IsNumberHITsAssignable() bool {
	return me.String() == "NumberHITsAssignable"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberHITsReviewable".
func (me TRequesterStatistic) IsNumberHITsReviewable() bool {
	return me.String() == "NumberHITsReviewable"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "TotalRewardFeePayout".
func (me TRequesterStatistic) IsTotalRewardFeePayout() bool {
	return me.String() == "TotalRewardFeePayout"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "EstimatedRewardLiability".
func (me TRequesterStatistic) IsEstimatedRewardLiability() bool {
	return me.String() == "EstimatedRewardLiability"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberAssignmentsAvailable".
func (me TRequesterStatistic) IsNumberAssignmentsAvailable() bool {
	return me.String() == "NumberAssignmentsAvailable"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberAssignmentsReturned".
func (me TRequesterStatistic) IsNumberAssignmentsReturned() bool {
	return me.String() == "NumberAssignmentsReturned"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberKnownAnswersIncorrect".
func (me TRequesterStatistic) IsNumberKnownAnswersIncorrect() bool {
	return me.String() == "NumberKnownAnswersIncorrect"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "PercentPluralityAnswersCorrect".
func (me TRequesterStatistic) IsPercentPluralityAnswersCorrect() bool {
	return me.String() == "PercentPluralityAnswersCorrect"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "PercentAssignmentsRejected".
func (me TRequesterStatistic) IsPercentAssignmentsRejected() bool {
	return me.String() == "PercentAssignmentsRejected"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberHITsCompleted".
func (me TRequesterStatistic) IsNumberHITsCompleted() bool {
	return me.String() == "NumberHITsCompleted"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "EstimatedFeeLiability".
func (me TRequesterStatistic) IsEstimatedFeeLiability() bool {
	return me.String() == "EstimatedFeeLiability"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberAssignmentsAccepted".
func (me TRequesterStatistic) IsNumberAssignmentsAccepted() bool {
	return me.String() == "NumberAssignmentsAccepted"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "PercentAssignmentsApproved".
func (me TRequesterStatistic) IsPercentAssignmentsApproved() bool {
	return me.String() == "PercentAssignmentsApproved"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberKnownAnswersCorrect".
func (me TRequesterStatistic) IsNumberKnownAnswersCorrect() bool {
	return me.String() == "NumberKnownAnswersCorrect"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberPluralityAnswersCorrect".
func (me TRequesterStatistic) IsNumberPluralityAnswersCorrect() bool {
	return me.String() == "NumberPluralityAnswersCorrect"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberHITsCreated".
func (me TRequesterStatistic) IsNumberHITsCreated() bool { return me.String() == "NumberHITsCreated" }

//	Returns true if the value of this enumerated TRequesterStatistic is "TotalRewardPayout".
func (me TRequesterStatistic) IsTotalRewardPayout() bool { return me.String() == "TotalRewardPayout" }

//	Returns true if the value of this enumerated TRequesterStatistic is "TotalBonusFeePayout".
func (me TRequesterStatistic) IsTotalBonusFeePayout() bool {
	return me.String() == "TotalBonusFeePayout"
}

//	Returns true if the value of this enumerated TRequesterStatistic is "AverageRewardAmount".
func (me TRequesterStatistic) IsAverageRewardAmount() bool {
	return me.String() == "AverageRewardAmount"
}

//	Since TRequesterStatistic is just a simple String type, this merely sets the current value from the specified string.
func (me *TRequesterStatistic) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TRequesterStatistic's alias type xsdt.String.
func (me TRequesterStatistic) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TRequesterStatistic is "TotalBonusPayout".
func (me TRequesterStatistic) IsTotalBonusPayout() bool { return me.String() == "TotalBonusPayout" }

//	Returns true if the value of this enumerated TRequesterStatistic is "NumberKnownAnswersEvaluated".
func (me TRequesterStatistic) IsNumberKnownAnswersEvaluated() bool {
	return me.String() == "NumberKnownAnswersEvaluated"
}

type XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_ struct {
	Statistic TRequesterStatistic `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Statistic"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_ instance.
func (me *XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TimePeriod xsdt.String

//	Returns true if the value of this enumerated TimePeriod is "LifeToDate".
func (me TimePeriod) IsLifeToDate() bool { return me.String() == "LifeToDate" }

//	Since TimePeriod is just a simple String type, this merely sets the current value from the specified string.
func (me *TimePeriod) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TimePeriod is just a simple String type, this merely returns the current string value.
func (me TimePeriod) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TimePeriod's alias type xsdt.String.
func (me TimePeriod) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TimePeriod is "OneDay".
func (me TimePeriod) IsOneDay() bool { return me.String() == "OneDay" }

//	Returns true if the value of this enumerated TimePeriod is "SevenDays".
func (me TimePeriod) IsSevenDays() bool { return me.String() == "SevenDays" }

//	Returns true if the value of this enumerated TimePeriod is "ThirtyDays".
func (me TimePeriod) IsThirtyDays() bool { return me.String() == "ThirtyDays" }

type XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_ struct {
	TimePeriod TimePeriod `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 TimePeriod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_ instance.
func (me *XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetRequesterStatisticRequest struct {
	XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_

	XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_

	XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TGetRequesterStatisticRequest function is not nil (ie. was set by outside code), calls it with this TGetRequesterStatisticRequest instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TGetRequesterStatisticRequest instance.
func (me *TGetRequesterStatisticRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetRequesterStatisticRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_ struct {
	GetRequesterStatisticRequest *TGetRequesterStatisticRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterStatisticRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_ instance.
func (me *XsdGoPkgHasElem_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetRequesterStatisticRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_ struct {
	WorkerId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 WorkerId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetRequesterWorkerStatisticRequest struct {
	XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_

	XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_

	XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_

	XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TGetRequesterWorkerStatisticRequest function is not nil (ie. was set by outside code), calls it with this TGetRequesterWorkerStatisticRequest instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TGetRequesterWorkerStatisticRequest instance.
func (me *TGetRequesterWorkerStatisticRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetRequesterWorkerStatisticRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_ struct {
	GetRequesterWorkerStatisticRequest *TGetRequesterWorkerStatisticRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterWorkerStatisticRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_ instance.
func (me *XsdGoPkgHasElem_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetRequesterWorkerStatisticRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_ struct {
	RequesterFeedback xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RequesterFeedback"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_ instance.
func (me *XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TApproveAssignmentRequest struct {
	XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_
}

//	If the WalkHandlers.TApproveAssignmentRequest function is not nil (ie. was set by outside code), calls it with this TApproveAssignmentRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TApproveAssignmentRequest instance.
func (me *TApproveAssignmentRequest) Walk() (err error) {
	if fn := WalkHandlers.TApproveAssignmentRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApproveAssignmentRequestsequenceTxsdRequestRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_ struct {
	ApproveAssignmentRequest *TApproveAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveAssignmentRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApproveAssignmentRequestsequenceTxsdRequestRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApproveAssignmentRequestsequenceTxsdRequestRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ApproveAssignmentRequestsequenceTxsdRequestRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_ instance.
func (me *XsdGoPkgHasElem_ApproveAssignmentRequestsequenceTxsdRequestRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApproveAssignmentRequestsequenceTxsdRequestRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ApproveAssignmentRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetAssignmentsForHITSortProperty xsdt.String

//	Returns true if the value of this enumerated TGetAssignmentsForHITSortProperty is "AssignmentStatus".
func (me TGetAssignmentsForHITSortProperty) IsAssignmentStatus() bool {
	return me.String() == "AssignmentStatus"
}

//	Since TGetAssignmentsForHITSortProperty is just a simple String type, this merely sets the current value from the specified string.
func (me *TGetAssignmentsForHITSortProperty) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TGetAssignmentsForHITSortProperty is just a simple String type, this merely returns the current string value.
func (me TGetAssignmentsForHITSortProperty) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TGetAssignmentsForHITSortProperty's alias type xsdt.String.
func (me TGetAssignmentsForHITSortProperty) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TGetAssignmentsForHITSortProperty is "AcceptTime".
func (me TGetAssignmentsForHITSortProperty) IsAcceptTime() bool { return me.String() == "AcceptTime" }

//	Returns true if the value of this enumerated TGetAssignmentsForHITSortProperty is "SubmitTime".
func (me TGetAssignmentsForHITSortProperty) IsSubmitTime() bool { return me.String() == "SubmitTime" }

//	Returns true if the value of this enumerated TGetAssignmentsForHITSortProperty is "Answer".
func (me TGetAssignmentsForHITSortProperty) IsAnswer() bool { return me.String() == "Answer" }

type XsdGoPkgHasElem_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_ struct {
	SortProperty TGetAssignmentsForHITSortProperty `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_ instance.
func (me *XsdGoPkgHasElem_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAssignmentStatus xsdt.String

//	Since TAssignmentStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TAssignmentStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TAssignmentStatus is just a simple String type, this merely returns the current string value.
func (me TAssignmentStatus) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TAssignmentStatus's alias type xsdt.String.
func (me TAssignmentStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TAssignmentStatus is "Submitted".
func (me TAssignmentStatus) IsSubmitted() bool { return me.String() == "Submitted" }

//	Returns true if the value of this enumerated TAssignmentStatus is "Approved".
func (me TAssignmentStatus) IsApproved() bool { return me.String() == "Approved" }

//	Returns true if the value of this enumerated TAssignmentStatus is "Rejected".
func (me TAssignmentStatus) IsRejected() bool { return me.String() == "Rejected" }

type XsdGoPkgHasElems_AssignmentStatussequenceGetAssignmentsForHITRequestschema_AssignmentStatus_TAssignmentStatus_ struct {
	AssignmentStatuses []TAssignmentStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignmentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssignmentStatussequenceGetAssignmentsForHITRequestschema_AssignmentStatus_TAssignmentStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssignmentStatussequenceGetAssignmentsForHITRequestschema_AssignmentStatus_TAssignmentStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssignmentStatussequenceGetAssignmentsForHITRequestschema_AssignmentStatus_TAssignmentStatus_ instance.
func (me *XsdGoPkgHasElems_AssignmentStatussequenceGetAssignmentsForHITRequestschema_AssignmentStatus_TAssignmentStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssignmentStatussequenceGetAssignmentsForHITRequestschema_AssignmentStatus_TAssignmentStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetAssignmentsForHITRequest struct {
	XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_

	XsdGoPkgHasElems_AssignmentStatussequenceGetAssignmentsForHITRequestschema_AssignmentStatus_TAssignmentStatus_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_

	XsdGoPkgHasElem_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_
}

//	If the WalkHandlers.TGetAssignmentsForHITRequest function is not nil (ie. was set by outside code), calls it with this TGetAssignmentsForHITRequest instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TGetAssignmentsForHITRequest instance.
func (me *TGetAssignmentsForHITRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetAssignmentsForHITRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssignmentStatussequenceGetAssignmentsForHITRequestschema_AssignmentStatus_TAssignmentStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_ struct {
	GetAssignmentsForHITRequest *TGetAssignmentsForHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentsForHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_ instance.
func (me *XsdGoPkgHasElem_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAssignmentsForHITRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_ struct {
	QuestionIdentifier xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QuestionIdentifier"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_ instance.
func (me *XsdGoPkgHasElem_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetFileUploadURLRequest struct {
	XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_

	XsdGoPkgHasElem_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_
}

//	If the WalkHandlers.TGetFileUploadURLRequest function is not nil (ie. was set by outside code), calls it with this TGetFileUploadURLRequest instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TGetFileUploadURLRequest instance.
func (me *TGetFileUploadURLRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetFileUploadURLRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetFileUploadURLRequestsequenceTxsdRequestRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_ struct {
	GetFileUploadURLRequest *TGetFileUploadURLRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetFileUploadURLRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetFileUploadURLRequestsequenceTxsdRequestRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetFileUploadURLRequestsequenceTxsdRequestRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetFileUploadURLRequestsequenceTxsdRequestRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_ instance.
func (me *XsdGoPkgHasElem_GetFileUploadURLRequestsequenceTxsdRequestRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetFileUploadURLRequestsequenceTxsdRequestRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetFileUploadURLRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_ struct {
	IsValid xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 IsValid"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_ instance.
func (me *XsdGoPkgHasElem_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CreateHITRequestsequenceTxsdRequestRequestschema_CreateHITRequest_TCreateHITRequest_ struct {
	CreateHITRequest *TCreateHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CreateHITRequestsequenceTxsdRequestRequestschema_CreateHITRequest_TCreateHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CreateHITRequestsequenceTxsdRequestRequestschema_CreateHITRequest_TCreateHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CreateHITRequestsequenceTxsdRequestRequestschema_CreateHITRequest_TCreateHITRequest_ instance.
func (me *XsdGoPkgHasElem_CreateHITRequestsequenceTxsdRequestRequestschema_CreateHITRequest_TCreateHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CreateHITRequestsequenceTxsdRequestRequestschema_CreateHITRequest_TCreateHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CreateHITRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetHITRequest struct {
	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TGetHITRequest function is not nil (ie. was set by outside code), calls it with this TGetHITRequest instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TGetHITRequest instance.
func (me *TGetHITRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetHITRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_ struct {
	GetHITRequest *TGetHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_ instance.
func (me *XsdGoPkgHasElem_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetHITRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TReviewPolicyLevel xsdt.String

//	Since TReviewPolicyLevel is just a simple String type, this merely sets the current value from the specified string.
func (me *TReviewPolicyLevel) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TReviewPolicyLevel is just a simple String type, this merely returns the current string value.
func (me TReviewPolicyLevel) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TReviewPolicyLevel's alias type xsdt.String.
func (me TReviewPolicyLevel) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TReviewPolicyLevel is "Assignment".
func (me TReviewPolicyLevel) IsAssignment() bool { return me.String() == "Assignment" }

//	Returns true if the value of this enumerated TReviewPolicyLevel is "HIT".
func (me TReviewPolicyLevel) IsHit() bool { return me.String() == "HIT" }

type XsdGoPkgHasElems_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_ struct {
	PolicyLevels []TReviewPolicyLevel `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 PolicyLevel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_ instance.
func (me *XsdGoPkgHasElems_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_ struct {
	RetrieveActions xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RetrieveActions"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_ struct {
	RetrieveResults xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RetrieveResults"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetReviewResultsForHITRequest struct {
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElems_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_

	XsdGoPkgHasElem_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_

	XsdGoPkgHasElem_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_
}

//	If the WalkHandlers.TGetReviewResultsForHITRequest function is not nil (ie. was set by outside code), calls it with this TGetReviewResultsForHITRequest instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TGetReviewResultsForHITRequest instance.
func (me *TGetReviewResultsForHITRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetReviewResultsForHITRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetReviewResultsForHITRequestsequenceTxsdRequestRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_ struct {
	GetReviewResultsForHITRequest *TGetReviewResultsForHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewResultsForHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetReviewResultsForHITRequestsequenceTxsdRequestRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetReviewResultsForHITRequestsequenceTxsdRequestRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetReviewResultsForHITRequestsequenceTxsdRequestRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_ instance.
func (me *XsdGoPkgHasElem_GetReviewResultsForHITRequestsequenceTxsdRequestRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetReviewResultsForHITRequestsequenceTxsdRequestRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetReviewResultsForHITRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_ struct {
	IntegerValue xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 IntegerValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_ struct {
	SendNotification xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SendNotification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAssignQualificationRequest struct {
	XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_

	XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_

	XsdGoPkgHasElem_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_
}

//	If the WalkHandlers.TAssignQualificationRequest function is not nil (ie. was set by outside code), calls it with this TAssignQualificationRequest instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TAssignQualificationRequest instance.
func (me *TAssignQualificationRequest) Walk() (err error) {
	if fn := WalkHandlers.TAssignQualificationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssignQualificationRequestsequenceTxsdRequestRequestschema_AssignQualificationRequest_TAssignQualificationRequest_ struct {
	AssignQualificationRequest *TAssignQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignQualificationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssignQualificationRequestsequenceTxsdRequestRequestschema_AssignQualificationRequest_TAssignQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssignQualificationRequestsequenceTxsdRequestRequestschema_AssignQualificationRequest_TAssignQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AssignQualificationRequestsequenceTxsdRequestRequestschema_AssignQualificationRequest_TAssignQualificationRequest_ instance.
func (me *XsdGoPkgHasElem_AssignQualificationRequestsequenceTxsdRequestRequestschema_AssignQualificationRequest_TAssignQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssignQualificationRequestsequenceTxsdRequestRequestschema_AssignQualificationRequest_TAssignQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssignQualificationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_ struct {
	BonusAmount *TPrice `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BonusAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_ instance.
func (me *XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BonusAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGrantBonusRequest struct {
	XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_

	XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_

	XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_

	XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_
}

//	If the WalkHandlers.TGrantBonusRequest function is not nil (ie. was set by outside code), calls it with this TGrantBonusRequest instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TGrantBonusRequest instance.
func (me *TGrantBonusRequest) Walk() (err error) {
	if fn := WalkHandlers.TGrantBonusRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_ struct {
	GrantBonusRequest *TGrantBonusRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantBonusRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_ instance.
func (me *XsdGoPkgHasElem_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GrantBonusRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetBlockedWorkersRequest struct {
	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TGetBlockedWorkersRequest function is not nil (ie. was set by outside code), calls it with this TGetBlockedWorkersRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TGetBlockedWorkersRequest instance.
func (me *TGetBlockedWorkersRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetBlockedWorkersRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_ struct {
	GetBlockedWorkersRequest *TGetBlockedWorkersRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBlockedWorkersRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_ instance.
func (me *XsdGoPkgHasElem_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetBlockedWorkersRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBlockWorkerRequest struct {
	XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_
}

//	If the WalkHandlers.TBlockWorkerRequest function is not nil (ie. was set by outside code), calls it with this TBlockWorkerRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TBlockWorkerRequest instance.
func (me *TBlockWorkerRequest) Walk() (err error) {
	if fn := WalkHandlers.TBlockWorkerRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BlockWorkerRequestsequenceTxsdRequestRequestschema_BlockWorkerRequest_TBlockWorkerRequest_ struct {
	BlockWorkerRequest *TBlockWorkerRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BlockWorkerRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BlockWorkerRequestsequenceTxsdRequestRequestschema_BlockWorkerRequest_TBlockWorkerRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BlockWorkerRequestsequenceTxsdRequestRequestschema_BlockWorkerRequest_TBlockWorkerRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BlockWorkerRequestsequenceTxsdRequestRequestschema_BlockWorkerRequest_TBlockWorkerRequest_ instance.
func (me *XsdGoPkgHasElem_BlockWorkerRequestsequenceTxsdRequestRequestschema_BlockWorkerRequest_TBlockWorkerRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BlockWorkerRequestsequenceTxsdRequestRequestschema_BlockWorkerRequest_TBlockWorkerRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlockWorkerRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDisposeHITRequest struct {
	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TDisposeHITRequest function is not nil (ie. was set by outside code), calls it with this TDisposeHITRequest instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TDisposeHITRequest instance.
func (me *TDisposeHITRequest) Walk() (err error) {
	if fn := WalkHandlers.TDisposeHITRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_ struct {
	DisposeHITRequest *TDisposeHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_ instance.
func (me *XsdGoPkgHasElem_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisposeHITRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSearchHITsSortProperty xsdt.String

//	Returns true if the value of this enumerated TSearchHITsSortProperty is "CreationTime".
func (me TSearchHITsSortProperty) IsCreationTime() bool { return me.String() == "CreationTime" }

//	Returns true if the value of this enumerated TSearchHITsSortProperty is "Enumeration".
func (me TSearchHITsSortProperty) IsEnumeration() bool { return me.String() == "Enumeration" }

//	Since TSearchHITsSortProperty is just a simple String type, this merely sets the current value from the specified string.
func (me *TSearchHITsSortProperty) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TSearchHITsSortProperty is just a simple String type, this merely returns the current string value.
func (me TSearchHITsSortProperty) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TSearchHITsSortProperty's alias type xsdt.String.
func (me TSearchHITsSortProperty) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TSearchHITsSortProperty is "Title".
func (me TSearchHITsSortProperty) IsTitle() bool { return me.String() == "Title" }

//	Returns true if the value of this enumerated TSearchHITsSortProperty is "Reward".
func (me TSearchHITsSortProperty) IsReward() bool { return me.String() == "Reward" }

//	Returns true if the value of this enumerated TSearchHITsSortProperty is "Expiration".
func (me TSearchHITsSortProperty) IsExpiration() bool { return me.String() == "Expiration" }

type XsdGoPkgHasElem_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_ struct {
	SortProperty TSearchHITsSortProperty `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_ instance.
func (me *XsdGoPkgHasElem_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSearchHITsRequest struct {
	XsdGoPkgHasElem_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_
}

//	If the WalkHandlers.TSearchHITsRequest function is not nil (ie. was set by outside code), calls it with this TSearchHITsRequest instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TSearchHITsRequest instance.
func (me *TSearchHITsRequest) Walk() (err error) {
	if fn := WalkHandlers.TSearchHITsRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SearchHITsRequestsequenceTxsdRequestRequestschema_SearchHITsRequest_TSearchHITsRequest_ struct {
	SearchHITsRequest *TSearchHITsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchHITsRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SearchHITsRequestsequenceTxsdRequestRequestschema_SearchHITsRequest_TSearchHITsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SearchHITsRequestsequenceTxsdRequestRequestschema_SearchHITsRequest_TSearchHITsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SearchHITsRequestsequenceTxsdRequestRequestschema_SearchHITsRequest_TSearchHITsRequest_ instance.
func (me *XsdGoPkgHasElem_SearchHITsRequestsequenceTxsdRequestRequestschema_SearchHITsRequest_TSearchHITsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SearchHITsRequestsequenceTxsdRequestRequestschema_SearchHITsRequest_TSearchHITsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SearchHITsRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TForceExpireHITRequest struct {
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_
}

//	If the WalkHandlers.TForceExpireHITRequest function is not nil (ie. was set by outside code), calls it with this TForceExpireHITRequest instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TForceExpireHITRequest instance.
func (me *TForceExpireHITRequest) Walk() (err error) {
	if fn := WalkHandlers.TForceExpireHITRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ForceExpireHITRequestsequenceTxsdRequestRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_ struct {
	ForceExpireHITRequest *TForceExpireHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ForceExpireHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ForceExpireHITRequestsequenceTxsdRequestRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ForceExpireHITRequestsequenceTxsdRequestRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ForceExpireHITRequestsequenceTxsdRequestRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_ instance.
func (me *XsdGoPkgHasElem_ForceExpireHITRequestsequenceTxsdRequestRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ForceExpireHITRequestsequenceTxsdRequestRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ForceExpireHITRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_ struct {
	SubjectId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SubjectId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRevokeQualificationRequest struct {
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_

	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_
}

//	If the WalkHandlers.TRevokeQualificationRequest function is not nil (ie. was set by outside code), calls it with this TRevokeQualificationRequest instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TRevokeQualificationRequest instance.
func (me *TRevokeQualificationRequest) Walk() (err error) {
	if fn := WalkHandlers.TRevokeQualificationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_ struct {
	RevokeQualificationRequest *TRevokeQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RevokeQualificationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_ instance.
func (me *XsdGoPkgHasElem_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RevokeQualificationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetQualificationRequestsSortProperty xsdt.String

//	Since TGetQualificationRequestsSortProperty is just a simple String type, this merely sets the current value from the specified string.
func (me *TGetQualificationRequestsSortProperty) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TGetQualificationRequestsSortProperty is just a simple String type, this merely returns the current string value.
func (me TGetQualificationRequestsSortProperty) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TGetQualificationRequestsSortProperty's alias type xsdt.String.
func (me TGetQualificationRequestsSortProperty) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TGetQualificationRequestsSortProperty is "QualificationTypeId".
func (me TGetQualificationRequestsSortProperty) IsQualificationTypeId() bool {
	return me.String() == "QualificationTypeId"
}

//	Returns true if the value of this enumerated TGetQualificationRequestsSortProperty is "SubmitTime".
func (me TGetQualificationRequestsSortProperty) IsSubmitTime() bool {
	return me.String() == "SubmitTime"
}

type XsdGoPkgHasElem_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_ struct {
	SortProperty TGetQualificationRequestsSortProperty `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_ instance.
func (me *XsdGoPkgHasElem_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetQualificationRequestsRequest struct {
	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_

	XsdGoPkgHasElem_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TGetQualificationRequestsRequest function is not nil (ie. was set by outside code), calls it with this TGetQualificationRequestsRequest instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TGetQualificationRequestsRequest instance.
func (me *TGetQualificationRequestsRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetQualificationRequestsRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_ struct {
	GetQualificationRequestsRequest *TGetQualificationRequestsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationRequestsRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_ instance.
func (me *XsdGoPkgHasElem_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationRequestsRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TUnblockWorkerRequest struct {
	XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_

	XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TUnblockWorkerRequest function is not nil (ie. was set by outside code), calls it with this TUnblockWorkerRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TUnblockWorkerRequest instance.
func (me *TUnblockWorkerRequest) Walk() (err error) {
	if fn := WalkHandlers.TUnblockWorkerRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UnblockWorkerRequestsequenceTxsdRequestRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_ struct {
	UnblockWorkerRequest *TUnblockWorkerRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UnblockWorkerRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UnblockWorkerRequestsequenceTxsdRequestRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnblockWorkerRequestsequenceTxsdRequestRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UnblockWorkerRequestsequenceTxsdRequestRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_ instance.
func (me *XsdGoPkgHasElem_UnblockWorkerRequestsequenceTxsdRequestRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UnblockWorkerRequestsequenceTxsdRequestRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UnblockWorkerRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGrantQualificationRequest struct {
	XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_

	XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TGrantQualificationRequest function is not nil (ie. was set by outside code), calls it with this TGrantQualificationRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TGrantQualificationRequest instance.
func (me *TGrantQualificationRequest) Walk() (err error) {
	if fn := WalkHandlers.TGrantQualificationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrantQualificationRequestsequenceTxsdRequestRequestschema_GrantQualificationRequest_TGrantQualificationRequest_ struct {
	GrantQualificationRequest *TGrantQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantQualificationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrantQualificationRequestsequenceTxsdRequestRequestschema_GrantQualificationRequest_TGrantQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrantQualificationRequestsequenceTxsdRequestRequestschema_GrantQualificationRequest_TGrantQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GrantQualificationRequestsequenceTxsdRequestRequestschema_GrantQualificationRequest_TGrantQualificationRequest_ instance.
func (me *XsdGoPkgHasElem_GrantQualificationRequestsequenceTxsdRequestRequestschema_GrantQualificationRequest_TGrantQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrantQualificationRequestsequenceTxsdRequestRequestschema_GrantQualificationRequest_TGrantQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GrantQualificationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TApproveRejectedAssignmentRequest struct {
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_

	XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_
}

//	If the WalkHandlers.TApproveRejectedAssignmentRequest function is not nil (ie. was set by outside code), calls it with this TApproveRejectedAssignmentRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TApproveRejectedAssignmentRequest instance.
func (me *TApproveRejectedAssignmentRequest) Walk() (err error) {
	if fn := WalkHandlers.TApproveRejectedAssignmentRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApproveRejectedAssignmentRequestsequenceTxsdRequestRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_ struct {
	ApproveRejectedAssignmentRequest *TApproveRejectedAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveRejectedAssignmentRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApproveRejectedAssignmentRequestsequenceTxsdRequestRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApproveRejectedAssignmentRequestsequenceTxsdRequestRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ApproveRejectedAssignmentRequestsequenceTxsdRequestRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_ instance.
func (me *XsdGoPkgHasElem_ApproveRejectedAssignmentRequestsequenceTxsdRequestRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApproveRejectedAssignmentRequestsequenceTxsdRequestRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ApproveRejectedAssignmentRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AboutsequenceHelpRequestschema_About_XsdtString_ struct {
	Abouts []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 About"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AboutsequenceHelpRequestschema_About_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AboutsequenceHelpRequestschema_About_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AboutsequenceHelpRequestschema_About_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AboutsequenceHelpRequestschema_About_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AboutsequenceHelpRequestschema_About_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHelpRequestSequenceHelpType xsdt.String

//	Since TxsdHelpRequestSequenceHelpType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdHelpRequestSequenceHelpType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdHelpRequestSequenceHelpType is just a simple String type, this merely returns the current string value.
func (me TxsdHelpRequestSequenceHelpType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdHelpRequestSequenceHelpType's alias type xsdt.String.
func (me TxsdHelpRequestSequenceHelpType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdHelpRequestSequenceHelpType is "Operation".
func (me TxsdHelpRequestSequenceHelpType) IsOperation() bool { return me.String() == "Operation" }

//	Returns true if the value of this enumerated TxsdHelpRequestSequenceHelpType is "ResponseGroup".
func (me TxsdHelpRequestSequenceHelpType) IsResponseGroup() bool {
	return me.String() == "ResponseGroup"
}

type XsdGoPkgHasElem_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_ struct {
	HelpType TxsdHelpRequestSequenceHelpType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HelpType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_ instance.
func (me *XsdGoPkgHasElem_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type THelpRequest struct {
	XsdGoPkgHasElems_AboutsequenceHelpRequestschema_About_XsdtString_

	XsdGoPkgHasElem_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.THelpRequest function is not nil (ie. was set by outside code), calls it with this THelpRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this THelpRequest instance.
func (me *THelpRequest) Walk() (err error) {
	if fn := WalkHandlers.THelpRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AboutsequenceHelpRequestschema_About_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_ struct {
	HelpRequest *THelpRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HelpRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_ instance.
func (me *XsdGoPkgHasElem_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HelpRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRegisterHITTypeRequest struct {
	XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_

	XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_

	XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_

	XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_

	XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_

	XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_
}

//	If the WalkHandlers.TRegisterHITTypeRequest function is not nil (ie. was set by outside code), calls it with this TRegisterHITTypeRequest instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TRegisterHITTypeRequest instance.
func (me *TRegisterHITTypeRequest) Walk() (err error) {
	if fn := WalkHandlers.TRegisterHITTypeRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_ struct {
	RegisterHITTypeRequest *TRegisterHITTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RegisterHITTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_ instance.
func (me *XsdGoPkgHasElem_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RegisterHITTypeRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetAssignmentRequest struct {
	XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TGetAssignmentRequest function is not nil (ie. was set by outside code), calls it with this TGetAssignmentRequest instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TGetAssignmentRequest instance.
func (me *TGetAssignmentRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetAssignmentRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_ struct {
	GetAssignmentRequest *TGetAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_ instance.
func (me *XsdGoPkgHasElem_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAssignmentRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TChangeHITTypeOfHITRequest struct {
	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TChangeHITTypeOfHITRequest function is not nil (ie. was set by outside code), calls it with this TChangeHITTypeOfHITRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TChangeHITTypeOfHITRequest instance.
func (me *TChangeHITTypeOfHITRequest) Walk() (err error) {
	if fn := WalkHandlers.TChangeHITTypeOfHITRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ChangeHITTypeOfHITRequestsequenceTxsdRequestRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_ struct {
	ChangeHITTypeOfHITRequest *TChangeHITTypeOfHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ChangeHITTypeOfHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ChangeHITTypeOfHITRequestsequenceTxsdRequestRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ChangeHITTypeOfHITRequestsequenceTxsdRequestRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ChangeHITTypeOfHITRequestsequenceTxsdRequestRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_ instance.
func (me *XsdGoPkgHasElem_ChangeHITTypeOfHITRequestsequenceTxsdRequestRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ChangeHITTypeOfHITRequestsequenceTxsdRequestRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ChangeHITTypeOfHITRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_ struct {
	TestDurationInSeconds xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 TestDurationInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_ struct {
	AutoGranted xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AutoGranted"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_ struct {
	AutoGrantedValue xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AutoGrantedValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_ struct {
	RetryDelayInSeconds xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RetryDelayInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_ struct {
	Test xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Test"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_ instance.
func (me *XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_ struct {
	AnswerKey xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AnswerKey"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TQualificationTypeStatus xsdt.String

//	This convenience method just performs a simple type conversion to TQualificationTypeStatus's alias type xsdt.String.
func (me TQualificationTypeStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TQualificationTypeStatus is "Active".
func (me TQualificationTypeStatus) IsActive() bool { return me.String() == "Active" }

//	Returns true if the value of this enumerated TQualificationTypeStatus is "Inactive".
func (me TQualificationTypeStatus) IsInactive() bool { return me.String() == "Inactive" }

//	Since TQualificationTypeStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TQualificationTypeStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TQualificationTypeStatus is just a simple String type, this merely returns the current string value.
func (me TQualificationTypeStatus) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_ struct {
	QualificationTypeStatus TQualificationTypeStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationTypeStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_ instance.
func (me *XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCreateQualificationTypeRequest struct {
	XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_

	XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_

	XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_

	XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_

	XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_

	XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_

	XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_

	XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_

	XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_
}

//	If the WalkHandlers.TCreateQualificationTypeRequest function is not nil (ie. was set by outside code), calls it with this TCreateQualificationTypeRequest instance as the single argument. Then calls the Walk() method on 11/11 embed(s) and 0/0 field(s) belonging to this TCreateQualificationTypeRequest instance.
func (me *TCreateQualificationTypeRequest) Walk() (err error) {
	if fn := WalkHandlers.TCreateQualificationTypeRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CreateQualificationTypeRequestsequenceTxsdRequestRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_ struct {
	CreateQualificationTypeRequest *TCreateQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CreateQualificationTypeRequestsequenceTxsdRequestRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CreateQualificationTypeRequestsequenceTxsdRequestRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CreateQualificationTypeRequestsequenceTxsdRequestRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_CreateQualificationTypeRequestsequenceTxsdRequestRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CreateQualificationTypeRequestsequenceTxsdRequestRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CreateQualificationTypeRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDisposeQualificationTypeRequest struct {
	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_
}

//	If the WalkHandlers.TDisposeQualificationTypeRequest function is not nil (ie. was set by outside code), calls it with this TDisposeQualificationTypeRequest instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TDisposeQualificationTypeRequest instance.
func (me *TDisposeQualificationTypeRequest) Walk() (err error) {
	if fn := WalkHandlers.TDisposeQualificationTypeRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_ struct {
	DisposeQualificationTypeRequest *TDisposeQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisposeQualificationTypeRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRejectAssignmentRequest struct {
	XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_
}

//	If the WalkHandlers.TRejectAssignmentRequest function is not nil (ie. was set by outside code), calls it with this TRejectAssignmentRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TRejectAssignmentRequest instance.
func (me *TRejectAssignmentRequest) Walk() (err error) {
	if fn := WalkHandlers.TRejectAssignmentRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_ struct {
	RejectAssignmentRequest *TRejectAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectAssignmentRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_ instance.
func (me *XsdGoPkgHasElem_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RejectAssignmentRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_ struct {
	Unused xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Unused"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_ instance.
func (me *XsdGoPkgHasElem_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetAccountBalanceRequest struct {
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_
}

//	If the WalkHandlers.TGetAccountBalanceRequest function is not nil (ie. was set by outside code), calls it with this TGetAccountBalanceRequest instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TGetAccountBalanceRequest instance.
func (me *TGetAccountBalanceRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetAccountBalanceRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAccountBalanceRequestsequenceTxsdRequestRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_ struct {
	GetAccountBalanceRequest *TGetAccountBalanceRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAccountBalanceRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAccountBalanceRequestsequenceTxsdRequestRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAccountBalanceRequestsequenceTxsdRequestRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAccountBalanceRequestsequenceTxsdRequestRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_ instance.
func (me *XsdGoPkgHasElem_GetAccountBalanceRequestsequenceTxsdRequestRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAccountBalanceRequestsequenceTxsdRequestRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAccountBalanceRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDisableHITRequest struct {
	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TDisableHITRequest function is not nil (ie. was set by outside code), calls it with this TDisableHITRequest instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TDisableHITRequest instance.
func (me *TDisableHITRequest) Walk() (err error) {
	if fn := WalkHandlers.TDisableHITRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisableHITRequestsequenceTxsdRequestRequestschema_DisableHITRequest_TDisableHITRequest_ struct {
	DisableHITRequest *TDisableHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisableHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisableHITRequestsequenceTxsdRequestRequestschema_DisableHITRequest_TDisableHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisableHITRequestsequenceTxsdRequestRequestschema_DisableHITRequest_TDisableHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisableHITRequestsequenceTxsdRequestRequestschema_DisableHITRequest_TDisableHITRequest_ instance.
func (me *XsdGoPkgHasElem_DisableHITRequestsequenceTxsdRequestRequestschema_DisableHITRequest_TDisableHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisableHITRequestsequenceTxsdRequestRequestschema_DisableHITRequest_TDisableHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisableHITRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TQualificationStatus xsdt.String

//	Returns true if the value of this enumerated TQualificationStatus is "Granted".
func (me TQualificationStatus) IsGranted() bool { return me.String() == "Granted" }

//	Returns true if the value of this enumerated TQualificationStatus is "Revoked".
func (me TQualificationStatus) IsRevoked() bool { return me.String() == "Revoked" }

//	Since TQualificationStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TQualificationStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TQualificationStatus is just a simple String type, this merely returns the current string value.
func (me TQualificationStatus) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TQualificationStatus's alias type xsdt.String.
func (me TQualificationStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_ struct {
	Status TQualificationStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Status"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_ instance.
func (me *XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetQualificationsForQualificationTypeRequest struct {
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_
}

//	If the WalkHandlers.TGetQualificationsForQualificationTypeRequest function is not nil (ie. was set by outside code), calls it with this TGetQualificationsForQualificationTypeRequest instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TGetQualificationsForQualificationTypeRequest instance.
func (me *TGetQualificationsForQualificationTypeRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetQualificationsForQualificationTypeRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_ struct {
	GetQualificationsForQualificationTypeRequest *TGetQualificationsForQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationsForQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationsForQualificationTypeRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_ struct {
	Revert xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Revert"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSetHITAsReviewingRequest struct {
	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElem_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TSetHITAsReviewingRequest function is not nil (ie. was set by outside code), calls it with this TSetHITAsReviewingRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TSetHITAsReviewingRequest instance.
func (me *TSetHITAsReviewingRequest) Walk() (err error) {
	if fn := WalkHandlers.TSetHITAsReviewingRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_ struct {
	SetHITAsReviewingRequest *TSetHITAsReviewingRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITAsReviewingRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_ instance.
func (me *XsdGoPkgHasElem_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SetHITAsReviewingRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_ struct {
	ExpirationIncrementInSeconds xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ExpirationIncrementInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElem_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_ struct {
	MaxAssignmentsIncrement xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MaxAssignmentsIncrement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TExtendHITRequest struct {
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElem_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_

	XsdGoPkgHasElem_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_

	XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_
}

//	If the WalkHandlers.TExtendHITRequest function is not nil (ie. was set by outside code), calls it with this TExtendHITRequest instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TExtendHITRequest instance.
func (me *TExtendHITRequest) Walk() (err error) {
	if fn := WalkHandlers.TExtendHITRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_ struct {
	ExtendHITRequest *TExtendHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ExtendHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_ instance.
func (me *XsdGoPkgHasElem_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ExtendHITRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TUpdateQualificationTypeRequest struct {
	XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_

	XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_

	XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_

	XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_

	XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_

	XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_

	XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_
}

//	If the WalkHandlers.TUpdateQualificationTypeRequest function is not nil (ie. was set by outside code), calls it with this TUpdateQualificationTypeRequest instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TUpdateQualificationTypeRequest instance.
func (me *TUpdateQualificationTypeRequest) Walk() (err error) {
	if fn := WalkHandlers.TUpdateQualificationTypeRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UpdateQualificationTypeRequestsequenceTxsdRequestRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_ struct {
	UpdateQualificationTypeRequest *TUpdateQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UpdateQualificationTypeRequestsequenceTxsdRequestRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UpdateQualificationTypeRequestsequenceTxsdRequestRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UpdateQualificationTypeRequestsequenceTxsdRequestRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_UpdateQualificationTypeRequestsequenceTxsdRequestRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UpdateQualificationTypeRequestsequenceTxsdRequestRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UpdateQualificationTypeRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRequest struct {
	XsdGoPkgHasElem_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_

	XsdGoPkgHasElem_GetAccountBalanceRequestsequenceTxsdRequestRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_

	XsdGoPkgHasElem_DisableHITRequestsequenceTxsdRequestRequestschema_DisableHITRequest_TDisableHITRequest_

	XsdGoPkgHasElem_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_

	XsdGoPkgHasElem_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_

	XsdGoPkgHasElem_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_

	XsdGoPkgHasElem_UpdateQualificationTypeRequestsequenceTxsdRequestRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_

	XsdGoPkgHasElem_GetReviewableHITsRequestsequenceTxsdRequestRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_

	XsdGoPkgHasElem_GetHITsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_

	XsdGoPkgHasElem_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_

	XsdGoPkgHasElem_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_

	XsdGoPkgHasElem_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_

	XsdGoPkgHasElem_GetQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_

	XsdGoPkgHasElem_Errors

	XsdGoPkgHasElem_SearchQualificationTypesRequestsequenceTxsdRequestRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_

	XsdGoPkgHasElem_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_

	XsdGoPkgHasElem_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_

	XsdGoPkgHasElem_ApproveAssignmentRequestsequenceTxsdRequestRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_

	XsdGoPkgHasElem_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_

	XsdGoPkgHasElem_GetFileUploadURLRequestsequenceTxsdRequestRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_

	XsdGoPkgHasElem_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_

	XsdGoPkgHasElem_CreateHITRequestsequenceTxsdRequestRequestschema_CreateHITRequest_TCreateHITRequest_

	XsdGoPkgHasElem_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_

	XsdGoPkgHasElem_GetReviewResultsForHITRequestsequenceTxsdRequestRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_

	XsdGoPkgHasElem_AssignQualificationRequestsequenceTxsdRequestRequestschema_AssignQualificationRequest_TAssignQualificationRequest_

	XsdGoPkgHasElem_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_

	XsdGoPkgHasElem_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_

	XsdGoPkgHasElem_BlockWorkerRequestsequenceTxsdRequestRequestschema_BlockWorkerRequest_TBlockWorkerRequest_

	XsdGoPkgHasElem_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_

	XsdGoPkgHasElem_SearchHITsRequestsequenceTxsdRequestRequestschema_SearchHITsRequest_TSearchHITsRequest_

	XsdGoPkgHasElem_ForceExpireHITRequestsequenceTxsdRequestRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_

	XsdGoPkgHasElem_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_

	XsdGoPkgHasElem_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_

	XsdGoPkgHasElem_UnblockWorkerRequestsequenceTxsdRequestRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_

	XsdGoPkgHasElem_GrantQualificationRequestsequenceTxsdRequestRequestschema_GrantQualificationRequest_TGrantQualificationRequest_

	XsdGoPkgHasElem_ApproveRejectedAssignmentRequestsequenceTxsdRequestRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_

	XsdGoPkgHasElem_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_

	XsdGoPkgHasElem_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_

	XsdGoPkgHasElem_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_

	XsdGoPkgHasElem_ChangeHITTypeOfHITRequestsequenceTxsdRequestRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_

	XsdGoPkgHasElem_CreateQualificationTypeRequestsequenceTxsdRequestRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_

	XsdGoPkgHasElem_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_
}

//	If the WalkHandlers.TxsdRequest function is not nil (ie. was set by outside code), calls it with this TxsdRequest instance as the single argument. Then calls the Walk() method on 42/42 embed(s) and 0/0 field(s) belonging to this TxsdRequest instance.
func (me *TxsdRequest) Walk() (err error) {
	if fn := WalkHandlers.TxsdRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Errors.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SearchQualificationTypesRequestsequenceTxsdRequestRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetFileUploadURLRequestsequenceTxsdRequestRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CreateHITRequestsequenceTxsdRequestRequestschema_CreateHITRequest_TCreateHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetReviewResultsForHITRequestsequenceTxsdRequestRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignQualificationRequestsequenceTxsdRequestRequestschema_AssignQualificationRequest_TAssignQualificationRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ApproveAssignmentRequestsequenceTxsdRequestRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BlockWorkerRequestsequenceTxsdRequestRequestschema_BlockWorkerRequest_TBlockWorkerRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SearchHITsRequestsequenceTxsdRequestRequestschema_SearchHITsRequest_TSearchHITsRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ForceExpireHITRequestsequenceTxsdRequestRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UnblockWorkerRequestsequenceTxsdRequestRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GrantQualificationRequestsequenceTxsdRequestRequestschema_GrantQualificationRequest_TGrantQualificationRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ApproveRejectedAssignmentRequestsequenceTxsdRequestRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ChangeHITTypeOfHITRequestsequenceTxsdRequestRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CreateQualificationTypeRequestsequenceTxsdRequestRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DisableHITRequestsequenceTxsdRequestRequestschema_DisableHITRequest_TDisableHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UpdateQualificationTypeRequestsequenceTxsdRequestRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetAccountBalanceRequestsequenceTxsdRequestRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetReviewableHITsRequestsequenceTxsdRequestRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetHITsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Request struct {
	Request *TxsdRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Request function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Request instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Request instance.
func (me *XsdGoPkgHasElem_Request) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Request; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_ struct {
	NumberOfAssignmentsPending xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NumberOfAssignmentsPending"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type THITStatus xsdt.String

//	Returns true if the value of this enumerated THITStatus is "Unassignable".
func (me THITStatus) IsUnassignable() bool { return me.String() == "Unassignable" }

//	Returns true if the value of this enumerated THITStatus is "Reviewable".
func (me THITStatus) IsReviewable() bool { return me.String() == "Reviewable" }

//	Returns true if the value of this enumerated THITStatus is "Reviewing".
func (me THITStatus) IsReviewing() bool { return me.String() == "Reviewing" }

//	Returns true if the value of this enumerated THITStatus is "Disposed".
func (me THITStatus) IsDisposed() bool { return me.String() == "Disposed" }

//	Since THITStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *THITStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since THITStatus is just a simple String type, this merely returns the current string value.
func (me THITStatus) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to THITStatus's alias type xsdt.String.
func (me THITStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated THITStatus is "Assignable".
func (me THITStatus) IsAssignable() bool { return me.String() == "Assignable" }

type XsdGoPkgHasElem_HITStatussequenceHITschema_HITStatus_THITStatus_ struct {
	HITStatus THITStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HITStatussequenceHITschema_HITStatus_THITStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HITStatussequenceHITschema_HITStatus_THITStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HITStatussequenceHITschema_HITStatus_THITStatus_ instance.
func (me *XsdGoPkgHasElem_HITStatussequenceHITschema_HITStatus_THITStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HITStatussequenceHITschema_HITStatus_THITStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_ struct {
	NumberOfAssignmentsCompleted xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NumberOfAssignmentsCompleted"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_ struct {
	HITGroupId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITGroupId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Thit struct {
	XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_

	XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_

	XsdGoPkgHasElem_ExpirationsequenceHITschema_Expiration_XsdtDateTime_

	XsdGoPkgHasElem_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_

	XsdGoPkgHasElem_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_

	XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_

	XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_

	XsdGoPkgHasElem_HITStatussequenceHITschema_HITStatus_THITStatus_

	XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_

	XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_

	XsdGoPkgHasElem_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_

	XsdGoPkgHasElem_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_

	XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_

	XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_

	XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_

	XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_

	XsdGoPkgHasElem_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_

	XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_

	XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_
}

//	If the WalkHandlers.Thit function is not nil (ie. was set by outside code), calls it with this Thit instance as the single argument. Then calls the Walk() method on 22/22 embed(s) and 0/0 field(s) belonging to this Thit instance.
func (me *Thit) Walk() (err error) {
	if fn := WalkHandlers.Thit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExpirationsequenceHITschema_Expiration_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITStatussequenceHITschema_HITStatus_THITStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_ struct {
	Hits []*Thit `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_ instance.
func (me *XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Hits {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Name,attr"`
}

type XsdGoPkgHasAttr_Value_XsdtString_ struct {
	Value xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Value,attr"`
}

type TxsdHTTPHeadersSequenceHeader struct {
	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_Value_XsdtString_
}

//	If the WalkHandlers.TxsdHTTPHeadersSequenceHeader function is not nil (ie. was set by outside code), calls it with this TxsdHTTPHeadersSequenceHeader instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdHTTPHeadersSequenceHeader instance.
func (me *TxsdHTTPHeadersSequenceHeader) Walk() (err error) {
	if fn := WalkHandlers.TxsdHTTPHeadersSequenceHeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HeadersequenceTxsdHTTPHeadersHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_ struct {
	Headers []*TxsdHTTPHeadersSequenceHeader `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Header"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HeadersequenceTxsdHTTPHeadersHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HeadersequenceTxsdHTTPHeadersHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HeadersequenceTxsdHTTPHeadersHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_ instance.
func (me *XsdGoPkgHasElems_HeadersequenceTxsdHTTPHeadersHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HeadersequenceTxsdHTTPHeadersHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Headers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHTTPHeaders struct {
	XsdGoPkgHasElems_HeadersequenceTxsdHTTPHeadersHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_
}

//	If the WalkHandlers.TxsdHTTPHeaders function is not nil (ie. was set by outside code), calls it with this TxsdHTTPHeaders instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdHTTPHeaders instance.
func (me *TxsdHTTPHeaders) Walk() (err error) {
	if fn := WalkHandlers.TxsdHTTPHeaders; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_HeadersequenceTxsdHTTPHeadersHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HTTPHeaders struct {
	HTTPHeaders *TxsdHTTPHeaders `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HTTPHeaders"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HTTPHeaders function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HTTPHeaders instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HTTPHeaders instance.
func (me *XsdGoPkgHasElem_HTTPHeaders) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HTTPHeaders; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HTTPHeaders.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestIdsequenceTxsdOperationRequestOperationRequestschema_RequestId_XsdtString_ struct {
	RequestId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RequestId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestIdsequenceTxsdOperationRequestOperationRequestschema_RequestId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestIdsequenceTxsdOperationRequestOperationRequestschema_RequestId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RequestIdsequenceTxsdOperationRequestOperationRequestschema_RequestId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_RequestIdsequenceTxsdOperationRequestOperationRequestschema_RequestId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestIdsequenceTxsdOperationRequestOperationRequestschema_RequestId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_ struct {
	Arguments []*TxsdHTTPHeadersSequenceHeader `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Argument"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_ instance.
func (me *XsdGoPkgHasElems_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Arguments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdArguments struct {
	XsdGoPkgHasElems_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_
}

//	If the WalkHandlers.TxsdArguments function is not nil (ie. was set by outside code), calls it with this TxsdArguments instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdArguments instance.
func (me *TxsdArguments) Walk() (err error) {
	if fn := WalkHandlers.TxsdArguments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Arguments struct {
	Arguments *TxsdArguments `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Arguments"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Arguments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arguments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arguments instance.
func (me *XsdGoPkgHasElem_Arguments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Arguments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Arguments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOperationRequest struct {
	XsdGoPkgHasElem_RequestIdsequenceTxsdOperationRequestOperationRequestschema_RequestId_XsdtString_

	XsdGoPkgHasElem_Arguments

	XsdGoPkgHasElem_Errors

	XsdGoPkgHasElem_HTTPHeaders
}

//	If the WalkHandlers.TxsdOperationRequest function is not nil (ie. was set by outside code), calls it with this TxsdOperationRequest instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdOperationRequest instance.
func (me *TxsdOperationRequest) Walk() (err error) {
	if fn := WalkHandlers.TxsdOperationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Errors.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HTTPHeaders.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RequestIdsequenceTxsdOperationRequestOperationRequestschema_RequestId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Arguments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OperationRequest struct {
	OperationRequest *TxsdOperationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 OperationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OperationRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OperationRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OperationRequest instance.
func (me *XsdGoPkgHasElem_OperationRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OperationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCreateHITResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_
}

//	If the WalkHandlers.TxsdCreateHITResponse function is not nil (ie. was set by outside code), calls it with this TxsdCreateHITResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdCreateHITResponse instance.
func (me *TxsdCreateHITResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdCreateHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CreateHITResponse struct {
	CreateHITResponse *TxsdCreateHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CreateHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CreateHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CreateHITResponse instance.
func (me *XsdGoPkgHasElem_CreateHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CreateHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CreateHITResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CreateHITResponse struct {
	CreateHITResponses []*TxsdCreateHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CreateHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CreateHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CreateHITResponse instance.
func (me *XsdGoPkgHasElems_CreateHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CreateHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CreateHITResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdRegisterHITTypeRegisterHITTypeschema_Request_TRegisterHITTypeRequest_ struct {
	Requests []*TRegisterHITTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdRegisterHITTypeRegisterHITTypeschema_Request_TRegisterHITTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdRegisterHITTypeRegisterHITTypeschema_Request_TRegisterHITTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdRegisterHITTypeRegisterHITTypeschema_Request_TRegisterHITTypeRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdRegisterHITTypeRegisterHITTypeschema_Request_TRegisterHITTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdRegisterHITTypeRegisterHITTypeschema_Request_TRegisterHITTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRegisterHITType struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdRegisterHITTypeRegisterHITTypeschema_Request_TRegisterHITTypeRequest_
}

//	If the WalkHandlers.TxsdRegisterHITType function is not nil (ie. was set by outside code), calls it with this TxsdRegisterHITType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdRegisterHITType instance.
func (me *TxsdRegisterHITType) Walk() (err error) {
	if fn := WalkHandlers.TxsdRegisterHITType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdRegisterHITTypeRegisterHITTypeschema_Request_TRegisterHITTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RegisterHITType struct {
	RegisterHITType *TxsdRegisterHITType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RegisterHITType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RegisterHITType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RegisterHITType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RegisterHITType instance.
func (me *XsdGoPkgHasElem_RegisterHITType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RegisterHITType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RegisterHITType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RegisterHITType struct {
	RegisterHITTypes []*TxsdRegisterHITType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RegisterHITType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RegisterHITType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RegisterHITType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RegisterHITType instance.
func (me *XsdGoPkgHasElems_RegisterHITType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RegisterHITType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RegisterHITTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRegisterHITTypeResult struct {
	XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_

	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TRegisterHITTypeResult function is not nil (ie. was set by outside code), calls it with this TRegisterHITTypeResult instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TRegisterHITTypeResult instance.
func (me *TRegisterHITTypeResult) Walk() (err error) {
	if fn := WalkHandlers.TRegisterHITTypeResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_ struct {
	RegisterHITTypeResults []*TRegisterHITTypeResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RegisterHITTypeResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_ instance.
func (me *XsdGoPkgHasElems_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RegisterHITTypeResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRegisterHITTypeResponse struct {
	XsdGoPkgHasElems_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_

	XsdGoPkgHasElem_OperationRequest
}

//	If the WalkHandlers.TxsdRegisterHITTypeResponse function is not nil (ie. was set by outside code), calls it with this TxsdRegisterHITTypeResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRegisterHITTypeResponse instance.
func (me *TxsdRegisterHITTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdRegisterHITTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RegisterHITTypeResponse struct {
	RegisterHITTypeResponse *TxsdRegisterHITTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RegisterHITTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RegisterHITTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RegisterHITTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RegisterHITTypeResponse instance.
func (me *XsdGoPkgHasElem_RegisterHITTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RegisterHITTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RegisterHITTypeResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RegisterHITTypeResponse struct {
	RegisterHITTypeResponses []*TxsdRegisterHITTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RegisterHITTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RegisterHITTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RegisterHITTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RegisterHITTypeResponse instance.
func (me *XsdGoPkgHasElems_RegisterHITTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RegisterHITTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RegisterHITTypeResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_ struct {
	Active xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Active"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_ struct {
	Destination xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Destination"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_ instance.
func (me *XsdGoPkgHasElem_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNotificationTransport xsdt.String

//	Returns true if the value of this enumerated TNotificationTransport is "Email".
func (me TNotificationTransport) IsEmail() bool { return me.String() == "Email" }

//	Returns true if the value of this enumerated TNotificationTransport is "SQS".
func (me TNotificationTransport) IsSqs() bool { return me.String() == "SQS" }

//	Since TNotificationTransport is just a simple String type, this merely sets the current value from the specified string.
func (me *TNotificationTransport) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TNotificationTransport is just a simple String type, this merely returns the current string value.
func (me TNotificationTransport) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TNotificationTransport's alias type xsdt.String.
func (me TNotificationTransport) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TNotificationTransport is "SOAP".
func (me TNotificationTransport) IsSoap() bool { return me.String() == "SOAP" }

//	Returns true if the value of this enumerated TNotificationTransport is "REST".
func (me TNotificationTransport) IsRest() bool { return me.String() == "REST" }

type XsdGoPkgHasElem_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_ struct {
	Transport TNotificationTransport `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Transport"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_ instance.
func (me *XsdGoPkgHasElem_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_VersionsequenceNotificationSpecificationschema_Version_XsdtString_ struct {
	Version xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Version"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VersionsequenceNotificationSpecificationschema_Version_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VersionsequenceNotificationSpecificationschema_Version_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_VersionsequenceNotificationSpecificationschema_Version_XsdtString_ instance.
func (me *XsdGoPkgHasElem_VersionsequenceNotificationSpecificationschema_Version_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VersionsequenceNotificationSpecificationschema_Version_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEventType xsdt.String

//	Since TEventType is just a simple String type, this merely sets the current value from the specified string.
func (me *TEventType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TEventType is "AssignmentReturned".
func (me TEventType) IsAssignmentReturned() bool { return me.String() == "AssignmentReturned" }

//	Returns true if the value of this enumerated TEventType is "HITCreated".
func (me TEventType) IsHITCreated() bool { return me.String() == "HITCreated" }

//	Returns true if the value of this enumerated TEventType is "HITReviewable".
func (me TEventType) IsHITReviewable() bool { return me.String() == "HITReviewable" }

//	Returns true if the value of this enumerated TEventType is "Ping".
func (me TEventType) IsPing() bool { return me.String() == "Ping" }

//	This convenience method just performs a simple type conversion to TEventType's alias type xsdt.String.
func (me TEventType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TEventType is "AssignmentAccepted".
func (me TEventType) IsAssignmentAccepted() bool { return me.String() == "AssignmentAccepted" }

//	Returns true if the value of this enumerated TEventType is "AssignmentSubmitted".
func (me TEventType) IsAssignmentSubmitted() bool { return me.String() == "AssignmentSubmitted" }

//	Returns true if the value of this enumerated TEventType is "AssignmentAbandoned".
func (me TEventType) IsAssignmentAbandoned() bool { return me.String() == "AssignmentAbandoned" }

//	Returns true if the value of this enumerated TEventType is "HITExpired".
func (me TEventType) IsHITExpired() bool { return me.String() == "HITExpired" }

//	Returns true if the value of this enumerated TEventType is "HITExtended".
func (me TEventType) IsHITExtended() bool { return me.String() == "HITExtended" }

//	Returns true if the value of this enumerated TEventType is "HITDisposed".
func (me TEventType) IsHITDisposed() bool { return me.String() == "HITDisposed" }

//	Since TEventType is just a simple String type, this merely returns the current string value.
func (me TEventType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TEventType is "AssignmentRejected".
func (me TEventType) IsAssignmentRejected() bool { return me.String() == "AssignmentRejected" }

//	Returns true if the value of this enumerated TEventType is "AssignmentApproved".
func (me TEventType) IsAssignmentApproved() bool { return me.String() == "AssignmentApproved" }

type XsdGoPkgHasElems_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_ struct {
	EventTypes []TEventType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 EventType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_ instance.
func (me *XsdGoPkgHasElems_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNotificationSpecification struct {
	XsdGoPkgHasElems_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_

	XsdGoPkgHasElem_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_

	XsdGoPkgHasElem_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_

	XsdGoPkgHasElem_VersionsequenceNotificationSpecificationschema_Version_XsdtString_
}

//	If the WalkHandlers.TNotificationSpecification function is not nil (ie. was set by outside code), calls it with this TNotificationSpecification instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TNotificationSpecification instance.
func (me *TNotificationSpecification) Walk() (err error) {
	if fn := WalkHandlers.TNotificationSpecification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VersionsequenceNotificationSpecificationschema_Version_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_ struct {
	Notification *TNotificationSpecification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Notification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_ instance.
func (me *XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Notification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSetHITTypeNotificationRequest struct {
	XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_

	XsdGoPkgHasElem_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_

	XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_
}

//	If the WalkHandlers.TSetHITTypeNotificationRequest function is not nil (ie. was set by outside code), calls it with this TSetHITTypeNotificationRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TSetHITTypeNotificationRequest instance.
func (me *TSetHITTypeNotificationRequest) Walk() (err error) {
	if fn := WalkHandlers.TSetHITTypeNotificationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdSetHITTypeNotificationSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_ struct {
	Requests []*TSetHITTypeNotificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdSetHITTypeNotificationSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdSetHITTypeNotificationSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdSetHITTypeNotificationSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdSetHITTypeNotificationSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdSetHITTypeNotificationSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSetHITTypeNotification struct {
	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdSetHITTypeNotificationSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_
}

//	If the WalkHandlers.TxsdSetHITTypeNotification function is not nil (ie. was set by outside code), calls it with this TxsdSetHITTypeNotification instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdSetHITTypeNotification instance.
func (me *TxsdSetHITTypeNotification) Walk() (err error) {
	if fn := WalkHandlers.TxsdSetHITTypeNotification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdSetHITTypeNotificationSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SetHITTypeNotification struct {
	SetHITTypeNotification *TxsdSetHITTypeNotification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITTypeNotification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SetHITTypeNotification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SetHITTypeNotification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SetHITTypeNotification instance.
func (me *XsdGoPkgHasElem_SetHITTypeNotification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SetHITTypeNotification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SetHITTypeNotification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SetHITTypeNotification struct {
	SetHITTypeNotifications []*TxsdSetHITTypeNotification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITTypeNotification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SetHITTypeNotification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SetHITTypeNotification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SetHITTypeNotification instance.
func (me *XsdGoPkgHasElems_SetHITTypeNotification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SetHITTypeNotification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SetHITTypeNotifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSetHITTypeNotificationResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TSetHITTypeNotificationResult function is not nil (ie. was set by outside code), calls it with this TSetHITTypeNotificationResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSetHITTypeNotificationResult instance.
func (me *TSetHITTypeNotificationResult) Walk() (err error) {
	if fn := WalkHandlers.TSetHITTypeNotificationResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_ struct {
	SetHITTypeNotificationResults []*TSetHITTypeNotificationResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITTypeNotificationResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_ instance.
func (me *XsdGoPkgHasElems_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SetHITTypeNotificationResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSetHITTypeNotificationResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_
}

//	If the WalkHandlers.TxsdSetHITTypeNotificationResponse function is not nil (ie. was set by outside code), calls it with this TxsdSetHITTypeNotificationResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSetHITTypeNotificationResponse instance.
func (me *TxsdSetHITTypeNotificationResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdSetHITTypeNotificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SetHITTypeNotificationResponse struct {
	SetHITTypeNotificationResponse *TxsdSetHITTypeNotificationResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITTypeNotificationResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SetHITTypeNotificationResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SetHITTypeNotificationResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SetHITTypeNotificationResponse instance.
func (me *XsdGoPkgHasElem_SetHITTypeNotificationResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SetHITTypeNotificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SetHITTypeNotificationResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SetHITTypeNotificationResponse struct {
	SetHITTypeNotificationResponses []*TxsdSetHITTypeNotificationResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITTypeNotificationResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SetHITTypeNotificationResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SetHITTypeNotificationResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SetHITTypeNotificationResponse instance.
func (me *XsdGoPkgHasElems_SetHITTypeNotificationResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SetHITTypeNotificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SetHITTypeNotificationResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_ struct {
	TestEventType TEventType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 TestEventType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_ instance.
func (me *XsdGoPkgHasElem_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSendTestEventNotificationRequest struct {
	XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_

	XsdGoPkgHasElem_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_
}

//	If the WalkHandlers.TSendTestEventNotificationRequest function is not nil (ie. was set by outside code), calls it with this TSendTestEventNotificationRequest instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TSendTestEventNotificationRequest instance.
func (me *TSendTestEventNotificationRequest) Walk() (err error) {
	if fn := WalkHandlers.TSendTestEventNotificationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_ struct {
	Requests []*TSendTestEventNotificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSendTestEventNotification struct {
	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_
}

//	If the WalkHandlers.TxsdSendTestEventNotification function is not nil (ie. was set by outside code), calls it with this TxsdSendTestEventNotification instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdSendTestEventNotification instance.
func (me *TxsdSendTestEventNotification) Walk() (err error) {
	if fn := WalkHandlers.TxsdSendTestEventNotification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SendTestEventNotification struct {
	SendTestEventNotification *TxsdSendTestEventNotification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SendTestEventNotification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SendTestEventNotification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SendTestEventNotification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SendTestEventNotification instance.
func (me *XsdGoPkgHasElem_SendTestEventNotification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SendTestEventNotification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SendTestEventNotification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SendTestEventNotification struct {
	SendTestEventNotifications []*TxsdSendTestEventNotification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SendTestEventNotification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SendTestEventNotification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SendTestEventNotification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SendTestEventNotification instance.
func (me *XsdGoPkgHasElems_SendTestEventNotification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SendTestEventNotification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SendTestEventNotifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSendTestEventNotificationResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TSendTestEventNotificationResult function is not nil (ie. was set by outside code), calls it with this TSendTestEventNotificationResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSendTestEventNotificationResult instance.
func (me *TSendTestEventNotificationResult) Walk() (err error) {
	if fn := WalkHandlers.TSendTestEventNotificationResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SendTestEventNotificationResultsequenceTxsdSendTestEventNotificationResponseSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_ struct {
	SendTestEventNotificationResults []*TSendTestEventNotificationResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SendTestEventNotificationResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SendTestEventNotificationResultsequenceTxsdSendTestEventNotificationResponseSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SendTestEventNotificationResultsequenceTxsdSendTestEventNotificationResponseSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SendTestEventNotificationResultsequenceTxsdSendTestEventNotificationResponseSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_ instance.
func (me *XsdGoPkgHasElems_SendTestEventNotificationResultsequenceTxsdSendTestEventNotificationResponseSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SendTestEventNotificationResultsequenceTxsdSendTestEventNotificationResponseSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SendTestEventNotificationResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSendTestEventNotificationResponse struct {
	XsdGoPkgHasElems_SendTestEventNotificationResultsequenceTxsdSendTestEventNotificationResponseSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_

	XsdGoPkgHasElem_OperationRequest
}

//	If the WalkHandlers.TxsdSendTestEventNotificationResponse function is not nil (ie. was set by outside code), calls it with this TxsdSendTestEventNotificationResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSendTestEventNotificationResponse instance.
func (me *TxsdSendTestEventNotificationResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdSendTestEventNotificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SendTestEventNotificationResultsequenceTxsdSendTestEventNotificationResponseSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SendTestEventNotificationResponse struct {
	SendTestEventNotificationResponse *TxsdSendTestEventNotificationResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SendTestEventNotificationResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SendTestEventNotificationResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SendTestEventNotificationResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SendTestEventNotificationResponse instance.
func (me *XsdGoPkgHasElem_SendTestEventNotificationResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SendTestEventNotificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SendTestEventNotificationResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SendTestEventNotificationResponse struct {
	SendTestEventNotificationResponses []*TxsdSendTestEventNotificationResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SendTestEventNotificationResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SendTestEventNotificationResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SendTestEventNotificationResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SendTestEventNotificationResponse instance.
func (me *XsdGoPkgHasElems_SendTestEventNotificationResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SendTestEventNotificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SendTestEventNotificationResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_ struct {
	Requests []*TDisposeHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDisposeHIT struct {
	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_
}

//	If the WalkHandlers.TxsdDisposeHIT function is not nil (ie. was set by outside code), calls it with this TxsdDisposeHIT instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdDisposeHIT instance.
func (me *TxsdDisposeHIT) Walk() (err error) {
	if fn := WalkHandlers.TxsdDisposeHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisposeHIT struct {
	DisposeHIT *TxsdDisposeHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisposeHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisposeHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisposeHIT instance.
func (me *XsdGoPkgHasElem_DisposeHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisposeHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisposeHIT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisposeHIT struct {
	DisposeHITs []*TxsdDisposeHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisposeHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisposeHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisposeHIT instance.
func (me *XsdGoPkgHasElems_DisposeHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisposeHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisposeHITs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDisposeHITResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TDisposeHITResult function is not nil (ie. was set by outside code), calls it with this TDisposeHITResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TDisposeHITResult instance.
func (me *TDisposeHITResult) Walk() (err error) {
	if fn := WalkHandlers.TDisposeHITResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_ struct {
	DisposeHITResults []*TDisposeHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_ instance.
func (me *XsdGoPkgHasElems_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisposeHITResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDisposeHITResponse struct {
	XsdGoPkgHasElems_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_

	XsdGoPkgHasElem_OperationRequest
}

//	If the WalkHandlers.TxsdDisposeHITResponse function is not nil (ie. was set by outside code), calls it with this TxsdDisposeHITResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdDisposeHITResponse instance.
func (me *TxsdDisposeHITResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdDisposeHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisposeHITResponse struct {
	DisposeHITResponse *TxsdDisposeHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisposeHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisposeHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisposeHITResponse instance.
func (me *XsdGoPkgHasElem_DisposeHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisposeHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisposeHITResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisposeHITResponse struct {
	DisposeHITResponses []*TxsdDisposeHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisposeHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisposeHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisposeHITResponse instance.
func (me *XsdGoPkgHasElems_DisposeHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisposeHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisposeHITResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_ struct {
	Requests []*TDisableHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDisableHIT struct {
	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_
}

//	If the WalkHandlers.TxsdDisableHIT function is not nil (ie. was set by outside code), calls it with this TxsdDisableHIT instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdDisableHIT instance.
func (me *TxsdDisableHIT) Walk() (err error) {
	if fn := WalkHandlers.TxsdDisableHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisableHIT struct {
	DisableHIT *TxsdDisableHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisableHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisableHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisableHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisableHIT instance.
func (me *XsdGoPkgHasElem_DisableHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisableHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisableHIT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisableHIT struct {
	DisableHITs []*TxsdDisableHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisableHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisableHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisableHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisableHIT instance.
func (me *XsdGoPkgHasElems_DisableHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisableHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisableHITs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDisableHITResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TDisableHITResult function is not nil (ie. was set by outside code), calls it with this TDisableHITResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TDisableHITResult instance.
func (me *TDisableHITResult) Walk() (err error) {
	if fn := WalkHandlers.TDisableHITResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_ struct {
	DisableHITResults []*TDisableHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisableHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_ instance.
func (me *XsdGoPkgHasElems_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisableHITResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDisableHITResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_
}

//	If the WalkHandlers.TxsdDisableHITResponse function is not nil (ie. was set by outside code), calls it with this TxsdDisableHITResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdDisableHITResponse instance.
func (me *TxsdDisableHITResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdDisableHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisableHITResponse struct {
	DisableHITResponse *TxsdDisableHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisableHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisableHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisableHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisableHITResponse instance.
func (me *XsdGoPkgHasElem_DisableHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisableHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisableHITResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisableHITResponse struct {
	DisableHITResponses []*TxsdDisableHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisableHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisableHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisableHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisableHITResponse instance.
func (me *XsdGoPkgHasElems_DisableHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisableHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisableHITResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetHITGetHITschema_Request_TGetHITRequest_ struct {
	Requests []*TGetHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetHITGetHITschema_Request_TGetHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetHITGetHITschema_Request_TGetHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetHITGetHITschema_Request_TGetHITRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetHITGetHITschema_Request_TGetHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetHITGetHITschema_Request_TGetHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetHIT struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGetHITGetHITschema_Request_TGetHITRequest_
}

//	If the WalkHandlers.TxsdGetHIT function is not nil (ie. was set by outside code), calls it with this TxsdGetHIT instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetHIT instance.
func (me *TxsdGetHIT) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetHITGetHITschema_Request_TGetHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetHIT struct {
	GetHIT *TxsdGetHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetHIT instance.
func (me *XsdGoPkgHasElem_GetHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetHIT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetHIT struct {
	GetHITs []*TxsdGetHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetHIT instance.
func (me *XsdGoPkgHasElems_GetHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetHITs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetHITResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_
}

//	If the WalkHandlers.TxsdGetHITResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetHITResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetHITResponse instance.
func (me *TxsdGetHITResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetHITResponse struct {
	GetHITResponse *TxsdGetHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetHITResponse instance.
func (me *XsdGoPkgHasElem_GetHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetHITResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetHITResponse struct {
	GetHITResponses []*TxsdGetHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetHITResponse instance.
func (me *XsdGoPkgHasElems_GetHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetHITResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_ struct {
	Requests []*TGetAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetAssignment struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_
}

//	If the WalkHandlers.TxsdGetAssignment function is not nil (ie. was set by outside code), calls it with this TxsdGetAssignment instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetAssignment instance.
func (me *TxsdGetAssignment) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAssignment struct {
	GetAssignment *TxsdGetAssignment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAssignment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAssignment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAssignment instance.
func (me *XsdGoPkgHasElem_GetAssignment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAssignment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAssignment struct {
	GetAssignments []*TxsdGetAssignment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAssignment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAssignment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAssignment instance.
func (me *XsdGoPkgHasElems_GetAssignment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAssignments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_ struct {
	ApprovalTime xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApprovalTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_ struct {
	Answer xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Answer"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_ struct {
	AutoApprovalTime xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AutoApprovalTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_ struct {
	AcceptTime xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AcceptTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_ struct {
	SubmitTime xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SubmitTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssignmentStatussequenceAssignmentschema_AssignmentStatus_TAssignmentStatus_ struct {
	AssignmentStatus TAssignmentStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignmentStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssignmentStatussequenceAssignmentschema_AssignmentStatus_TAssignmentStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssignmentStatussequenceAssignmentschema_AssignmentStatus_TAssignmentStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AssignmentStatussequenceAssignmentschema_AssignmentStatus_TAssignmentStatus_ instance.
func (me *XsdGoPkgHasElem_AssignmentStatussequenceAssignmentschema_AssignmentStatus_TAssignmentStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssignmentStatussequenceAssignmentschema_AssignmentStatus_TAssignmentStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_ struct {
	RejectionTime xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectionTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_ struct {
	Deadline xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Deadline"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAssignment struct {
	XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_

	XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_

	XsdGoPkgHasElem_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_

	XsdGoPkgHasElem_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_

	XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_

	XsdGoPkgHasElem_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_

	XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_

	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElem_AssignmentStatussequenceAssignmentschema_AssignmentStatus_TAssignmentStatus_

	XsdGoPkgHasElem_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_

	XsdGoPkgHasElem_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_
}

//	If the WalkHandlers.TAssignment function is not nil (ie. was set by outside code), calls it with this TAssignment instance as the single argument. Then calls the Walk() method on 13/13 embed(s) and 0/0 field(s) belonging to this TAssignment instance.
func (me *TAssignment) Walk() (err error) {
	if fn := WalkHandlers.TAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignmentStatussequenceAssignmentschema_AssignmentStatus_TAssignmentStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssignmentsequenceGetAssignmentResultschema_Assignment_TAssignment_ struct {
	Assignment *TAssignment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Assignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssignmentsequenceGetAssignmentResultschema_Assignment_TAssignment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssignmentsequenceGetAssignmentResultschema_Assignment_TAssignment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AssignmentsequenceGetAssignmentResultschema_Assignment_TAssignment_ instance.
func (me *XsdGoPkgHasElem_AssignmentsequenceGetAssignmentResultschema_Assignment_TAssignment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssignmentsequenceGetAssignmentResultschema_Assignment_TAssignment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Assignment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HITsequenceGetAssignmentResultschema_Hit_Thit_ struct {
	Hit *Thit `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HITsequenceGetAssignmentResultschema_Hit_Thit_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HITsequenceGetAssignmentResultschema_Hit_Thit_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HITsequenceGetAssignmentResultschema_Hit_Thit_ instance.
func (me *XsdGoPkgHasElem_HITsequenceGetAssignmentResultschema_Hit_Thit_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HITsequenceGetAssignmentResultschema_Hit_Thit_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetAssignmentResult struct {
	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_AssignmentsequenceGetAssignmentResultschema_Assignment_TAssignment_

	XsdGoPkgHasElem_HITsequenceGetAssignmentResultschema_Hit_Thit_
}

//	If the WalkHandlers.TGetAssignmentResult function is not nil (ie. was set by outside code), calls it with this TGetAssignmentResult instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TGetAssignmentResult instance.
func (me *TGetAssignmentResult) Walk() (err error) {
	if fn := WalkHandlers.TGetAssignmentResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_HITsequenceGetAssignmentResultschema_Hit_Thit_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignmentsequenceGetAssignmentResultschema_Assignment_TAssignment_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAssignmentResultsequenceTxsdGetAssignmentResponseGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_ struct {
	GetAssignmentResults []*TGetAssignmentResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAssignmentResultsequenceTxsdGetAssignmentResponseGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAssignmentResultsequenceTxsdGetAssignmentResponseGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAssignmentResultsequenceTxsdGetAssignmentResponseGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_ instance.
func (me *XsdGoPkgHasElems_GetAssignmentResultsequenceTxsdGetAssignmentResponseGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAssignmentResultsequenceTxsdGetAssignmentResponseGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAssignmentResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetAssignmentResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetAssignmentResultsequenceTxsdGetAssignmentResponseGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_
}

//	If the WalkHandlers.TxsdGetAssignmentResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetAssignmentResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetAssignmentResponse instance.
func (me *TxsdGetAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GetAssignmentResultsequenceTxsdGetAssignmentResponseGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAssignmentResponse struct {
	GetAssignmentResponses []*TxsdGetAssignmentResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAssignmentResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAssignmentResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAssignmentResponse instance.
func (me *XsdGoPkgHasElems_GetAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAssignmentResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAssignmentResponse struct {
	GetAssignmentResponse *TxsdGetAssignmentResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAssignmentResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAssignmentResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAssignmentResponse instance.
func (me *XsdGoPkgHasElem_GetAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAssignmentResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_ struct {
	Requests []*TGetReviewableHITsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetReviewableHITs struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_
}

//	If the WalkHandlers.TxsdGetReviewableHITs function is not nil (ie. was set by outside code), calls it with this TxsdGetReviewableHITs instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetReviewableHITs instance.
func (me *TxsdGetReviewableHITs) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetReviewableHITs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetReviewableHITs struct {
	GetReviewableHITs *TxsdGetReviewableHITs `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewableHITs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetReviewableHITs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetReviewableHITs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetReviewableHITs instance.
func (me *XsdGoPkgHasElem_GetReviewableHITs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetReviewableHITs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetReviewableHITs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetReviewableHITs struct {
	GetReviewableHITses []*TxsdGetReviewableHITs `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewableHITs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetReviewableHITs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetReviewableHITs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetReviewableHITs instance.
func (me *XsdGoPkgHasElems_GetReviewableHITs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetReviewableHITs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetReviewableHITses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_ struct {
	NumResults xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NumResults"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_ struct {
	TotalNumResults xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 TotalNumResults"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_ instance.
func (me *XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetReviewableHITsResult struct {
	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_

	XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_

	XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_
}

//	If the WalkHandlers.TGetReviewableHITsResult function is not nil (ie. was set by outside code), calls it with this TGetReviewableHITsResult instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TGetReviewableHITsResult instance.
func (me *TGetReviewableHITsResult) Walk() (err error) {
	if fn := WalkHandlers.TGetReviewableHITsResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_ struct {
	GetReviewableHITsResults []*TGetReviewableHITsResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewableHITsResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_ instance.
func (me *XsdGoPkgHasElems_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetReviewableHITsResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetReviewableHITsResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_
}

//	If the WalkHandlers.TxsdGetReviewableHITsResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetReviewableHITsResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetReviewableHITsResponse instance.
func (me *TxsdGetReviewableHITsResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetReviewableHITsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetReviewableHITsResponse struct {
	GetReviewableHITsResponses []*TxsdGetReviewableHITsResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewableHITsResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetReviewableHITsResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetReviewableHITsResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetReviewableHITsResponse instance.
func (me *XsdGoPkgHasElems_GetReviewableHITsResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetReviewableHITsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetReviewableHITsResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetReviewableHITsResponse struct {
	GetReviewableHITsResponse *TxsdGetReviewableHITsResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewableHITsResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetReviewableHITsResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetReviewableHITsResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetReviewableHITsResponse instance.
func (me *XsdGoPkgHasElem_GetReviewableHITsResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetReviewableHITsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetReviewableHITsResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetReviewResultsForHITGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_ struct {
	Requests []*TGetReviewResultsForHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetReviewResultsForHITGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetReviewResultsForHITGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetReviewResultsForHITGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetReviewResultsForHITGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetReviewResultsForHITGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetReviewResultsForHIT struct {
	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGetReviewResultsForHITGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_
}

//	If the WalkHandlers.TxsdGetReviewResultsForHIT function is not nil (ie. was set by outside code), calls it with this TxsdGetReviewResultsForHIT instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetReviewResultsForHIT instance.
func (me *TxsdGetReviewResultsForHIT) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetReviewResultsForHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetReviewResultsForHITGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetReviewResultsForHIT struct {
	GetReviewResultsForHIT *TxsdGetReviewResultsForHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewResultsForHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetReviewResultsForHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetReviewResultsForHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetReviewResultsForHIT instance.
func (me *XsdGoPkgHasElem_GetReviewResultsForHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetReviewResultsForHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetReviewResultsForHIT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetReviewResultsForHIT struct {
	GetReviewResultsForHITs []*TxsdGetReviewResultsForHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewResultsForHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetReviewResultsForHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetReviewResultsForHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetReviewResultsForHIT instance.
func (me *XsdGoPkgHasElems_GetReviewResultsForHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetReviewResultsForHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetReviewResultsForHITs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_ struct {
	SubjectType xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SubjectType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_ instance.
func (me *XsdGoPkgHasElem_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_ struct {
	QuestionId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QuestionId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_ struct {
	ActionId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ActionId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TReviewResultDetail struct {
	XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_

	XsdGoPkgHasElem_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_

	XsdGoPkgHasElem_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_

	XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_

	XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_

	XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_
}

//	If the WalkHandlers.TReviewResultDetail function is not nil (ie. was set by outside code), calls it with this TReviewResultDetail instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TReviewResultDetail instance.
func (me *TReviewResultDetail) Walk() (err error) {
	if fn := WalkHandlers.TReviewResultDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_ struct {
	ReviewResults []*TReviewResultDetail `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ReviewResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_ instance.
func (me *XsdGoPkgHasElems_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReviewResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_ struct {
	CompleteTime xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CompleteTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResultsequenceReviewActionDetailschema_Result_XsdtString_ struct {
	Result xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Result"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResultsequenceReviewActionDetailschema_Result_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResultsequenceReviewActionDetailschema_Result_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ResultsequenceReviewActionDetailschema_Result_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ResultsequenceReviewActionDetailschema_Result_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResultsequenceReviewActionDetailschema_Result_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_ struct {
	ErrorCode xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ErrorCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_ struct {
	ActionName xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ActionName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_ struct {
	ObjectId xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ObjectId"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_ struct {
	ObjectType xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ObjectType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TReviewActionStatus xsdt.String

//	Returns true if the value of this enumerated TReviewActionStatus is "Succeeded".
func (me TReviewActionStatus) IsSucceeded() bool { return me.String() == "Succeeded" }

//	Returns true if the value of this enumerated TReviewActionStatus is "Failed".
func (me TReviewActionStatus) IsFailed() bool { return me.String() == "Failed" }

//	Returns true if the value of this enumerated TReviewActionStatus is "Cancelled".
func (me TReviewActionStatus) IsCancelled() bool { return me.String() == "Cancelled" }

//	Since TReviewActionStatus is just a simple String type, this merely sets the current value from the specified string.
func (me *TReviewActionStatus) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TReviewActionStatus is just a simple String type, this merely returns the current string value.
func (me TReviewActionStatus) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TReviewActionStatus's alias type xsdt.String.
func (me TReviewActionStatus) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TReviewActionStatus is "Intended".
func (me TReviewActionStatus) IsIntended() bool { return me.String() == "Intended" }

type XsdGoPkgHasElem_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_ struct {
	Status TReviewActionStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Status"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_ instance.
func (me *XsdGoPkgHasElem_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TReviewActionDetail struct {
	XsdGoPkgHasElem_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_

	XsdGoPkgHasElem_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_

	XsdGoPkgHasElem_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_

	XsdGoPkgHasElem_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_

	XsdGoPkgHasElem_ResultsequenceReviewActionDetailschema_Result_XsdtString_

	XsdGoPkgHasElem_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_

	XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_

	XsdGoPkgHasElem_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_
}

//	If the WalkHandlers.TReviewActionDetail function is not nil (ie. was set by outside code), calls it with this TReviewActionDetail instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TReviewActionDetail instance.
func (me *TReviewActionDetail) Walk() (err error) {
	if fn := WalkHandlers.TReviewActionDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ResultsequenceReviewActionDetailschema_Result_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_ struct {
	ReviewActions []*TReviewActionDetail `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ReviewAction"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_ instance.
func (me *XsdGoPkgHasElems_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReviewActions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TReviewReport struct {
	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_

	XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_

	XsdGoPkgHasElems_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_

	XsdGoPkgHasElems_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_
}

//	If the WalkHandlers.TReviewReport function is not nil (ie. was set by outside code), calls it with this TReviewReport instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TReviewReport instance.
func (me *TReviewReport) Walk() (err error) {
	if fn := WalkHandlers.TReviewReport; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_ struct {
	AssignmentReviewReport *TReviewReport `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignmentReviewReport"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_ instance.
func (me *XsdGoPkgHasElem_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssignmentReviewReport.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_ struct {
	HITReviewReport *TReviewReport `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITReviewReport"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_ instance.
func (me *XsdGoPkgHasElem_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HITReviewReport.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetReviewResultsForHITResult struct {
	XsdGoPkgHasElem_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_

	XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_

	XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_

	XsdGoPkgHasElem_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_
}

//	If the WalkHandlers.TGetReviewResultsForHITResult function is not nil (ie. was set by outside code), calls it with this TGetReviewResultsForHITResult instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TGetReviewResultsForHITResult instance.
func (me *TGetReviewResultsForHITResult) Walk() (err error) {
	if fn := WalkHandlers.TGetReviewResultsForHITResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetReviewResultsForHITResultsequenceTxsdGetReviewResultsForHITResponseGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_ struct {
	GetReviewResultsForHITResults []*TGetReviewResultsForHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewResultsForHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetReviewResultsForHITResultsequenceTxsdGetReviewResultsForHITResponseGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetReviewResultsForHITResultsequenceTxsdGetReviewResultsForHITResponseGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetReviewResultsForHITResultsequenceTxsdGetReviewResultsForHITResponseGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_ instance.
func (me *XsdGoPkgHasElems_GetReviewResultsForHITResultsequenceTxsdGetReviewResultsForHITResponseGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetReviewResultsForHITResultsequenceTxsdGetReviewResultsForHITResponseGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetReviewResultsForHITResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetReviewResultsForHITResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetReviewResultsForHITResultsequenceTxsdGetReviewResultsForHITResponseGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_
}

//	If the WalkHandlers.TxsdGetReviewResultsForHITResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetReviewResultsForHITResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetReviewResultsForHITResponse instance.
func (me *TxsdGetReviewResultsForHITResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetReviewResultsForHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GetReviewResultsForHITResultsequenceTxsdGetReviewResultsForHITResponseGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetReviewResultsForHITResponse struct {
	GetReviewResultsForHITResponse *TxsdGetReviewResultsForHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewResultsForHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetReviewResultsForHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetReviewResultsForHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetReviewResultsForHITResponse instance.
func (me *XsdGoPkgHasElem_GetReviewResultsForHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetReviewResultsForHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetReviewResultsForHITResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetReviewResultsForHITResponse struct {
	GetReviewResultsForHITResponses []*TxsdGetReviewResultsForHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewResultsForHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetReviewResultsForHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetReviewResultsForHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetReviewResultsForHITResponse instance.
func (me *XsdGoPkgHasElems_GetReviewResultsForHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetReviewResultsForHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetReviewResultsForHITResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetHITsForQualificationTypeGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_ struct {
	Requests []*TGetHITsForQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetHITsForQualificationTypeGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetHITsForQualificationTypeGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetHITsForQualificationTypeGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetHITsForQualificationTypeGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetHITsForQualificationTypeGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetHITsForQualificationType struct {
	XsdGoPkgHasElems_RequestsequenceTxsdGetHITsForQualificationTypeGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_
}

//	If the WalkHandlers.TxsdGetHITsForQualificationType function is not nil (ie. was set by outside code), calls it with this TxsdGetHITsForQualificationType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetHITsForQualificationType instance.
func (me *TxsdGetHITsForQualificationType) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetHITsForQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetHITsForQualificationTypeGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetHITsForQualificationType struct {
	GetHITsForQualificationType *TxsdGetHITsForQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITsForQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetHITsForQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetHITsForQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetHITsForQualificationType instance.
func (me *XsdGoPkgHasElem_GetHITsForQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetHITsForQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetHITsForQualificationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetHITsForQualificationType struct {
	GetHITsForQualificationTypes []*TxsdGetHITsForQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITsForQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetHITsForQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetHITsForQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetHITsForQualificationType instance.
func (me *XsdGoPkgHasElems_GetHITsForQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetHITsForQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetHITsForQualificationTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetHITsForQualificationTypeResult struct {
	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_

	XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_

	XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_
}

//	If the WalkHandlers.TGetHITsForQualificationTypeResult function is not nil (ie. was set by outside code), calls it with this TGetHITsForQualificationTypeResult instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TGetHITsForQualificationTypeResult instance.
func (me *TGetHITsForQualificationTypeResult) Walk() (err error) {
	if fn := WalkHandlers.TGetHITsForQualificationTypeResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_ struct {
	GetHITsForQualificationTypeResults []*TGetHITsForQualificationTypeResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITsForQualificationTypeResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_ instance.
func (me *XsdGoPkgHasElems_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetHITsForQualificationTypeResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetHITsForQualificationTypeResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_
}

//	If the WalkHandlers.TxsdGetHITsForQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetHITsForQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetHITsForQualificationTypeResponse instance.
func (me *TxsdGetHITsForQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetHITsForQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetHITsForQualificationTypeResponse struct {
	GetHITsForQualificationTypeResponse *TxsdGetHITsForQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITsForQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetHITsForQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetHITsForQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetHITsForQualificationTypeResponse instance.
func (me *XsdGoPkgHasElem_GetHITsForQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetHITsForQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetHITsForQualificationTypeResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetHITsForQualificationTypeResponse struct {
	GetHITsForQualificationTypeResponses []*TxsdGetHITsForQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITsForQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetHITsForQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetHITsForQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetHITsForQualificationTypeResponse instance.
func (me *XsdGoPkgHasElems_GetHITsForQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetHITsForQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetHITsForQualificationTypeResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_ struct {
	Requests []*TGetQualificationsForQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetQualificationsForQualificationType struct {
	XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_
}

//	If the WalkHandlers.TxsdGetQualificationsForQualificationType function is not nil (ie. was set by outside code), calls it with this TxsdGetQualificationsForQualificationType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetQualificationsForQualificationType instance.
func (me *TxsdGetQualificationsForQualificationType) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetQualificationsForQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationsForQualificationType struct {
	GetQualificationsForQualificationType *TxsdGetQualificationsForQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationsForQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationsForQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationsForQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationsForQualificationType instance.
func (me *XsdGoPkgHasElem_GetQualificationsForQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationsForQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationsForQualificationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationsForQualificationType struct {
	GetQualificationsForQualificationTypes []*TxsdGetQualificationsForQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationsForQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationsForQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationsForQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationsForQualificationType instance.
func (me *XsdGoPkgHasElems_GetQualificationsForQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationsForQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationsForQualificationTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_ struct {
	GrantTime xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LocaleValuesequenceQualificationschema_LocaleValue_TLocale_ struct {
	LocaleValue *TLocale `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 LocaleValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LocaleValuesequenceQualificationschema_LocaleValue_TLocale_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LocaleValuesequenceQualificationschema_LocaleValue_TLocale_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LocaleValuesequenceQualificationschema_LocaleValue_TLocale_ instance.
func (me *XsdGoPkgHasElem_LocaleValuesequenceQualificationschema_LocaleValue_TLocale_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LocaleValuesequenceQualificationschema_LocaleValue_TLocale_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LocaleValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TQualification struct {
	XsdGoPkgHasElem_LocaleValuesequenceQualificationschema_LocaleValue_TLocale_

	XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_

	XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_

	XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_
}

//	If the WalkHandlers.TQualification function is not nil (ie. was set by outside code), calls it with this TQualification instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TQualification instance.
func (me *TQualification) Walk() (err error) {
	if fn := WalkHandlers.TQualification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LocaleValuesequenceQualificationschema_LocaleValue_TLocale_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_ struct {
	Qualifications []*TQualification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Qualification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_ instance.
func (me *XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Qualifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetQualificationsForQualificationTypeResult struct {
	XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_

	XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_
}

//	If the WalkHandlers.TGetQualificationsForQualificationTypeResult function is not nil (ie. was set by outside code), calls it with this TGetQualificationsForQualificationTypeResult instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TGetQualificationsForQualificationTypeResult instance.
func (me *TGetQualificationsForQualificationTypeResult) Walk() (err error) {
	if fn := WalkHandlers.TGetQualificationsForQualificationTypeResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationsForQualificationTypeResultsequenceTxsdGetQualificationsForQualificationTypeResponseGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_ struct {
	GetQualificationsForQualificationTypeResults []*TGetQualificationsForQualificationTypeResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationsForQualificationTypeResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationsForQualificationTypeResultsequenceTxsdGetQualificationsForQualificationTypeResponseGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationsForQualificationTypeResultsequenceTxsdGetQualificationsForQualificationTypeResponseGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationsForQualificationTypeResultsequenceTxsdGetQualificationsForQualificationTypeResponseGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_ instance.
func (me *XsdGoPkgHasElems_GetQualificationsForQualificationTypeResultsequenceTxsdGetQualificationsForQualificationTypeResponseGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationsForQualificationTypeResultsequenceTxsdGetQualificationsForQualificationTypeResponseGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationsForQualificationTypeResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetQualificationsForQualificationTypeResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetQualificationsForQualificationTypeResultsequenceTxsdGetQualificationsForQualificationTypeResponseGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_
}

//	If the WalkHandlers.TxsdGetQualificationsForQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetQualificationsForQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetQualificationsForQualificationTypeResponse instance.
func (me *TxsdGetQualificationsForQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetQualificationsForQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_GetQualificationsForQualificationTypeResultsequenceTxsdGetQualificationsForQualificationTypeResponseGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationsForQualificationTypeResponse struct {
	GetQualificationsForQualificationTypeResponses []*TxsdGetQualificationsForQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationsForQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationsForQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationsForQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationsForQualificationTypeResponse instance.
func (me *XsdGoPkgHasElems_GetQualificationsForQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationsForQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationsForQualificationTypeResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationsForQualificationTypeResponse struct {
	GetQualificationsForQualificationTypeResponse *TxsdGetQualificationsForQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationsForQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationsForQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationsForQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationsForQualificationTypeResponse instance.
func (me *XsdGoPkgHasElem_GetQualificationsForQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationsForQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationsForQualificationTypeResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_ struct {
	Requests []*TSetHITAsReviewingRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSetHITAsReviewing struct {
	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_
}

//	If the WalkHandlers.TxsdSetHITAsReviewing function is not nil (ie. was set by outside code), calls it with this TxsdSetHITAsReviewing instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdSetHITAsReviewing instance.
func (me *TxsdSetHITAsReviewing) Walk() (err error) {
	if fn := WalkHandlers.TxsdSetHITAsReviewing; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SetHITAsReviewing struct {
	SetHITAsReviewing *TxsdSetHITAsReviewing `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITAsReviewing"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SetHITAsReviewing function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SetHITAsReviewing instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SetHITAsReviewing instance.
func (me *XsdGoPkgHasElem_SetHITAsReviewing) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SetHITAsReviewing; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SetHITAsReviewing.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SetHITAsReviewing struct {
	SetHITAsReviewings []*TxsdSetHITAsReviewing `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITAsReviewing"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SetHITAsReviewing function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SetHITAsReviewing instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SetHITAsReviewing instance.
func (me *XsdGoPkgHasElems_SetHITAsReviewing) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SetHITAsReviewing; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SetHITAsReviewings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSetHITAsReviewingResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TSetHITAsReviewingResult function is not nil (ie. was set by outside code), calls it with this TSetHITAsReviewingResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSetHITAsReviewingResult instance.
func (me *TSetHITAsReviewingResult) Walk() (err error) {
	if fn := WalkHandlers.TSetHITAsReviewingResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_ struct {
	SetHITAsReviewingResults []*TSetHITAsReviewingResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITAsReviewingResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_ instance.
func (me *XsdGoPkgHasElems_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SetHITAsReviewingResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSetHITAsReviewingResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_
}

//	If the WalkHandlers.TxsdSetHITAsReviewingResponse function is not nil (ie. was set by outside code), calls it with this TxsdSetHITAsReviewingResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSetHITAsReviewingResponse instance.
func (me *TxsdSetHITAsReviewingResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdSetHITAsReviewingResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SetHITAsReviewingResponse struct {
	SetHITAsReviewingResponses []*TxsdSetHITAsReviewingResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITAsReviewingResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SetHITAsReviewingResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SetHITAsReviewingResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SetHITAsReviewingResponse instance.
func (me *XsdGoPkgHasElems_SetHITAsReviewingResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SetHITAsReviewingResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SetHITAsReviewingResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SetHITAsReviewingResponse struct {
	SetHITAsReviewingResponse *TxsdSetHITAsReviewingResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITAsReviewingResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SetHITAsReviewingResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SetHITAsReviewingResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SetHITAsReviewingResponse instance.
func (me *XsdGoPkgHasElem_SetHITAsReviewingResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SetHITAsReviewingResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SetHITAsReviewingResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_ struct {
	Requests []*TExtendHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdExtendHIT struct {
	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_
}

//	If the WalkHandlers.TxsdExtendHIT function is not nil (ie. was set by outside code), calls it with this TxsdExtendHIT instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdExtendHIT instance.
func (me *TxsdExtendHIT) Walk() (err error) {
	if fn := WalkHandlers.TxsdExtendHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExtendHIT struct {
	ExtendHIT *TxsdExtendHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ExtendHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExtendHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExtendHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExtendHIT instance.
func (me *XsdGoPkgHasElem_ExtendHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExtendHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ExtendHIT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExtendHIT struct {
	ExtendHITs []*TxsdExtendHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ExtendHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExtendHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExtendHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExtendHIT instance.
func (me *XsdGoPkgHasElems_ExtendHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExtendHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ExtendHITs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TExtendHITResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TExtendHITResult function is not nil (ie. was set by outside code), calls it with this TExtendHITResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TExtendHITResult instance.
func (me *TExtendHITResult) Walk() (err error) {
	if fn := WalkHandlers.TExtendHITResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_ struct {
	ExtendHITResults []*TExtendHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ExtendHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_ instance.
func (me *XsdGoPkgHasElems_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ExtendHITResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdExtendHITResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_
}

//	If the WalkHandlers.TxsdExtendHITResponse function is not nil (ie. was set by outside code), calls it with this TxsdExtendHITResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdExtendHITResponse instance.
func (me *TxsdExtendHITResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdExtendHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExtendHITResponse struct {
	ExtendHITResponse *TxsdExtendHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ExtendHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExtendHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExtendHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExtendHITResponse instance.
func (me *XsdGoPkgHasElem_ExtendHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExtendHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ExtendHITResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExtendHITResponse struct {
	ExtendHITResponses []*TxsdExtendHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ExtendHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExtendHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExtendHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExtendHITResponse instance.
func (me *XsdGoPkgHasElems_ExtendHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExtendHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ExtendHITResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_ struct {
	Requests []*TForceExpireHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdForceExpireHIT struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_
}

//	If the WalkHandlers.TxsdForceExpireHIT function is not nil (ie. was set by outside code), calls it with this TxsdForceExpireHIT instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdForceExpireHIT instance.
func (me *TxsdForceExpireHIT) Walk() (err error) {
	if fn := WalkHandlers.TxsdForceExpireHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ForceExpireHIT struct {
	ForceExpireHIT *TxsdForceExpireHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ForceExpireHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ForceExpireHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ForceExpireHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ForceExpireHIT instance.
func (me *XsdGoPkgHasElem_ForceExpireHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ForceExpireHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ForceExpireHIT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ForceExpireHIT struct {
	ForceExpireHITs []*TxsdForceExpireHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ForceExpireHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ForceExpireHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ForceExpireHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ForceExpireHIT instance.
func (me *XsdGoPkgHasElems_ForceExpireHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ForceExpireHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForceExpireHITs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TForceExpireHITResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TForceExpireHITResult function is not nil (ie. was set by outside code), calls it with this TForceExpireHITResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TForceExpireHITResult instance.
func (me *TForceExpireHITResult) Walk() (err error) {
	if fn := WalkHandlers.TForceExpireHITResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ForceExpireHITResultsequenceTxsdForceExpireHITResponseForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_ struct {
	ForceExpireHITResults []*TForceExpireHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ForceExpireHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ForceExpireHITResultsequenceTxsdForceExpireHITResponseForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ForceExpireHITResultsequenceTxsdForceExpireHITResponseForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ForceExpireHITResultsequenceTxsdForceExpireHITResponseForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_ instance.
func (me *XsdGoPkgHasElems_ForceExpireHITResultsequenceTxsdForceExpireHITResponseForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ForceExpireHITResultsequenceTxsdForceExpireHITResponseForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForceExpireHITResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdForceExpireHITResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_ForceExpireHITResultsequenceTxsdForceExpireHITResponseForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_
}

//	If the WalkHandlers.TxsdForceExpireHITResponse function is not nil (ie. was set by outside code), calls it with this TxsdForceExpireHITResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdForceExpireHITResponse instance.
func (me *TxsdForceExpireHITResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdForceExpireHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ForceExpireHITResultsequenceTxsdForceExpireHITResponseForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ForceExpireHITResponse struct {
	ForceExpireHITResponse *TxsdForceExpireHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ForceExpireHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ForceExpireHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ForceExpireHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ForceExpireHITResponse instance.
func (me *XsdGoPkgHasElem_ForceExpireHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ForceExpireHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ForceExpireHITResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ForceExpireHITResponse struct {
	ForceExpireHITResponses []*TxsdForceExpireHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ForceExpireHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ForceExpireHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ForceExpireHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ForceExpireHITResponse instance.
func (me *XsdGoPkgHasElems_ForceExpireHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ForceExpireHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForceExpireHITResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_ struct {
	Requests []*TApproveAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdApproveAssignment struct {
	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_
}

//	If the WalkHandlers.TxsdApproveAssignment function is not nil (ie. was set by outside code), calls it with this TxsdApproveAssignment instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdApproveAssignment instance.
func (me *TxsdApproveAssignment) Walk() (err error) {
	if fn := WalkHandlers.TxsdApproveAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApproveAssignment struct {
	ApproveAssignment *TxsdApproveAssignment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveAssignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApproveAssignment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApproveAssignment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ApproveAssignment instance.
func (me *XsdGoPkgHasElem_ApproveAssignment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApproveAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ApproveAssignment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApproveAssignment struct {
	ApproveAssignments []*TxsdApproveAssignment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveAssignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApproveAssignment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApproveAssignment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApproveAssignment instance.
func (me *XsdGoPkgHasElems_ApproveAssignment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApproveAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ApproveAssignments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TApproveAssignmentResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TApproveAssignmentResult function is not nil (ie. was set by outside code), calls it with this TApproveAssignmentResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TApproveAssignmentResult instance.
func (me *TApproveAssignmentResult) Walk() (err error) {
	if fn := WalkHandlers.TApproveAssignmentResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApproveAssignmentResultsequenceTxsdApproveAssignmentResponseApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_ struct {
	ApproveAssignmentResults []*TApproveAssignmentResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveAssignmentResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApproveAssignmentResultsequenceTxsdApproveAssignmentResponseApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApproveAssignmentResultsequenceTxsdApproveAssignmentResponseApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApproveAssignmentResultsequenceTxsdApproveAssignmentResponseApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_ instance.
func (me *XsdGoPkgHasElems_ApproveAssignmentResultsequenceTxsdApproveAssignmentResponseApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApproveAssignmentResultsequenceTxsdApproveAssignmentResponseApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ApproveAssignmentResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdApproveAssignmentResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_ApproveAssignmentResultsequenceTxsdApproveAssignmentResponseApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_
}

//	If the WalkHandlers.TxsdApproveAssignmentResponse function is not nil (ie. was set by outside code), calls it with this TxsdApproveAssignmentResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdApproveAssignmentResponse instance.
func (me *TxsdApproveAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdApproveAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ApproveAssignmentResultsequenceTxsdApproveAssignmentResponseApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApproveAssignmentResponse struct {
	ApproveAssignmentResponse *TxsdApproveAssignmentResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveAssignmentResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApproveAssignmentResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApproveAssignmentResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ApproveAssignmentResponse instance.
func (me *XsdGoPkgHasElem_ApproveAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApproveAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ApproveAssignmentResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApproveAssignmentResponse struct {
	ApproveAssignmentResponses []*TxsdApproveAssignmentResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveAssignmentResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApproveAssignmentResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApproveAssignmentResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApproveAssignmentResponse instance.
func (me *XsdGoPkgHasElems_ApproveAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApproveAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ApproveAssignmentResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdRejectAssignmentRejectAssignmentschema_Request_TRejectAssignmentRequest_ struct {
	Requests []*TRejectAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdRejectAssignmentRejectAssignmentschema_Request_TRejectAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdRejectAssignmentRejectAssignmentschema_Request_TRejectAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdRejectAssignmentRejectAssignmentschema_Request_TRejectAssignmentRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdRejectAssignmentRejectAssignmentschema_Request_TRejectAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdRejectAssignmentRejectAssignmentschema_Request_TRejectAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRejectAssignment struct {
	XsdGoPkgHasElems_RequestsequenceTxsdRejectAssignmentRejectAssignmentschema_Request_TRejectAssignmentRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_
}

//	If the WalkHandlers.TxsdRejectAssignment function is not nil (ie. was set by outside code), calls it with this TxsdRejectAssignment instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdRejectAssignment instance.
func (me *TxsdRejectAssignment) Walk() (err error) {
	if fn := WalkHandlers.TxsdRejectAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdRejectAssignmentRejectAssignmentschema_Request_TRejectAssignmentRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RejectAssignment struct {
	RejectAssignment *TxsdRejectAssignment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectAssignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RejectAssignment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RejectAssignment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RejectAssignment instance.
func (me *XsdGoPkgHasElem_RejectAssignment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RejectAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RejectAssignment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RejectAssignment struct {
	RejectAssignments []*TxsdRejectAssignment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectAssignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RejectAssignment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RejectAssignment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RejectAssignment instance.
func (me *XsdGoPkgHasElems_RejectAssignment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RejectAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RejectAssignments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRejectAssignmentResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TRejectAssignmentResult function is not nil (ie. was set by outside code), calls it with this TRejectAssignmentResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TRejectAssignmentResult instance.
func (me *TRejectAssignmentResult) Walk() (err error) {
	if fn := WalkHandlers.TRejectAssignmentResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RejectAssignmentResultsequenceTxsdRejectAssignmentResponseRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_ struct {
	RejectAssignmentResults []*TRejectAssignmentResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectAssignmentResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RejectAssignmentResultsequenceTxsdRejectAssignmentResponseRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RejectAssignmentResultsequenceTxsdRejectAssignmentResponseRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RejectAssignmentResultsequenceTxsdRejectAssignmentResponseRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_ instance.
func (me *XsdGoPkgHasElems_RejectAssignmentResultsequenceTxsdRejectAssignmentResponseRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RejectAssignmentResultsequenceTxsdRejectAssignmentResponseRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RejectAssignmentResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRejectAssignmentResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_RejectAssignmentResultsequenceTxsdRejectAssignmentResponseRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_
}

//	If the WalkHandlers.TxsdRejectAssignmentResponse function is not nil (ie. was set by outside code), calls it with this TxsdRejectAssignmentResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRejectAssignmentResponse instance.
func (me *TxsdRejectAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdRejectAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RejectAssignmentResultsequenceTxsdRejectAssignmentResponseRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RejectAssignmentResponse struct {
	RejectAssignmentResponse *TxsdRejectAssignmentResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectAssignmentResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RejectAssignmentResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RejectAssignmentResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RejectAssignmentResponse instance.
func (me *XsdGoPkgHasElem_RejectAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RejectAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RejectAssignmentResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RejectAssignmentResponse struct {
	RejectAssignmentResponses []*TxsdRejectAssignmentResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectAssignmentResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RejectAssignmentResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RejectAssignmentResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RejectAssignmentResponse instance.
func (me *XsdGoPkgHasElems_RejectAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RejectAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RejectAssignmentResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdApproveRejectedAssignmentApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_ struct {
	Requests []*TApproveRejectedAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdApproveRejectedAssignmentApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdApproveRejectedAssignmentApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdApproveRejectedAssignmentApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdApproveRejectedAssignmentApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdApproveRejectedAssignmentApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdApproveRejectedAssignment struct {
	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdApproveRejectedAssignmentApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_
}

//	If the WalkHandlers.TxsdApproveRejectedAssignment function is not nil (ie. was set by outside code), calls it with this TxsdApproveRejectedAssignment instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdApproveRejectedAssignment instance.
func (me *TxsdApproveRejectedAssignment) Walk() (err error) {
	if fn := WalkHandlers.TxsdApproveRejectedAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdApproveRejectedAssignmentApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApproveRejectedAssignment struct {
	ApproveRejectedAssignment *TxsdApproveRejectedAssignment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveRejectedAssignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApproveRejectedAssignment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApproveRejectedAssignment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ApproveRejectedAssignment instance.
func (me *XsdGoPkgHasElem_ApproveRejectedAssignment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApproveRejectedAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ApproveRejectedAssignment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApproveRejectedAssignment struct {
	ApproveRejectedAssignments []*TxsdApproveRejectedAssignment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveRejectedAssignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApproveRejectedAssignment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApproveRejectedAssignment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApproveRejectedAssignment instance.
func (me *XsdGoPkgHasElems_ApproveRejectedAssignment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApproveRejectedAssignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ApproveRejectedAssignments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TApproveRejectedAssignmentResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TApproveRejectedAssignmentResult function is not nil (ie. was set by outside code), calls it with this TApproveRejectedAssignmentResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TApproveRejectedAssignmentResult instance.
func (me *TApproveRejectedAssignmentResult) Walk() (err error) {
	if fn := WalkHandlers.TApproveRejectedAssignmentResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_ struct {
	ApproveRejectedAssignmentResults []*TApproveRejectedAssignmentResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveRejectedAssignmentResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_ instance.
func (me *XsdGoPkgHasElems_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ApproveRejectedAssignmentResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdApproveRejectedAssignmentResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_
}

//	If the WalkHandlers.TxsdApproveRejectedAssignmentResponse function is not nil (ie. was set by outside code), calls it with this TxsdApproveRejectedAssignmentResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdApproveRejectedAssignmentResponse instance.
func (me *TxsdApproveRejectedAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdApproveRejectedAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApproveRejectedAssignmentResponse struct {
	ApproveRejectedAssignmentResponse *TxsdApproveRejectedAssignmentResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveRejectedAssignmentResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApproveRejectedAssignmentResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApproveRejectedAssignmentResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ApproveRejectedAssignmentResponse instance.
func (me *XsdGoPkgHasElem_ApproveRejectedAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApproveRejectedAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ApproveRejectedAssignmentResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApproveRejectedAssignmentResponse struct {
	ApproveRejectedAssignmentResponses []*TxsdApproveRejectedAssignmentResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveRejectedAssignmentResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApproveRejectedAssignmentResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApproveRejectedAssignmentResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApproveRejectedAssignmentResponse instance.
func (me *XsdGoPkgHasElems_ApproveRejectedAssignmentResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApproveRejectedAssignmentResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ApproveRejectedAssignmentResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_ struct {
	Requests []*TGetAssignmentsForHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetAssignmentsForHIT struct {
	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_
}

//	If the WalkHandlers.TxsdGetAssignmentsForHIT function is not nil (ie. was set by outside code), calls it with this TxsdGetAssignmentsForHIT instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetAssignmentsForHIT instance.
func (me *TxsdGetAssignmentsForHIT) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetAssignmentsForHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAssignmentsForHIT struct {
	GetAssignmentsForHIT *TxsdGetAssignmentsForHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentsForHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAssignmentsForHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAssignmentsForHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAssignmentsForHIT instance.
func (me *XsdGoPkgHasElem_GetAssignmentsForHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAssignmentsForHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAssignmentsForHIT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAssignmentsForHIT struct {
	GetAssignmentsForHITs []*TxsdGetAssignmentsForHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentsForHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAssignmentsForHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAssignmentsForHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAssignmentsForHIT instance.
func (me *XsdGoPkgHasElems_GetAssignmentsForHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAssignmentsForHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAssignmentsForHITs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssignmentsequenceGetAssignmentsForHITResultschema_Assignment_TAssignment_ struct {
	Assignments []*TAssignment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Assignment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssignmentsequenceGetAssignmentsForHITResultschema_Assignment_TAssignment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssignmentsequenceGetAssignmentsForHITResultschema_Assignment_TAssignment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssignmentsequenceGetAssignmentsForHITResultschema_Assignment_TAssignment_ instance.
func (me *XsdGoPkgHasElems_AssignmentsequenceGetAssignmentsForHITResultschema_Assignment_TAssignment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssignmentsequenceGetAssignmentsForHITResultschema_Assignment_TAssignment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Assignments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetAssignmentsForHITResult struct {
	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_

	XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_

	XsdGoPkgHasElems_AssignmentsequenceGetAssignmentsForHITResultschema_Assignment_TAssignment_
}

//	If the WalkHandlers.TGetAssignmentsForHITResult function is not nil (ie. was set by outside code), calls it with this TGetAssignmentsForHITResult instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TGetAssignmentsForHITResult instance.
func (me *TGetAssignmentsForHITResult) Walk() (err error) {
	if fn := WalkHandlers.TGetAssignmentsForHITResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssignmentsequenceGetAssignmentsForHITResultschema_Assignment_TAssignment_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_ struct {
	GetAssignmentsForHITResults []*TGetAssignmentsForHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentsForHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_ instance.
func (me *XsdGoPkgHasElems_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAssignmentsForHITResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetAssignmentsForHITResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_
}

//	If the WalkHandlers.TxsdGetAssignmentsForHITResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetAssignmentsForHITResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetAssignmentsForHITResponse instance.
func (me *TxsdGetAssignmentsForHITResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetAssignmentsForHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAssignmentsForHITResponse struct {
	GetAssignmentsForHITResponses []*TxsdGetAssignmentsForHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentsForHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAssignmentsForHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAssignmentsForHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAssignmentsForHITResponse instance.
func (me *XsdGoPkgHasElems_GetAssignmentsForHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAssignmentsForHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAssignmentsForHITResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAssignmentsForHITResponse struct {
	GetAssignmentsForHITResponse *TxsdGetAssignmentsForHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentsForHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAssignmentsForHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAssignmentsForHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAssignmentsForHITResponse instance.
func (me *XsdGoPkgHasElem_GetAssignmentsForHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAssignmentsForHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAssignmentsForHITResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_ struct {
	Requests []*TGetFileUploadURLRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetFileUploadURL struct {
	XsdGoPkgHasElems_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_
}

//	If the WalkHandlers.TxsdGetFileUploadURL function is not nil (ie. was set by outside code), calls it with this TxsdGetFileUploadURL instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetFileUploadURL instance.
func (me *TxsdGetFileUploadURL) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetFileUploadURL; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetFileUploadURL struct {
	GetFileUploadURLs []*TxsdGetFileUploadURL `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetFileUploadURL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetFileUploadURL function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetFileUploadURL instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetFileUploadURL instance.
func (me *XsdGoPkgHasElems_GetFileUploadURL) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetFileUploadURL; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetFileUploadURLs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetFileUploadURL struct {
	GetFileUploadURL *TxsdGetFileUploadURL `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetFileUploadURL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetFileUploadURL function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetFileUploadURL instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetFileUploadURL instance.
func (me *XsdGoPkgHasElem_GetFileUploadURL) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetFileUploadURL; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetFileUploadURL.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_ struct {
	FileUploadURL xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 FileUploadURL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_ instance.
func (me *XsdGoPkgHasElem_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetFileUploadURLResult struct {
	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_
}

//	If the WalkHandlers.TGetFileUploadURLResult function is not nil (ie. was set by outside code), calls it with this TGetFileUploadURLResult instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TGetFileUploadURLResult instance.
func (me *TGetFileUploadURLResult) Walk() (err error) {
	if fn := WalkHandlers.TGetFileUploadURLResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_ struct {
	GetFileUploadURLResults []*TGetFileUploadURLResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetFileUploadURLResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_ instance.
func (me *XsdGoPkgHasElems_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetFileUploadURLResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetFileUploadURLResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_
}

//	If the WalkHandlers.TxsdGetFileUploadURLResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetFileUploadURLResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetFileUploadURLResponse instance.
func (me *TxsdGetFileUploadURLResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetFileUploadURLResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetFileUploadURLResponse struct {
	GetFileUploadURLResponse *TxsdGetFileUploadURLResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetFileUploadURLResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetFileUploadURLResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetFileUploadURLResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetFileUploadURLResponse instance.
func (me *XsdGoPkgHasElem_GetFileUploadURLResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetFileUploadURLResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetFileUploadURLResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetFileUploadURLResponse struct {
	GetFileUploadURLResponses []*TxsdGetFileUploadURLResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetFileUploadURLResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetFileUploadURLResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetFileUploadURLResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetFileUploadURLResponse instance.
func (me *XsdGoPkgHasElems_GetFileUploadURLResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetFileUploadURLResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetFileUploadURLResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdSearchHITsSearchHITsschema_Request_TSearchHITsRequest_ struct {
	Requests []*TSearchHITsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdSearchHITsSearchHITsschema_Request_TSearchHITsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdSearchHITsSearchHITsschema_Request_TSearchHITsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdSearchHITsSearchHITsschema_Request_TSearchHITsRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdSearchHITsSearchHITsschema_Request_TSearchHITsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdSearchHITsSearchHITsschema_Request_TSearchHITsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSearchHITs struct {
	XsdGoPkgHasElems_RequestsequenceTxsdSearchHITsSearchHITsschema_Request_TSearchHITsRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_
}

//	If the WalkHandlers.TxsdSearchHITs function is not nil (ie. was set by outside code), calls it with this TxsdSearchHITs instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdSearchHITs instance.
func (me *TxsdSearchHITs) Walk() (err error) {
	if fn := WalkHandlers.TxsdSearchHITs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdSearchHITsSearchHITsschema_Request_TSearchHITsRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SearchHITs struct {
	SearchHITs *TxsdSearchHITs `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchHITs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SearchHITs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SearchHITs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SearchHITs instance.
func (me *XsdGoPkgHasElem_SearchHITs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SearchHITs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SearchHITs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SearchHITs struct {
	SearchHITses []*TxsdSearchHITs `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchHITs"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SearchHITs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SearchHITs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SearchHITs instance.
func (me *XsdGoPkgHasElems_SearchHITs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SearchHITs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SearchHITses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSearchHITsResult struct {
	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_

	XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_

	XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_
}

//	If the WalkHandlers.TSearchHITsResult function is not nil (ie. was set by outside code), calls it with this TSearchHITsResult instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TSearchHITsResult instance.
func (me *TSearchHITsResult) Walk() (err error) {
	if fn := WalkHandlers.TSearchHITsResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_ struct {
	SearchHITsResults []*TSearchHITsResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchHITsResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_ instance.
func (me *XsdGoPkgHasElems_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SearchHITsResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSearchHITsResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_
}

//	If the WalkHandlers.TxsdSearchHITsResponse function is not nil (ie. was set by outside code), calls it with this TxsdSearchHITsResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSearchHITsResponse instance.
func (me *TxsdSearchHITsResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdSearchHITsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SearchHITsResponse struct {
	SearchHITsResponse *TxsdSearchHITsResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchHITsResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SearchHITsResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SearchHITsResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SearchHITsResponse instance.
func (me *XsdGoPkgHasElem_SearchHITsResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SearchHITsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SearchHITsResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SearchHITsResponse struct {
	SearchHITsResponses []*TxsdSearchHITsResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchHITsResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SearchHITsResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SearchHITsResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SearchHITsResponse instance.
func (me *XsdGoPkgHasElems_SearchHITsResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SearchHITsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SearchHITsResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGrantBonusGrantBonusschema_Request_TGrantBonusRequest_ struct {
	Requests []*TGrantBonusRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGrantBonusGrantBonusschema_Request_TGrantBonusRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGrantBonusGrantBonusschema_Request_TGrantBonusRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGrantBonusGrantBonusschema_Request_TGrantBonusRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGrantBonusGrantBonusschema_Request_TGrantBonusRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGrantBonusGrantBonusschema_Request_TGrantBonusRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGrantBonus struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGrantBonusGrantBonusschema_Request_TGrantBonusRequest_
}

//	If the WalkHandlers.TxsdGrantBonus function is not nil (ie. was set by outside code), calls it with this TxsdGrantBonus instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGrantBonus instance.
func (me *TxsdGrantBonus) Walk() (err error) {
	if fn := WalkHandlers.TxsdGrantBonus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGrantBonusGrantBonusschema_Request_TGrantBonusRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrantBonus struct {
	GrantBonuses []*TxsdGrantBonus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantBonus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrantBonus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrantBonus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrantBonus instance.
func (me *XsdGoPkgHasElems_GrantBonus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrantBonus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GrantBonuses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrantBonus struct {
	GrantBonus *TxsdGrantBonus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantBonus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrantBonus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrantBonus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GrantBonus instance.
func (me *XsdGoPkgHasElem_GrantBonus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrantBonus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GrantBonus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGrantBonusResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TGrantBonusResult function is not nil (ie. was set by outside code), calls it with this TGrantBonusResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TGrantBonusResult instance.
func (me *TGrantBonusResult) Walk() (err error) {
	if fn := WalkHandlers.TGrantBonusResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_ struct {
	GrantBonusResults []*TGrantBonusResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantBonusResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_ instance.
func (me *XsdGoPkgHasElems_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GrantBonusResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGrantBonusResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_
}

//	If the WalkHandlers.TxsdGrantBonusResponse function is not nil (ie. was set by outside code), calls it with this TxsdGrantBonusResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGrantBonusResponse instance.
func (me *TxsdGrantBonusResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGrantBonusResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrantBonusResponse struct {
	GrantBonusResponse *TxsdGrantBonusResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantBonusResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrantBonusResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrantBonusResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GrantBonusResponse instance.
func (me *XsdGoPkgHasElem_GrantBonusResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrantBonusResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GrantBonusResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrantBonusResponse struct {
	GrantBonusResponses []*TxsdGrantBonusResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantBonusResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrantBonusResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrantBonusResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrantBonusResponse instance.
func (me *XsdGoPkgHasElems_GrantBonusResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrantBonusResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GrantBonusResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetBonusPaymentsGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_ struct {
	Requests []*TGetBonusPaymentsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetBonusPaymentsGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetBonusPaymentsGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetBonusPaymentsGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetBonusPaymentsGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetBonusPaymentsGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetBonusPayments struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGetBonusPaymentsGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_
}

//	If the WalkHandlers.TxsdGetBonusPayments function is not nil (ie. was set by outside code), calls it with this TxsdGetBonusPayments instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetBonusPayments instance.
func (me *TxsdGetBonusPayments) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetBonusPayments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetBonusPaymentsGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetBonusPayments struct {
	GetBonusPayments *TxsdGetBonusPayments `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBonusPayments"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetBonusPayments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetBonusPayments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetBonusPayments instance.
func (me *XsdGoPkgHasElem_GetBonusPayments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetBonusPayments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetBonusPayments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetBonusPayments struct {
	GetBonusPaymentses []*TxsdGetBonusPayments `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBonusPayments"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetBonusPayments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetBonusPayments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetBonusPayments instance.
func (me *XsdGoPkgHasElems_GetBonusPayments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetBonusPayments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetBonusPaymentses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBonusPayment struct {
	XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_

	XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_

	XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_

	XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_
}

//	If the WalkHandlers.TBonusPayment function is not nil (ie. was set by outside code), calls it with this TBonusPayment instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TBonusPayment instance.
func (me *TBonusPayment) Walk() (err error) {
	if fn := WalkHandlers.TBonusPayment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_ struct {
	BonusPayments []*TBonusPayment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BonusPayment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_ instance.
func (me *XsdGoPkgHasElems_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BonusPayments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetBonusPaymentsResult struct {
	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_

	XsdGoPkgHasElems_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_
}

//	If the WalkHandlers.TGetBonusPaymentsResult function is not nil (ie. was set by outside code), calls it with this TGetBonusPaymentsResult instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TGetBonusPaymentsResult instance.
func (me *TGetBonusPaymentsResult) Walk() (err error) {
	if fn := WalkHandlers.TGetBonusPaymentsResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetBonusPaymentsResultsequenceTxsdGetBonusPaymentsResponseGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_ struct {
	GetBonusPaymentsResults []*TGetBonusPaymentsResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBonusPaymentsResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetBonusPaymentsResultsequenceTxsdGetBonusPaymentsResponseGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetBonusPaymentsResultsequenceTxsdGetBonusPaymentsResponseGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetBonusPaymentsResultsequenceTxsdGetBonusPaymentsResponseGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_ instance.
func (me *XsdGoPkgHasElems_GetBonusPaymentsResultsequenceTxsdGetBonusPaymentsResponseGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetBonusPaymentsResultsequenceTxsdGetBonusPaymentsResponseGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetBonusPaymentsResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetBonusPaymentsResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetBonusPaymentsResultsequenceTxsdGetBonusPaymentsResponseGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_
}

//	If the WalkHandlers.TxsdGetBonusPaymentsResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetBonusPaymentsResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetBonusPaymentsResponse instance.
func (me *TxsdGetBonusPaymentsResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetBonusPaymentsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GetBonusPaymentsResultsequenceTxsdGetBonusPaymentsResponseGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetBonusPaymentsResponse struct {
	GetBonusPaymentsResponse *TxsdGetBonusPaymentsResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBonusPaymentsResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetBonusPaymentsResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetBonusPaymentsResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetBonusPaymentsResponse instance.
func (me *XsdGoPkgHasElem_GetBonusPaymentsResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetBonusPaymentsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetBonusPaymentsResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetBonusPaymentsResponse struct {
	GetBonusPaymentsResponses []*TxsdGetBonusPaymentsResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBonusPaymentsResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetBonusPaymentsResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetBonusPaymentsResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetBonusPaymentsResponse instance.
func (me *XsdGoPkgHasElems_GetBonusPaymentsResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetBonusPaymentsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetBonusPaymentsResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdChangeHITTypeOfHITChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_ struct {
	Requests []*TChangeHITTypeOfHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdChangeHITTypeOfHITChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdChangeHITTypeOfHITChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdChangeHITTypeOfHITChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdChangeHITTypeOfHITChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdChangeHITTypeOfHITChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdChangeHITTypeOfHIT struct {
	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdChangeHITTypeOfHITChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_
}

//	If the WalkHandlers.TxsdChangeHITTypeOfHIT function is not nil (ie. was set by outside code), calls it with this TxsdChangeHITTypeOfHIT instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdChangeHITTypeOfHIT instance.
func (me *TxsdChangeHITTypeOfHIT) Walk() (err error) {
	if fn := WalkHandlers.TxsdChangeHITTypeOfHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdChangeHITTypeOfHITChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ChangeHITTypeOfHIT struct {
	ChangeHITTypeOfHIT *TxsdChangeHITTypeOfHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ChangeHITTypeOfHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ChangeHITTypeOfHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ChangeHITTypeOfHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ChangeHITTypeOfHIT instance.
func (me *XsdGoPkgHasElem_ChangeHITTypeOfHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ChangeHITTypeOfHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ChangeHITTypeOfHIT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ChangeHITTypeOfHIT struct {
	ChangeHITTypeOfHITs []*TxsdChangeHITTypeOfHIT `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ChangeHITTypeOfHIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ChangeHITTypeOfHIT function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ChangeHITTypeOfHIT instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ChangeHITTypeOfHIT instance.
func (me *XsdGoPkgHasElems_ChangeHITTypeOfHIT) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ChangeHITTypeOfHIT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ChangeHITTypeOfHITs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TChangeHITTypeOfHITResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TChangeHITTypeOfHITResult function is not nil (ie. was set by outside code), calls it with this TChangeHITTypeOfHITResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TChangeHITTypeOfHITResult instance.
func (me *TChangeHITTypeOfHITResult) Walk() (err error) {
	if fn := WalkHandlers.TChangeHITTypeOfHITResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ChangeHITTypeOfHITResultsequenceTxsdChangeHITTypeOfHITResponseChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_ struct {
	ChangeHITTypeOfHITResults []*TChangeHITTypeOfHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ChangeHITTypeOfHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ChangeHITTypeOfHITResultsequenceTxsdChangeHITTypeOfHITResponseChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ChangeHITTypeOfHITResultsequenceTxsdChangeHITTypeOfHITResponseChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ChangeHITTypeOfHITResultsequenceTxsdChangeHITTypeOfHITResponseChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_ instance.
func (me *XsdGoPkgHasElems_ChangeHITTypeOfHITResultsequenceTxsdChangeHITTypeOfHITResponseChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ChangeHITTypeOfHITResultsequenceTxsdChangeHITTypeOfHITResponseChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ChangeHITTypeOfHITResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdChangeHITTypeOfHITResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_ChangeHITTypeOfHITResultsequenceTxsdChangeHITTypeOfHITResponseChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_
}

//	If the WalkHandlers.TxsdChangeHITTypeOfHITResponse function is not nil (ie. was set by outside code), calls it with this TxsdChangeHITTypeOfHITResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdChangeHITTypeOfHITResponse instance.
func (me *TxsdChangeHITTypeOfHITResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdChangeHITTypeOfHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ChangeHITTypeOfHITResultsequenceTxsdChangeHITTypeOfHITResponseChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ChangeHITTypeOfHITResponse struct {
	ChangeHITTypeOfHITResponse *TxsdChangeHITTypeOfHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ChangeHITTypeOfHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ChangeHITTypeOfHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ChangeHITTypeOfHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ChangeHITTypeOfHITResponse instance.
func (me *XsdGoPkgHasElem_ChangeHITTypeOfHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ChangeHITTypeOfHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ChangeHITTypeOfHITResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ChangeHITTypeOfHITResponse struct {
	ChangeHITTypeOfHITResponses []*TxsdChangeHITTypeOfHITResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ChangeHITTypeOfHITResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ChangeHITTypeOfHITResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ChangeHITTypeOfHITResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ChangeHITTypeOfHITResponse instance.
func (me *XsdGoPkgHasElems_ChangeHITTypeOfHITResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ChangeHITTypeOfHITResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ChangeHITTypeOfHITResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_ struct {
	Requests []*TCreateQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCreateQualificationType struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_
}

//	If the WalkHandlers.TxsdCreateQualificationType function is not nil (ie. was set by outside code), calls it with this TxsdCreateQualificationType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdCreateQualificationType instance.
func (me *TxsdCreateQualificationType) Walk() (err error) {
	if fn := WalkHandlers.TxsdCreateQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CreateQualificationType struct {
	CreateQualificationType *TxsdCreateQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CreateQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CreateQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CreateQualificationType instance.
func (me *XsdGoPkgHasElem_CreateQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CreateQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CreateQualificationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CreateQualificationType struct {
	CreateQualificationTypes []*TxsdCreateQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CreateQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CreateQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CreateQualificationType instance.
func (me *XsdGoPkgHasElems_CreateQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CreateQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CreateQualificationTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_ struct {
	IsRequestable xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 IsRequestable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TQualificationType struct {
	XsdGoPkgHasElem_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_

	XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_

	XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_

	XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_

	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_

	XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_

	XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_

	XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_

	XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_

	XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_

	XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_
}

//	If the WalkHandlers.TQualificationType function is not nil (ie. was set by outside code), calls it with this TQualificationType instance as the single argument. Then calls the Walk() method on 14/14 embed(s) and 0/0 field(s) belonging to this TQualificationType instance.
func (me *TQualificationType) Walk() (err error) {
	if fn := WalkHandlers.TQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_ struct {
	QualificationTypes []*TQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_ instance.
func (me *XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.QualificationTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCreateQualificationTypeResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_
}

//	If the WalkHandlers.TxsdCreateQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this TxsdCreateQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdCreateQualificationTypeResponse instance.
func (me *TxsdCreateQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdCreateQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CreateQualificationTypeResponse struct {
	CreateQualificationTypeResponses []*TxsdCreateQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CreateQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CreateQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CreateQualificationTypeResponse instance.
func (me *XsdGoPkgHasElems_CreateQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CreateQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CreateQualificationTypeResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CreateQualificationTypeResponse struct {
	CreateQualificationTypeResponse *TxsdCreateQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CreateQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CreateQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CreateQualificationTypeResponse instance.
func (me *XsdGoPkgHasElem_CreateQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CreateQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CreateQualificationTypeResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_ struct {
	Requests []*TDisposeQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDisposeQualificationType struct {
	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_
}

//	If the WalkHandlers.TxsdDisposeQualificationType function is not nil (ie. was set by outside code), calls it with this TxsdDisposeQualificationType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdDisposeQualificationType instance.
func (me *TxsdDisposeQualificationType) Walk() (err error) {
	if fn := WalkHandlers.TxsdDisposeQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisposeQualificationType struct {
	DisposeQualificationType *TxsdDisposeQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisposeQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisposeQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisposeQualificationType instance.
func (me *XsdGoPkgHasElem_DisposeQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisposeQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisposeQualificationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisposeQualificationType struct {
	DisposeQualificationTypes []*TxsdDisposeQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisposeQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisposeQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisposeQualificationType instance.
func (me *XsdGoPkgHasElems_DisposeQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisposeQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisposeQualificationTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDisposeQualificationTypeResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TDisposeQualificationTypeResult function is not nil (ie. was set by outside code), calls it with this TDisposeQualificationTypeResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TDisposeQualificationTypeResult instance.
func (me *TDisposeQualificationTypeResult) Walk() (err error) {
	if fn := WalkHandlers.TDisposeQualificationTypeResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_ struct {
	DisposeQualificationTypeResults []*TDisposeQualificationTypeResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeQualificationTypeResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_ instance.
func (me *XsdGoPkgHasElems_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisposeQualificationTypeResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDisposeQualificationTypeResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_
}

//	If the WalkHandlers.TxsdDisposeQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this TxsdDisposeQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdDisposeQualificationTypeResponse instance.
func (me *TxsdDisposeQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdDisposeQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisposeQualificationTypeResponse struct {
	DisposeQualificationTypeResponse *TxsdDisposeQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisposeQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisposeQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisposeQualificationTypeResponse instance.
func (me *XsdGoPkgHasElem_DisposeQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisposeQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisposeQualificationTypeResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisposeQualificationTypeResponse struct {
	DisposeQualificationTypeResponses []*TxsdDisposeQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisposeQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisposeQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisposeQualificationTypeResponse instance.
func (me *XsdGoPkgHasElems_DisposeQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisposeQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisposeQualificationTypeResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationRequestsGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_ struct {
	Requests []*TGetQualificationRequestsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationRequestsGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationRequestsGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationRequestsGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationRequestsGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationRequestsGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetQualificationRequests struct {
	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationRequestsGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_
}

//	If the WalkHandlers.TxsdGetQualificationRequests function is not nil (ie. was set by outside code), calls it with this TxsdGetQualificationRequests instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetQualificationRequests instance.
func (me *TxsdGetQualificationRequests) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetQualificationRequests; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationRequestsGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationRequests struct {
	GetQualificationRequests *TxsdGetQualificationRequests `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationRequests"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationRequests function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationRequests instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationRequests instance.
func (me *XsdGoPkgHasElem_GetQualificationRequests) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationRequests; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationRequests.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationRequests struct {
	GetQualificationRequestses []*TxsdGetQualificationRequests `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationRequests"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationRequests function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationRequests instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationRequests instance.
func (me *XsdGoPkgHasElems_GetQualificationRequests) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationRequests; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationRequestses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TQualificationRequest struct {
	XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_

	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_

	XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_

	XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_

	XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_
}

//	If the WalkHandlers.TQualificationRequest function is not nil (ie. was set by outside code), calls it with this TQualificationRequest instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TQualificationRequest instance.
func (me *TQualificationRequest) Walk() (err error) {
	if fn := WalkHandlers.TQualificationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_ struct {
	QualificationRequests []*TQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_ instance.
func (me *XsdGoPkgHasElems_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.QualificationRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetQualificationRequestsResult struct {
	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElems_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_

	XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_
}

//	If the WalkHandlers.TGetQualificationRequestsResult function is not nil (ie. was set by outside code), calls it with this TGetQualificationRequestsResult instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TGetQualificationRequestsResult instance.
func (me *TGetQualificationRequestsResult) Walk() (err error) {
	if fn := WalkHandlers.TGetQualificationRequestsResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_ struct {
	GetQualificationRequestsResults []*TGetQualificationRequestsResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationRequestsResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_ instance.
func (me *XsdGoPkgHasElems_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationRequestsResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetQualificationRequestsResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_
}

//	If the WalkHandlers.TxsdGetQualificationRequestsResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetQualificationRequestsResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetQualificationRequestsResponse instance.
func (me *TxsdGetQualificationRequestsResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetQualificationRequestsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationRequestsResponse struct {
	GetQualificationRequestsResponse *TxsdGetQualificationRequestsResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationRequestsResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationRequestsResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationRequestsResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationRequestsResponse instance.
func (me *XsdGoPkgHasElem_GetQualificationRequestsResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationRequestsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationRequestsResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationRequestsResponse struct {
	GetQualificationRequestsResponses []*TxsdGetQualificationRequestsResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationRequestsResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationRequestsResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationRequestsResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationRequestsResponse instance.
func (me *XsdGoPkgHasElems_GetQualificationRequestsResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationRequestsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationRequestsResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_ struct {
	Requests []*TRejectQualificationRequestRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRejectQualificationRequest struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_
}

//	If the WalkHandlers.TxsdRejectQualificationRequest function is not nil (ie. was set by outside code), calls it with this TxsdRejectQualificationRequest instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdRejectQualificationRequest instance.
func (me *TxsdRejectQualificationRequest) Walk() (err error) {
	if fn := WalkHandlers.TxsdRejectQualificationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RejectQualificationRequest struct {
	RejectQualificationRequest *TxsdRejectQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectQualificationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RejectQualificationRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RejectQualificationRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RejectQualificationRequest instance.
func (me *XsdGoPkgHasElem_RejectQualificationRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RejectQualificationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RejectQualificationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RejectQualificationRequest struct {
	RejectQualificationRequests []*TxsdRejectQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectQualificationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RejectQualificationRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RejectQualificationRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RejectQualificationRequest instance.
func (me *XsdGoPkgHasElems_RejectQualificationRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RejectQualificationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RejectQualificationRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRejectQualificationRequestResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TRejectQualificationRequestResult function is not nil (ie. was set by outside code), calls it with this TRejectQualificationRequestResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TRejectQualificationRequestResult instance.
func (me *TRejectQualificationRequestResult) Walk() (err error) {
	if fn := WalkHandlers.TRejectQualificationRequestResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_ struct {
	RejectQualificationRequestResults []*TRejectQualificationRequestResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectQualificationRequestResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_ instance.
func (me *XsdGoPkgHasElems_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RejectQualificationRequestResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRejectQualificationRequestResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_
}

//	If the WalkHandlers.TxsdRejectQualificationRequestResponse function is not nil (ie. was set by outside code), calls it with this TxsdRejectQualificationRequestResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRejectQualificationRequestResponse instance.
func (me *TxsdRejectQualificationRequestResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdRejectQualificationRequestResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RejectQualificationRequestResponse struct {
	RejectQualificationRequestResponse *TxsdRejectQualificationRequestResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectQualificationRequestResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RejectQualificationRequestResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RejectQualificationRequestResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RejectQualificationRequestResponse instance.
func (me *XsdGoPkgHasElem_RejectQualificationRequestResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RejectQualificationRequestResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RejectQualificationRequestResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RejectQualificationRequestResponse struct {
	RejectQualificationRequestResponses []*TxsdRejectQualificationRequestResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectQualificationRequestResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RejectQualificationRequestResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RejectQualificationRequestResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RejectQualificationRequestResponse instance.
func (me *XsdGoPkgHasElems_RejectQualificationRequestResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RejectQualificationRequestResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RejectQualificationRequestResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGrantQualificationGrantQualificationschema_Request_TGrantQualificationRequest_ struct {
	Requests []*TGrantQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGrantQualificationGrantQualificationschema_Request_TGrantQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGrantQualificationGrantQualificationschema_Request_TGrantQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGrantQualificationGrantQualificationschema_Request_TGrantQualificationRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGrantQualificationGrantQualificationschema_Request_TGrantQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGrantQualificationGrantQualificationschema_Request_TGrantQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGrantQualification struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGrantQualificationGrantQualificationschema_Request_TGrantQualificationRequest_
}

//	If the WalkHandlers.TxsdGrantQualification function is not nil (ie. was set by outside code), calls it with this TxsdGrantQualification instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGrantQualification instance.
func (me *TxsdGrantQualification) Walk() (err error) {
	if fn := WalkHandlers.TxsdGrantQualification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGrantQualificationGrantQualificationschema_Request_TGrantQualificationRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrantQualification struct {
	GrantQualification *TxsdGrantQualification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantQualification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrantQualification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrantQualification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GrantQualification instance.
func (me *XsdGoPkgHasElem_GrantQualification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrantQualification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GrantQualification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrantQualification struct {
	GrantQualifications []*TxsdGrantQualification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantQualification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrantQualification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrantQualification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrantQualification instance.
func (me *XsdGoPkgHasElems_GrantQualification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrantQualification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GrantQualifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGrantQualificationResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TGrantQualificationResult function is not nil (ie. was set by outside code), calls it with this TGrantQualificationResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TGrantQualificationResult instance.
func (me *TGrantQualificationResult) Walk() (err error) {
	if fn := WalkHandlers.TGrantQualificationResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrantQualificationResultsequenceTxsdGrantQualificationResponseGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_ struct {
	GrantQualificationResults []*TGrantQualificationResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantQualificationResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrantQualificationResultsequenceTxsdGrantQualificationResponseGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrantQualificationResultsequenceTxsdGrantQualificationResponseGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrantQualificationResultsequenceTxsdGrantQualificationResponseGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_ instance.
func (me *XsdGoPkgHasElems_GrantQualificationResultsequenceTxsdGrantQualificationResponseGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrantQualificationResultsequenceTxsdGrantQualificationResponseGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GrantQualificationResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGrantQualificationResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GrantQualificationResultsequenceTxsdGrantQualificationResponseGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_
}

//	If the WalkHandlers.TxsdGrantQualificationResponse function is not nil (ie. was set by outside code), calls it with this TxsdGrantQualificationResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGrantQualificationResponse instance.
func (me *TxsdGrantQualificationResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGrantQualificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GrantQualificationResultsequenceTxsdGrantQualificationResponseGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrantQualificationResponse struct {
	GrantQualificationResponse *TxsdGrantQualificationResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantQualificationResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrantQualificationResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrantQualificationResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GrantQualificationResponse instance.
func (me *XsdGoPkgHasElem_GrantQualificationResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrantQualificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GrantQualificationResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrantQualificationResponse struct {
	GrantQualificationResponses []*TxsdGrantQualificationResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantQualificationResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrantQualificationResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrantQualificationResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrantQualificationResponse instance.
func (me *XsdGoPkgHasElems_GrantQualificationResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrantQualificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GrantQualificationResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_ struct {
	Requests []*TAssignQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAssignQualification struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_
}

//	If the WalkHandlers.TxsdAssignQualification function is not nil (ie. was set by outside code), calls it with this TxsdAssignQualification instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdAssignQualification instance.
func (me *TxsdAssignQualification) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssignQualification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssignQualification struct {
	AssignQualifications []*TxsdAssignQualification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignQualification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssignQualification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssignQualification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssignQualification instance.
func (me *XsdGoPkgHasElems_AssignQualification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssignQualification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssignQualifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssignQualification struct {
	AssignQualification *TxsdAssignQualification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignQualification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssignQualification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssignQualification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AssignQualification instance.
func (me *XsdGoPkgHasElem_AssignQualification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssignQualification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssignQualification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAssignQualificationResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TAssignQualificationResult function is not nil (ie. was set by outside code), calls it with this TAssignQualificationResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TAssignQualificationResult instance.
func (me *TAssignQualificationResult) Walk() (err error) {
	if fn := WalkHandlers.TAssignQualificationResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssignQualificationResultsequenceTxsdAssignQualificationResponseAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_ struct {
	AssignQualificationResults []*TAssignQualificationResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignQualificationResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssignQualificationResultsequenceTxsdAssignQualificationResponseAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssignQualificationResultsequenceTxsdAssignQualificationResponseAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssignQualificationResultsequenceTxsdAssignQualificationResponseAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_ instance.
func (me *XsdGoPkgHasElems_AssignQualificationResultsequenceTxsdAssignQualificationResponseAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssignQualificationResultsequenceTxsdAssignQualificationResponseAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssignQualificationResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAssignQualificationResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_AssignQualificationResultsequenceTxsdAssignQualificationResponseAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_
}

//	If the WalkHandlers.TxsdAssignQualificationResponse function is not nil (ie. was set by outside code), calls it with this TxsdAssignQualificationResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdAssignQualificationResponse instance.
func (me *TxsdAssignQualificationResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssignQualificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssignQualificationResultsequenceTxsdAssignQualificationResponseAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssignQualificationResponse struct {
	AssignQualificationResponse *TxsdAssignQualificationResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignQualificationResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssignQualificationResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssignQualificationResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AssignQualificationResponse instance.
func (me *XsdGoPkgHasElem_AssignQualificationResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssignQualificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssignQualificationResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssignQualificationResponse struct {
	AssignQualificationResponses []*TxsdAssignQualificationResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignQualificationResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssignQualificationResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssignQualificationResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssignQualificationResponse instance.
func (me *XsdGoPkgHasElems_AssignQualificationResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssignQualificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssignQualificationResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_ struct {
	Requests []*TRevokeQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRevokeQualification struct {
	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_
}

//	If the WalkHandlers.TxsdRevokeQualification function is not nil (ie. was set by outside code), calls it with this TxsdRevokeQualification instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdRevokeQualification instance.
func (me *TxsdRevokeQualification) Walk() (err error) {
	if fn := WalkHandlers.TxsdRevokeQualification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RevokeQualification struct {
	RevokeQualification *TxsdRevokeQualification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RevokeQualification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RevokeQualification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RevokeQualification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RevokeQualification instance.
func (me *XsdGoPkgHasElem_RevokeQualification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RevokeQualification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RevokeQualification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RevokeQualification struct {
	RevokeQualifications []*TxsdRevokeQualification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RevokeQualification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RevokeQualification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RevokeQualification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RevokeQualification instance.
func (me *XsdGoPkgHasElems_RevokeQualification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RevokeQualification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RevokeQualifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRevokeQualificationResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TRevokeQualificationResult function is not nil (ie. was set by outside code), calls it with this TRevokeQualificationResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TRevokeQualificationResult instance.
func (me *TRevokeQualificationResult) Walk() (err error) {
	if fn := WalkHandlers.TRevokeQualificationResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_ struct {
	RevokeQualificationResults []*TRevokeQualificationResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RevokeQualificationResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_ instance.
func (me *XsdGoPkgHasElems_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RevokeQualificationResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRevokeQualificationResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_
}

//	If the WalkHandlers.TxsdRevokeQualificationResponse function is not nil (ie. was set by outside code), calls it with this TxsdRevokeQualificationResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRevokeQualificationResponse instance.
func (me *TxsdRevokeQualificationResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdRevokeQualificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RevokeQualificationResponse struct {
	RevokeQualificationResponses []*TxsdRevokeQualificationResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RevokeQualificationResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RevokeQualificationResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RevokeQualificationResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RevokeQualificationResponse instance.
func (me *XsdGoPkgHasElems_RevokeQualificationResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RevokeQualificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RevokeQualificationResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RevokeQualificationResponse struct {
	RevokeQualificationResponse *TxsdRevokeQualificationResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RevokeQualificationResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RevokeQualificationResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RevokeQualificationResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RevokeQualificationResponse instance.
func (me *XsdGoPkgHasElem_RevokeQualificationResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RevokeQualificationResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RevokeQualificationResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TUpdateQualificationScoreRequest struct {
	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_

	XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_

	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TUpdateQualificationScoreRequest function is not nil (ie. was set by outside code), calls it with this TUpdateQualificationScoreRequest instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TUpdateQualificationScoreRequest instance.
func (me *TUpdateQualificationScoreRequest) Walk() (err error) {
	if fn := WalkHandlers.TUpdateQualificationScoreRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_ struct {
	Requests []*TUpdateQualificationScoreRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdUpdateQualificationScore struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_
}

//	If the WalkHandlers.TxsdUpdateQualificationScore function is not nil (ie. was set by outside code), calls it with this TxsdUpdateQualificationScore instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdUpdateQualificationScore instance.
func (me *TxsdUpdateQualificationScore) Walk() (err error) {
	if fn := WalkHandlers.TxsdUpdateQualificationScore; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UpdateQualificationScore struct {
	UpdateQualificationScore *TxsdUpdateQualificationScore `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationScore"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UpdateQualificationScore function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UpdateQualificationScore instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UpdateQualificationScore instance.
func (me *XsdGoPkgHasElem_UpdateQualificationScore) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UpdateQualificationScore; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UpdateQualificationScore.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UpdateQualificationScore struct {
	UpdateQualificationScores []*TxsdUpdateQualificationScore `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationScore"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UpdateQualificationScore function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UpdateQualificationScore instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UpdateQualificationScore instance.
func (me *XsdGoPkgHasElems_UpdateQualificationScore) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UpdateQualificationScore; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UpdateQualificationScores {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TUpdateQualificationScoreResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TUpdateQualificationScoreResult function is not nil (ie. was set by outside code), calls it with this TUpdateQualificationScoreResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TUpdateQualificationScoreResult instance.
func (me *TUpdateQualificationScoreResult) Walk() (err error) {
	if fn := WalkHandlers.TUpdateQualificationScoreResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_ struct {
	UpdateQualificationScoreResults []*TUpdateQualificationScoreResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationScoreResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_ instance.
func (me *XsdGoPkgHasElems_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UpdateQualificationScoreResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdUpdateQualificationScoreResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_
}

//	If the WalkHandlers.TxsdUpdateQualificationScoreResponse function is not nil (ie. was set by outside code), calls it with this TxsdUpdateQualificationScoreResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdUpdateQualificationScoreResponse instance.
func (me *TxsdUpdateQualificationScoreResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdUpdateQualificationScoreResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UpdateQualificationScoreResponse struct {
	UpdateQualificationScoreResponse *TxsdUpdateQualificationScoreResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationScoreResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UpdateQualificationScoreResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UpdateQualificationScoreResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UpdateQualificationScoreResponse instance.
func (me *XsdGoPkgHasElem_UpdateQualificationScoreResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UpdateQualificationScoreResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UpdateQualificationScoreResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UpdateQualificationScoreResponse struct {
	UpdateQualificationScoreResponses []*TxsdUpdateQualificationScoreResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationScoreResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UpdateQualificationScoreResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UpdateQualificationScoreResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UpdateQualificationScoreResponse instance.
func (me *XsdGoPkgHasElems_UpdateQualificationScoreResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UpdateQualificationScoreResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UpdateQualificationScoreResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_ struct {
	Requests []*TGetQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetQualificationType struct {
	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_
}

//	If the WalkHandlers.TxsdGetQualificationType function is not nil (ie. was set by outside code), calls it with this TxsdGetQualificationType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetQualificationType instance.
func (me *TxsdGetQualificationType) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationType struct {
	GetQualificationType *TxsdGetQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationType instance.
func (me *XsdGoPkgHasElem_GetQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationType struct {
	GetQualificationTypes []*TxsdGetQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationType instance.
func (me *XsdGoPkgHasElems_GetQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetQualificationTypeResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_
}

//	If the WalkHandlers.TxsdGetQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetQualificationTypeResponse instance.
func (me *TxsdGetQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationTypeResponse struct {
	GetQualificationTypeResponse *TxsdGetQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationTypeResponse instance.
func (me *XsdGoPkgHasElem_GetQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationTypeResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationTypeResponse struct {
	GetQualificationTypeResponses []*TxsdGetQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationTypeResponse instance.
func (me *XsdGoPkgHasElems_GetQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationTypeResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetQualificationScoreRequest struct {
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_

	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_

	XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_
}

//	If the WalkHandlers.TGetQualificationScoreRequest function is not nil (ie. was set by outside code), calls it with this TGetQualificationScoreRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TGetQualificationScoreRequest instance.
func (me *TGetQualificationScoreRequest) Walk() (err error) {
	if fn := WalkHandlers.TGetQualificationScoreRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_ struct {
	Requests []*TGetQualificationScoreRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetQualificationScore struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_
}

//	If the WalkHandlers.TxsdGetQualificationScore function is not nil (ie. was set by outside code), calls it with this TxsdGetQualificationScore instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetQualificationScore instance.
func (me *TxsdGetQualificationScore) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetQualificationScore; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationScore struct {
	GetQualificationScore *TxsdGetQualificationScore `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationScore"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationScore function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationScore instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationScore instance.
func (me *XsdGoPkgHasElem_GetQualificationScore) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationScore; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationScore.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationScore struct {
	GetQualificationScores []*TxsdGetQualificationScore `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationScore"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationScore function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationScore instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationScore instance.
func (me *XsdGoPkgHasElems_GetQualificationScore) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationScore; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationScores {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetQualificationScoreResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_
}

//	If the WalkHandlers.TxsdGetQualificationScoreResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetQualificationScoreResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetQualificationScoreResponse instance.
func (me *TxsdGetQualificationScoreResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetQualificationScoreResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationScoreResponse struct {
	GetQualificationScoreResponse *TxsdGetQualificationScoreResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationScoreResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationScoreResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationScoreResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationScoreResponse instance.
func (me *XsdGoPkgHasElem_GetQualificationScoreResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationScoreResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationScoreResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationScoreResponse struct {
	GetQualificationScoreResponses []*TxsdGetQualificationScoreResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationScoreResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationScoreResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationScoreResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationScoreResponse instance.
func (me *XsdGoPkgHasElems_GetQualificationScoreResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationScoreResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationScoreResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdSearchQualificationTypesSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_ struct {
	Requests []*TSearchQualificationTypesRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdSearchQualificationTypesSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdSearchQualificationTypesSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdSearchQualificationTypesSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdSearchQualificationTypesSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdSearchQualificationTypesSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSearchQualificationTypes struct {
	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdSearchQualificationTypesSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_
}

//	If the WalkHandlers.TxsdSearchQualificationTypes function is not nil (ie. was set by outside code), calls it with this TxsdSearchQualificationTypes instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdSearchQualificationTypes instance.
func (me *TxsdSearchQualificationTypes) Walk() (err error) {
	if fn := WalkHandlers.TxsdSearchQualificationTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdSearchQualificationTypesSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SearchQualificationTypes struct {
	SearchQualificationTypes *TxsdSearchQualificationTypes `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchQualificationTypes"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SearchQualificationTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SearchQualificationTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SearchQualificationTypes instance.
func (me *XsdGoPkgHasElem_SearchQualificationTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SearchQualificationTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SearchQualificationTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SearchQualificationTypes struct {
	SearchQualificationTypeses []*TxsdSearchQualificationTypes `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchQualificationTypes"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SearchQualificationTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SearchQualificationTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SearchQualificationTypes instance.
func (me *XsdGoPkgHasElems_SearchQualificationTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SearchQualificationTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SearchQualificationTypeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSearchQualificationTypesResult struct {
	XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_
}

//	If the WalkHandlers.TSearchQualificationTypesResult function is not nil (ie. was set by outside code), calls it with this TSearchQualificationTypesResult instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TSearchQualificationTypesResult instance.
func (me *TSearchQualificationTypesResult) Walk() (err error) {
	if fn := WalkHandlers.TSearchQualificationTypesResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_ struct {
	SearchQualificationTypesResults []*TSearchQualificationTypesResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchQualificationTypesResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_ instance.
func (me *XsdGoPkgHasElems_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SearchQualificationTypesResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSearchQualificationTypesResponse struct {
	XsdGoPkgHasElems_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_

	XsdGoPkgHasElem_OperationRequest
}

//	If the WalkHandlers.TxsdSearchQualificationTypesResponse function is not nil (ie. was set by outside code), calls it with this TxsdSearchQualificationTypesResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSearchQualificationTypesResponse instance.
func (me *TxsdSearchQualificationTypesResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdSearchQualificationTypesResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SearchQualificationTypesResponse struct {
	SearchQualificationTypesResponse *TxsdSearchQualificationTypesResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchQualificationTypesResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SearchQualificationTypesResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SearchQualificationTypesResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SearchQualificationTypesResponse instance.
func (me *XsdGoPkgHasElem_SearchQualificationTypesResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SearchQualificationTypesResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SearchQualificationTypesResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SearchQualificationTypesResponse struct {
	SearchQualificationTypesResponses []*TxsdSearchQualificationTypesResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchQualificationTypesResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SearchQualificationTypesResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SearchQualificationTypesResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SearchQualificationTypesResponse instance.
func (me *XsdGoPkgHasElems_SearchQualificationTypesResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SearchQualificationTypesResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SearchQualificationTypesResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_ struct {
	Requests []*TUpdateQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdUpdateQualificationType struct {
	XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_
}

//	If the WalkHandlers.TxsdUpdateQualificationType function is not nil (ie. was set by outside code), calls it with this TxsdUpdateQualificationType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdUpdateQualificationType instance.
func (me *TxsdUpdateQualificationType) Walk() (err error) {
	if fn := WalkHandlers.TxsdUpdateQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UpdateQualificationType struct {
	UpdateQualificationType *TxsdUpdateQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UpdateQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UpdateQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UpdateQualificationType instance.
func (me *XsdGoPkgHasElem_UpdateQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UpdateQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UpdateQualificationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UpdateQualificationType struct {
	UpdateQualificationTypes []*TxsdUpdateQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UpdateQualificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UpdateQualificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UpdateQualificationType instance.
func (me *XsdGoPkgHasElems_UpdateQualificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UpdateQualificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UpdateQualificationTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdUpdateQualificationTypeResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_
}

//	If the WalkHandlers.TxsdUpdateQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this TxsdUpdateQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdUpdateQualificationTypeResponse instance.
func (me *TxsdUpdateQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdUpdateQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UpdateQualificationTypeResponse struct {
	UpdateQualificationTypeResponse *TxsdUpdateQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UpdateQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UpdateQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UpdateQualificationTypeResponse instance.
func (me *XsdGoPkgHasElem_UpdateQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UpdateQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UpdateQualificationTypeResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UpdateQualificationTypeResponse struct {
	UpdateQualificationTypeResponses []*TxsdUpdateQualificationTypeResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationTypeResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UpdateQualificationTypeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UpdateQualificationTypeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UpdateQualificationTypeResponse instance.
func (me *XsdGoPkgHasElems_UpdateQualificationTypeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UpdateQualificationTypeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UpdateQualificationTypeResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetAccountBalanceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_ struct {
	Requests []*TGetAccountBalanceRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetAccountBalanceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetAccountBalanceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetAccountBalanceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetAccountBalanceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetAccountBalanceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetAccountBalance struct {
	XsdGoPkgHasElems_RequestsequenceTxsdGetAccountBalanceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_
}

//	If the WalkHandlers.TxsdGetAccountBalance function is not nil (ie. was set by outside code), calls it with this TxsdGetAccountBalance instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetAccountBalance instance.
func (me *TxsdGetAccountBalance) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetAccountBalance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetAccountBalanceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAccountBalance struct {
	GetAccountBalance *TxsdGetAccountBalance `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAccountBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAccountBalance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAccountBalance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAccountBalance instance.
func (me *XsdGoPkgHasElem_GetAccountBalance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAccountBalance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAccountBalance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAccountBalance struct {
	GetAccountBalances []*TxsdGetAccountBalance `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAccountBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAccountBalance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAccountBalance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAccountBalance instance.
func (me *XsdGoPkgHasElems_GetAccountBalance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAccountBalance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAccountBalances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_ struct {
	AvailableBalance *TPrice `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AvailableBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_ instance.
func (me *XsdGoPkgHasElem_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AvailableBalance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_ struct {
	OnHoldBalance *TPrice `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 OnHoldBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_ instance.
func (me *XsdGoPkgHasElem_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OnHoldBalance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetAccountBalanceResult struct {
	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_

	XsdGoPkgHasElem_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_
}

//	If the WalkHandlers.TGetAccountBalanceResult function is not nil (ie. was set by outside code), calls it with this TGetAccountBalanceResult instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TGetAccountBalanceResult instance.
func (me *TGetAccountBalanceResult) Walk() (err error) {
	if fn := WalkHandlers.TGetAccountBalanceResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAccountBalanceResultsequenceTxsdGetAccountBalanceResponseGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_ struct {
	GetAccountBalanceResults []*TGetAccountBalanceResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAccountBalanceResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAccountBalanceResultsequenceTxsdGetAccountBalanceResponseGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAccountBalanceResultsequenceTxsdGetAccountBalanceResponseGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAccountBalanceResultsequenceTxsdGetAccountBalanceResponseGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_ instance.
func (me *XsdGoPkgHasElems_GetAccountBalanceResultsequenceTxsdGetAccountBalanceResponseGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAccountBalanceResultsequenceTxsdGetAccountBalanceResponseGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAccountBalanceResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetAccountBalanceResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetAccountBalanceResultsequenceTxsdGetAccountBalanceResponseGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_
}

//	If the WalkHandlers.TxsdGetAccountBalanceResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetAccountBalanceResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetAccountBalanceResponse instance.
func (me *TxsdGetAccountBalanceResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetAccountBalanceResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GetAccountBalanceResultsequenceTxsdGetAccountBalanceResponseGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAccountBalanceResponse struct {
	GetAccountBalanceResponse *TxsdGetAccountBalanceResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAccountBalanceResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAccountBalanceResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAccountBalanceResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAccountBalanceResponse instance.
func (me *XsdGoPkgHasElem_GetAccountBalanceResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAccountBalanceResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAccountBalanceResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAccountBalanceResponse struct {
	GetAccountBalanceResponses []*TxsdGetAccountBalanceResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAccountBalanceResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAccountBalanceResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAccountBalanceResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAccountBalanceResponse instance.
func (me *XsdGoPkgHasElems_GetAccountBalanceResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAccountBalanceResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAccountBalanceResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterStatisticGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_ struct {
	Requests []*TGetRequesterStatisticRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterStatisticGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterStatisticGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterStatisticGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterStatisticGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterStatisticGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetRequesterStatistic struct {
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterStatisticGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_
}

//	If the WalkHandlers.TxsdGetRequesterStatistic function is not nil (ie. was set by outside code), calls it with this TxsdGetRequesterStatistic instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetRequesterStatistic instance.
func (me *TxsdGetRequesterStatistic) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetRequesterStatistic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterStatisticGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetRequesterStatistic struct {
	GetRequesterStatistic *TxsdGetRequesterStatistic `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterStatistic"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetRequesterStatistic function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetRequesterStatistic instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetRequesterStatistic instance.
func (me *XsdGoPkgHasElem_GetRequesterStatistic) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetRequesterStatistic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetRequesterStatistic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetRequesterStatistic struct {
	GetRequesterStatistics []*TxsdGetRequesterStatistic `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterStatistic"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetRequesterStatistic function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetRequesterStatistic instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetRequesterStatistic instance.
func (me *XsdGoPkgHasElems_GetRequesterStatistic) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetRequesterStatistic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetRequesterStatistics {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DatesequenceDataPointschema_Date_XsdtDateTime_ struct {
	Date xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Date"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DatesequenceDataPointschema_Date_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DatesequenceDataPointschema_Date_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DatesequenceDataPointschema_Date_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_DatesequenceDataPointschema_Date_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DatesequenceDataPointschema_Date_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LongValuesequenceDataPointschema_LongValue_XsdtLong_ struct {
	LongValue xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 LongValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LongValuesequenceDataPointschema_LongValue_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LongValuesequenceDataPointschema_LongValue_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LongValuesequenceDataPointschema_LongValue_XsdtLong_ instance.
func (me *XsdGoPkgHasElem_LongValuesequenceDataPointschema_LongValue_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LongValuesequenceDataPointschema_LongValue_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_ struct {
	DoubleValue xsdt.Double `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DoubleValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_ instance.
func (me *XsdGoPkgHasElem_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDataPoint struct {
	XsdGoPkgHasElem_LongValuesequenceDataPointschema_LongValue_XsdtLong_

	XsdGoPkgHasElem_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_

	XsdGoPkgHasElem_DatesequenceDataPointschema_Date_XsdtDateTime_
}

//	If the WalkHandlers.TDataPoint function is not nil (ie. was set by outside code), calls it with this TDataPoint instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TDataPoint instance.
func (me *TDataPoint) Walk() (err error) {
	if fn := WalkHandlers.TDataPoint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DatesequenceDataPointschema_Date_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongValuesequenceDataPointschema_LongValue_XsdtLong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_ struct {
	DataPoints []*TDataPoint `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DataPoint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_ instance.
func (me *XsdGoPkgHasElems_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataPoints {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetStatisticResult struct {
	XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElems_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_

	XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_

	XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_
}

//	If the WalkHandlers.TGetStatisticResult function is not nil (ie. was set by outside code), calls it with this TGetStatisticResult instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TGetStatisticResult instance.
func (me *TGetStatisticResult) Walk() (err error) {
	if fn := WalkHandlers.TGetStatisticResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_ struct {
	GetStatisticResults []*TGetStatisticResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetStatisticResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_ instance.
func (me *XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetStatisticResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetRequesterStatisticResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_
}

//	If the WalkHandlers.TxsdGetRequesterStatisticResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetRequesterStatisticResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetRequesterStatisticResponse instance.
func (me *TxsdGetRequesterStatisticResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetRequesterStatisticResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetRequesterStatisticResponse struct {
	GetRequesterStatisticResponse *TxsdGetRequesterStatisticResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterStatisticResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetRequesterStatisticResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetRequesterStatisticResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetRequesterStatisticResponse instance.
func (me *XsdGoPkgHasElem_GetRequesterStatisticResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetRequesterStatisticResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetRequesterStatisticResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetRequesterStatisticResponse struct {
	GetRequesterStatisticResponses []*TxsdGetRequesterStatisticResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterStatisticResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetRequesterStatisticResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetRequesterStatisticResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetRequesterStatisticResponse instance.
func (me *XsdGoPkgHasElems_GetRequesterStatisticResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetRequesterStatisticResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetRequesterStatisticResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterWorkerStatisticGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_ struct {
	Requests []*TGetRequesterWorkerStatisticRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterWorkerStatisticGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterWorkerStatisticGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterWorkerStatisticGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterWorkerStatisticGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterWorkerStatisticGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetRequesterWorkerStatistic struct {
	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterWorkerStatisticGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_
}

//	If the WalkHandlers.TxsdGetRequesterWorkerStatistic function is not nil (ie. was set by outside code), calls it with this TxsdGetRequesterWorkerStatistic instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetRequesterWorkerStatistic instance.
func (me *TxsdGetRequesterWorkerStatistic) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetRequesterWorkerStatistic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterWorkerStatisticGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetRequesterWorkerStatistic struct {
	GetRequesterWorkerStatistic *TxsdGetRequesterWorkerStatistic `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterWorkerStatistic"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetRequesterWorkerStatistic function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetRequesterWorkerStatistic instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetRequesterWorkerStatistic instance.
func (me *XsdGoPkgHasElem_GetRequesterWorkerStatistic) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetRequesterWorkerStatistic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetRequesterWorkerStatistic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetRequesterWorkerStatistic struct {
	GetRequesterWorkerStatistics []*TxsdGetRequesterWorkerStatistic `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterWorkerStatistic"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetRequesterWorkerStatistic function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetRequesterWorkerStatistic instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetRequesterWorkerStatistic instance.
func (me *XsdGoPkgHasElems_GetRequesterWorkerStatistic) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetRequesterWorkerStatistic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetRequesterWorkerStatistics {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetRequesterWorkerStatisticResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_
}

//	If the WalkHandlers.TxsdGetRequesterWorkerStatisticResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetRequesterWorkerStatisticResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetRequesterWorkerStatisticResponse instance.
func (me *TxsdGetRequesterWorkerStatisticResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetRequesterWorkerStatisticResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetRequesterWorkerStatisticResponse struct {
	GetRequesterWorkerStatisticResponses []*TxsdGetRequesterWorkerStatisticResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterWorkerStatisticResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetRequesterWorkerStatisticResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetRequesterWorkerStatisticResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetRequesterWorkerStatisticResponse instance.
func (me *XsdGoPkgHasElems_GetRequesterWorkerStatisticResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetRequesterWorkerStatisticResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetRequesterWorkerStatisticResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetRequesterWorkerStatisticResponse struct {
	GetRequesterWorkerStatisticResponse *TxsdGetRequesterWorkerStatisticResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterWorkerStatisticResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetRequesterWorkerStatisticResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetRequesterWorkerStatisticResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetRequesterWorkerStatisticResponse instance.
func (me *XsdGoPkgHasElem_GetRequesterWorkerStatisticResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetRequesterWorkerStatisticResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetRequesterWorkerStatisticResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdNotifyWorkersNotifyWorkersschema_Request_TNotifyWorkersRequest_ struct {
	Requests []*TNotifyWorkersRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdNotifyWorkersNotifyWorkersschema_Request_TNotifyWorkersRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdNotifyWorkersNotifyWorkersschema_Request_TNotifyWorkersRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdNotifyWorkersNotifyWorkersschema_Request_TNotifyWorkersRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdNotifyWorkersNotifyWorkersschema_Request_TNotifyWorkersRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdNotifyWorkersNotifyWorkersschema_Request_TNotifyWorkersRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdNotifyWorkers struct {
	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdNotifyWorkersNotifyWorkersschema_Request_TNotifyWorkersRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_
}

//	If the WalkHandlers.TxsdNotifyWorkers function is not nil (ie. was set by outside code), calls it with this TxsdNotifyWorkers instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdNotifyWorkers instance.
func (me *TxsdNotifyWorkers) Walk() (err error) {
	if fn := WalkHandlers.TxsdNotifyWorkers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdNotifyWorkersNotifyWorkersschema_Request_TNotifyWorkersRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NotifyWorkers struct {
	NotifyWorkers *TxsdNotifyWorkers `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkers"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NotifyWorkers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotifyWorkers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NotifyWorkers instance.
func (me *XsdGoPkgHasElem_NotifyWorkers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NotifyWorkers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NotifyWorkers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NotifyWorkers struct {
	NotifyWorkerses []*TxsdNotifyWorkers `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkers"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NotifyWorkers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotifyWorkers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotifyWorkers instance.
func (me *XsdGoPkgHasElems_NotifyWorkers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NotifyWorkers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NotifyWorkerses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNotifyWorkersFailureCode xsdt.String

//	Since TNotifyWorkersFailureCode is just a simple String type, this merely sets the current value from the specified string.
func (me *TNotifyWorkersFailureCode) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TNotifyWorkersFailureCode is just a simple String type, this merely returns the current string value.
func (me TNotifyWorkersFailureCode) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TNotifyWorkersFailureCode's alias type xsdt.String.
func (me TNotifyWorkersFailureCode) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TNotifyWorkersFailureCode is "SoftFailure".
func (me TNotifyWorkersFailureCode) IsSoftFailure() bool { return me.String() == "SoftFailure" }

//	Returns true if the value of this enumerated TNotifyWorkersFailureCode is "HardFailure".
func (me TNotifyWorkersFailureCode) IsHardFailure() bool { return me.String() == "HardFailure" }

type XsdGoPkgHasElem_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_ struct {
	NotifyWorkersFailureCode TNotifyWorkersFailureCode `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersFailureCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_ instance.
func (me *XsdGoPkgHasElem_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_ struct {
	NotifyWorkersFailureMessage xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersFailureMessage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_ instance.
func (me *XsdGoPkgHasElem_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNotifyWorkersFailureStatus struct {
	XsdGoPkgHasElem_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_

	XsdGoPkgHasElem_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_

	XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_
}

//	If the WalkHandlers.TNotifyWorkersFailureStatus function is not nil (ie. was set by outside code), calls it with this TNotifyWorkersFailureStatus instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TNotifyWorkersFailureStatus instance.
func (me *TNotifyWorkersFailureStatus) Walk() (err error) {
	if fn := WalkHandlers.TNotifyWorkersFailureStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_ struct {
	NotifyWorkersFailureStatuses []*TNotifyWorkersFailureStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersFailureStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_ instance.
func (me *XsdGoPkgHasElems_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NotifyWorkersFailureStatuses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNotifyWorkersResult struct {
	XsdGoPkgHasElem_Request

	XsdGoPkgHasElems_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_
}

//	If the WalkHandlers.TNotifyWorkersResult function is not nil (ie. was set by outside code), calls it with this TNotifyWorkersResult instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TNotifyWorkersResult instance.
func (me *TNotifyWorkersResult) Walk() (err error) {
	if fn := WalkHandlers.TNotifyWorkersResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NotifyWorkersResultsequenceTxsdNotifyWorkersResponseNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_ struct {
	NotifyWorkersResults []*TNotifyWorkersResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NotifyWorkersResultsequenceTxsdNotifyWorkersResponseNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotifyWorkersResultsequenceTxsdNotifyWorkersResponseNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotifyWorkersResultsequenceTxsdNotifyWorkersResponseNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_ instance.
func (me *XsdGoPkgHasElems_NotifyWorkersResultsequenceTxsdNotifyWorkersResponseNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NotifyWorkersResultsequenceTxsdNotifyWorkersResponseNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NotifyWorkersResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdNotifyWorkersResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_NotifyWorkersResultsequenceTxsdNotifyWorkersResponseNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_
}

//	If the WalkHandlers.TxsdNotifyWorkersResponse function is not nil (ie. was set by outside code), calls it with this TxsdNotifyWorkersResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdNotifyWorkersResponse instance.
func (me *TxsdNotifyWorkersResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdNotifyWorkersResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NotifyWorkersResultsequenceTxsdNotifyWorkersResponseNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NotifyWorkersResponse struct {
	NotifyWorkersResponse *TxsdNotifyWorkersResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NotifyWorkersResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotifyWorkersResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NotifyWorkersResponse instance.
func (me *XsdGoPkgHasElem_NotifyWorkersResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NotifyWorkersResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NotifyWorkersResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NotifyWorkersResponse struct {
	NotifyWorkersResponses []*TxsdNotifyWorkersResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NotifyWorkersResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotifyWorkersResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotifyWorkersResponse instance.
func (me *XsdGoPkgHasElems_NotifyWorkersResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NotifyWorkersResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NotifyWorkersResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdGetBlockedWorkersGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_ struct {
	Requests []*TGetBlockedWorkersRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetBlockedWorkersGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdGetBlockedWorkersGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdGetBlockedWorkersGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdGetBlockedWorkersGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdGetBlockedWorkersGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetBlockedWorkers struct {
	XsdGoPkgHasElems_RequestsequenceTxsdGetBlockedWorkersGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_
}

//	If the WalkHandlers.TxsdGetBlockedWorkers function is not nil (ie. was set by outside code), calls it with this TxsdGetBlockedWorkers instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdGetBlockedWorkers instance.
func (me *TxsdGetBlockedWorkers) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetBlockedWorkers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdGetBlockedWorkersGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetBlockedWorkers struct {
	GetBlockedWorkerses []*TxsdGetBlockedWorkers `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBlockedWorkers"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetBlockedWorkers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetBlockedWorkers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetBlockedWorkers instance.
func (me *XsdGoPkgHasElems_GetBlockedWorkers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetBlockedWorkers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetBlockedWorkerses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetBlockedWorkers struct {
	GetBlockedWorkers *TxsdGetBlockedWorkers `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBlockedWorkers"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetBlockedWorkers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetBlockedWorkers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetBlockedWorkers instance.
func (me *XsdGoPkgHasElem_GetBlockedWorkers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetBlockedWorkers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetBlockedWorkers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TWorkerBlock struct {
	XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_

	XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_
}

//	If the WalkHandlers.TWorkerBlock function is not nil (ie. was set by outside code), calls it with this TWorkerBlock instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TWorkerBlock instance.
func (me *TWorkerBlock) Walk() (err error) {
	if fn := WalkHandlers.TWorkerBlock; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_ struct {
	WorkerBlocks []*TWorkerBlock `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 WorkerBlock"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_ instance.
func (me *XsdGoPkgHasElems_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.WorkerBlocks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TGetBlockedWorkersResult struct {
	XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_

	XsdGoPkgHasElems_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_

	XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_
}

//	If the WalkHandlers.TGetBlockedWorkersResult function is not nil (ie. was set by outside code), calls it with this TGetBlockedWorkersResult instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TGetBlockedWorkersResult instance.
func (me *TGetBlockedWorkersResult) Walk() (err error) {
	if fn := WalkHandlers.TGetBlockedWorkersResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_ struct {
	GetBlockedWorkersResults []*TGetBlockedWorkersResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBlockedWorkersResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_ instance.
func (me *XsdGoPkgHasElems_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetBlockedWorkersResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGetBlockedWorkersResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_
}

//	If the WalkHandlers.TxsdGetBlockedWorkersResponse function is not nil (ie. was set by outside code), calls it with this TxsdGetBlockedWorkersResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGetBlockedWorkersResponse instance.
func (me *TxsdGetBlockedWorkersResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGetBlockedWorkersResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetBlockedWorkersResponse struct {
	GetBlockedWorkersResponse *TxsdGetBlockedWorkersResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBlockedWorkersResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetBlockedWorkersResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetBlockedWorkersResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetBlockedWorkersResponse instance.
func (me *XsdGoPkgHasElem_GetBlockedWorkersResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetBlockedWorkersResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetBlockedWorkersResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetBlockedWorkersResponse struct {
	GetBlockedWorkersResponses []*TxsdGetBlockedWorkersResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBlockedWorkersResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetBlockedWorkersResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetBlockedWorkersResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetBlockedWorkersResponse instance.
func (me *XsdGoPkgHasElems_GetBlockedWorkersResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetBlockedWorkersResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetBlockedWorkersResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdBlockWorkerBlockWorkerschema_Request_TBlockWorkerRequest_ struct {
	Requests []*TBlockWorkerRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdBlockWorkerBlockWorkerschema_Request_TBlockWorkerRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdBlockWorkerBlockWorkerschema_Request_TBlockWorkerRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdBlockWorkerBlockWorkerschema_Request_TBlockWorkerRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdBlockWorkerBlockWorkerschema_Request_TBlockWorkerRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdBlockWorkerBlockWorkerschema_Request_TBlockWorkerRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBlockWorker struct {
	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdBlockWorkerBlockWorkerschema_Request_TBlockWorkerRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_
}

//	If the WalkHandlers.TxsdBlockWorker function is not nil (ie. was set by outside code), calls it with this TxsdBlockWorker instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdBlockWorker instance.
func (me *TxsdBlockWorker) Walk() (err error) {
	if fn := WalkHandlers.TxsdBlockWorker; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdBlockWorkerBlockWorkerschema_Request_TBlockWorkerRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BlockWorker struct {
	BlockWorker *TxsdBlockWorker `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BlockWorker"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BlockWorker function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BlockWorker instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BlockWorker instance.
func (me *XsdGoPkgHasElem_BlockWorker) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BlockWorker; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlockWorker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BlockWorker struct {
	BlockWorkers []*TxsdBlockWorker `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BlockWorker"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BlockWorker function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BlockWorker instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BlockWorker instance.
func (me *XsdGoPkgHasElems_BlockWorker) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BlockWorker; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BlockWorkers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBlockWorkerResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TBlockWorkerResult function is not nil (ie. was set by outside code), calls it with this TBlockWorkerResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TBlockWorkerResult instance.
func (me *TBlockWorkerResult) Walk() (err error) {
	if fn := WalkHandlers.TBlockWorkerResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BlockWorkerResultsequenceTxsdBlockWorkerResponseBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_ struct {
	BlockWorkerResults []*TBlockWorkerResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BlockWorkerResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BlockWorkerResultsequenceTxsdBlockWorkerResponseBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BlockWorkerResultsequenceTxsdBlockWorkerResponseBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BlockWorkerResultsequenceTxsdBlockWorkerResponseBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_ instance.
func (me *XsdGoPkgHasElems_BlockWorkerResultsequenceTxsdBlockWorkerResponseBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BlockWorkerResultsequenceTxsdBlockWorkerResponseBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BlockWorkerResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBlockWorkerResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_BlockWorkerResultsequenceTxsdBlockWorkerResponseBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_
}

//	If the WalkHandlers.TxsdBlockWorkerResponse function is not nil (ie. was set by outside code), calls it with this TxsdBlockWorkerResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdBlockWorkerResponse instance.
func (me *TxsdBlockWorkerResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdBlockWorkerResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_BlockWorkerResultsequenceTxsdBlockWorkerResponseBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BlockWorkerResponse struct {
	BlockWorkerResponse *TxsdBlockWorkerResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BlockWorkerResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BlockWorkerResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BlockWorkerResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BlockWorkerResponse instance.
func (me *XsdGoPkgHasElem_BlockWorkerResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BlockWorkerResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlockWorkerResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BlockWorkerResponse struct {
	BlockWorkerResponses []*TxsdBlockWorkerResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BlockWorkerResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BlockWorkerResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BlockWorkerResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BlockWorkerResponse instance.
func (me *XsdGoPkgHasElems_BlockWorkerResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BlockWorkerResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BlockWorkerResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdUnblockWorkerUnblockWorkerschema_Request_TUnblockWorkerRequest_ struct {
	Requests []*TUnblockWorkerRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdUnblockWorkerUnblockWorkerschema_Request_TUnblockWorkerRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdUnblockWorkerUnblockWorkerschema_Request_TUnblockWorkerRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdUnblockWorkerUnblockWorkerschema_Request_TUnblockWorkerRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdUnblockWorkerUnblockWorkerschema_Request_TUnblockWorkerRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdUnblockWorkerUnblockWorkerschema_Request_TUnblockWorkerRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdUnblockWorker struct {
	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_

	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdUnblockWorkerUnblockWorkerschema_Request_TUnblockWorkerRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_
}

//	If the WalkHandlers.TxsdUnblockWorker function is not nil (ie. was set by outside code), calls it with this TxsdUnblockWorker instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdUnblockWorker instance.
func (me *TxsdUnblockWorker) Walk() (err error) {
	if fn := WalkHandlers.TxsdUnblockWorker; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdUnblockWorkerUnblockWorkerschema_Request_TUnblockWorkerRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UnblockWorker struct {
	UnblockWorkers []*TxsdUnblockWorker `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UnblockWorker"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UnblockWorker function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnblockWorker instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnblockWorker instance.
func (me *XsdGoPkgHasElems_UnblockWorker) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UnblockWorker; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UnblockWorkers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UnblockWorker struct {
	UnblockWorker *TxsdUnblockWorker `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UnblockWorker"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UnblockWorker function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnblockWorker instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UnblockWorker instance.
func (me *XsdGoPkgHasElem_UnblockWorker) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UnblockWorker; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UnblockWorker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TUnblockWorkerResult struct {
	XsdGoPkgHasElem_Request
}

//	If the WalkHandlers.TUnblockWorkerResult function is not nil (ie. was set by outside code), calls it with this TUnblockWorkerResult instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TUnblockWorkerResult instance.
func (me *TUnblockWorkerResult) Walk() (err error) {
	if fn := WalkHandlers.TUnblockWorkerResult; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_ struct {
	UnblockWorkerResults []*TUnblockWorkerResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UnblockWorkerResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_ instance.
func (me *XsdGoPkgHasElems_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UnblockWorkerResults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdUnblockWorkerResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_
}

//	If the WalkHandlers.TxsdUnblockWorkerResponse function is not nil (ie. was set by outside code), calls it with this TxsdUnblockWorkerResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdUnblockWorkerResponse instance.
func (me *TxsdUnblockWorkerResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdUnblockWorkerResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UnblockWorkerResponse struct {
	UnblockWorkerResponse *TxsdUnblockWorkerResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UnblockWorkerResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UnblockWorkerResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnblockWorkerResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UnblockWorkerResponse instance.
func (me *XsdGoPkgHasElem_UnblockWorkerResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UnblockWorkerResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UnblockWorkerResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UnblockWorkerResponse struct {
	UnblockWorkerResponses []*TxsdUnblockWorkerResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UnblockWorkerResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UnblockWorkerResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnblockWorkerResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnblockWorkerResponse instance.
func (me *XsdGoPkgHasElems_UnblockWorkerResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UnblockWorkerResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UnblockWorkerResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OperationRequest struct {
	OperationRequests []*TxsdOperationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 OperationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OperationRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OperationRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OperationRequest instance.
func (me *XsdGoPkgHasElems_OperationRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OperationRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OperationRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Request struct {
	Requests []*TxsdRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Request function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Request instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Request instance.
func (me *XsdGoPkgHasElems_Request) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Request; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HTTPHeaders struct {
	HTTPHeaderses []*TxsdHTTPHeaders `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HTTPHeaders"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HTTPHeaders function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HTTPHeaders instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HTTPHeaders instance.
func (me *XsdGoPkgHasElems_HTTPHeaders) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HTTPHeaders; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HTTPHeaderses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Arguments struct {
	Argumentses []*TxsdArguments `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Arguments"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Arguments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arguments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arguments instance.
func (me *XsdGoPkgHasElems_Arguments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Arguments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Argumentses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Errors struct {
	Errorses []*TxsdErrors `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Errors"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Errors function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Errors instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Errors instance.
func (me *XsdGoPkgHasElems_Errors) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Errors; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Errorses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestsequenceTxsdHelpHelpschema_Request_THelpRequest_ struct {
	Requests []*THelpRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdHelpHelpschema_Request_THelpRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestsequenceTxsdHelpHelpschema_Request_THelpRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestsequenceTxsdHelpHelpschema_Request_THelpRequest_ instance.
func (me *XsdGoPkgHasElems_RequestsequenceTxsdHelpHelpschema_Request_THelpRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestsequenceTxsdHelpHelpschema_Request_THelpRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHelp struct {
	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_

	XsdGoPkgHasElems_RequestsequenceTxsdHelpHelpschema_Request_THelpRequest_

	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_

	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_

	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_
}

//	If the WalkHandlers.TxsdHelp function is not nil (ie. was set by outside code), calls it with this TxsdHelp instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdHelp instance.
func (me *TxsdHelp) Walk() (err error) {
	if fn := WalkHandlers.TxsdHelp; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestsequenceTxsdHelpHelpschema_Request_THelpRequest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Help struct {
	Help *TxsdHelp `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Help"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Help function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Help instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Help instance.
func (me *XsdGoPkgHasElem_Help) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Help; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Help.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Help struct {
	Helps []*TxsdHelp `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Help"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Help function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Help instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Help instance.
func (me *XsdGoPkgHasElems_Help) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Help; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Helps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_ struct {
	Parameters []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Parameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOperationInformationSequenceRequiredParameters struct {
	XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_
}

//	If the WalkHandlers.TxsdOperationInformationSequenceRequiredParameters function is not nil (ie. was set by outside code), calls it with this TxsdOperationInformationSequenceRequiredParameters instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdOperationInformationSequenceRequiredParameters instance.
func (me *TxsdOperationInformationSequenceRequiredParameters) Walk() (err error) {
	if fn := WalkHandlers.TxsdOperationInformationSequenceRequiredParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_ struct {
	RequiredParameters *TxsdOperationInformationSequenceRequiredParameters `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RequiredParameters"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_ instance.
func (me *XsdGoPkgHasElem_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RequiredParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOperationInformationSequenceAvailableParameters struct {
	XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_
}

//	If the WalkHandlers.TxsdOperationInformationSequenceAvailableParameters function is not nil (ie. was set by outside code), calls it with this TxsdOperationInformationSequenceAvailableParameters instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdOperationInformationSequenceAvailableParameters instance.
func (me *TxsdOperationInformationSequenceAvailableParameters) Walk() (err error) {
	if fn := WalkHandlers.TxsdOperationInformationSequenceAvailableParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AvailableParameterssequenceTxsdOperationInformationOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_ struct {
	AvailableParameters *TxsdOperationInformationSequenceAvailableParameters `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AvailableParameters"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AvailableParameterssequenceTxsdOperationInformationOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AvailableParameterssequenceTxsdOperationInformationOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AvailableParameterssequenceTxsdOperationInformationOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_ instance.
func (me *XsdGoPkgHasElem_AvailableParameterssequenceTxsdOperationInformationOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AvailableParameterssequenceTxsdOperationInformationOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AvailableParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOperationInformationSequenceDefaultResponseGroups struct {
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TxsdOperationInformationSequenceDefaultResponseGroups function is not nil (ie. was set by outside code), calls it with this TxsdOperationInformationSequenceDefaultResponseGroups instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdOperationInformationSequenceDefaultResponseGroups instance.
func (me *TxsdOperationInformationSequenceDefaultResponseGroups) Walk() (err error) {
	if fn := WalkHandlers.TxsdOperationInformationSequenceDefaultResponseGroups; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_ struct {
	DefaultResponseGroups *TxsdOperationInformationSequenceDefaultResponseGroups `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DefaultResponseGroups"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_ instance.
func (me *XsdGoPkgHasElem_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DefaultResponseGroups.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOperationInformationSequenceAvailableResponseGroups struct {
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_
}

//	If the WalkHandlers.TxsdOperationInformationSequenceAvailableResponseGroups function is not nil (ie. was set by outside code), calls it with this TxsdOperationInformationSequenceAvailableResponseGroups instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdOperationInformationSequenceAvailableResponseGroups instance.
func (me *TxsdOperationInformationSequenceAvailableResponseGroups) Walk() (err error) {
	if fn := WalkHandlers.TxsdOperationInformationSequenceAvailableResponseGroups; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_ struct {
	AvailableResponseGroups *TxsdOperationInformationSequenceAvailableResponseGroups `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AvailableResponseGroups"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_ instance.
func (me *XsdGoPkgHasElem_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AvailableResponseGroups.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdOperationInformation struct {
	XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_

	XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_

	XsdGoPkgHasElem_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_

	XsdGoPkgHasElem_AvailableParameterssequenceTxsdOperationInformationOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_

	XsdGoPkgHasElem_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_

	XsdGoPkgHasElem_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_
}

//	If the WalkHandlers.TxsdOperationInformation function is not nil (ie. was set by outside code), calls it with this TxsdOperationInformation instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdOperationInformation instance.
func (me *TxsdOperationInformation) Walk() (err error) {
	if fn := WalkHandlers.TxsdOperationInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AvailableParameterssequenceTxsdOperationInformationOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OperationInformation struct {
	OperationInformations []*TxsdOperationInformation `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 OperationInformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OperationInformation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OperationInformation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OperationInformation instance.
func (me *XsdGoPkgHasElems_OperationInformation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OperationInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OperationInformations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CreationDatesequenceTxsdResponseGroupInformationResponseGroupInformationschema_CreationDate_XsdtString_ struct {
	CreationDate xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreationDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CreationDatesequenceTxsdResponseGroupInformationResponseGroupInformationschema_CreationDate_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CreationDatesequenceTxsdResponseGroupInformationResponseGroupInformationschema_CreationDate_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CreationDatesequenceTxsdResponseGroupInformationResponseGroupInformationschema_CreationDate_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CreationDatesequenceTxsdResponseGroupInformationResponseGroupInformationschema_CreationDate_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CreationDatesequenceTxsdResponseGroupInformationResponseGroupInformationschema_CreationDate_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OperationsequenceTxsdResponseGroupInformationSequenceValidOperationsValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Operation_XsdtString_ struct {
	Operations []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Operation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OperationsequenceTxsdResponseGroupInformationSequenceValidOperationsValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Operation_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OperationsequenceTxsdResponseGroupInformationSequenceValidOperationsValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Operation_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OperationsequenceTxsdResponseGroupInformationSequenceValidOperationsValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Operation_XsdtString_ instance.
func (me *XsdGoPkgHasElems_OperationsequenceTxsdResponseGroupInformationSequenceValidOperationsValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Operation_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OperationsequenceTxsdResponseGroupInformationSequenceValidOperationsValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Operation_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdResponseGroupInformationSequenceValidOperations struct {
	XsdGoPkgHasElems_OperationsequenceTxsdResponseGroupInformationSequenceValidOperationsValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Operation_XsdtString_
}

//	If the WalkHandlers.TxsdResponseGroupInformationSequenceValidOperations function is not nil (ie. was set by outside code), calls it with this TxsdResponseGroupInformationSequenceValidOperations instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdResponseGroupInformationSequenceValidOperations instance.
func (me *TxsdResponseGroupInformationSequenceValidOperations) Walk() (err error) {
	if fn := WalkHandlers.TxsdResponseGroupInformationSequenceValidOperations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_OperationsequenceTxsdResponseGroupInformationSequenceValidOperationsValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Operation_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_ struct {
	ValidOperations *TxsdResponseGroupInformationSequenceValidOperations `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ValidOperations"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_ instance.
func (me *XsdGoPkgHasElem_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ValidOperations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_ struct {
	Elements []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Element"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdResponseGroupInformationSequenceElements struct {
	XsdGoPkgHasElems_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_
}

//	If the WalkHandlers.TxsdResponseGroupInformationSequenceElements function is not nil (ie. was set by outside code), calls it with this TxsdResponseGroupInformationSequenceElements instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdResponseGroupInformationSequenceElements instance.
func (me *TxsdResponseGroupInformationSequenceElements) Walk() (err error) {
	if fn := WalkHandlers.TxsdResponseGroupInformationSequenceElements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_ struct {
	Elements *TxsdResponseGroupInformationSequenceElements `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Elements"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_ instance.
func (me *XsdGoPkgHasElem_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Elements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdResponseGroupInformation struct {
	XsdGoPkgHasElem_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_

	XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_

	XsdGoPkgHasElem_CreationDatesequenceTxsdResponseGroupInformationResponseGroupInformationschema_CreationDate_XsdtString_

	XsdGoPkgHasElem_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_
}

//	If the WalkHandlers.TxsdResponseGroupInformation function is not nil (ie. was set by outside code), calls it with this TxsdResponseGroupInformation instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdResponseGroupInformation instance.
func (me *TxsdResponseGroupInformation) Walk() (err error) {
	if fn := WalkHandlers.TxsdResponseGroupInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CreationDatesequenceTxsdResponseGroupInformationResponseGroupInformationschema_CreationDate_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResponseGroupInformation struct {
	ResponseGroupInformations []*TxsdResponseGroupInformation `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ResponseGroupInformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResponseGroupInformation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResponseGroupInformation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResponseGroupInformation instance.
func (me *XsdGoPkgHasElems_ResponseGroupInformation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResponseGroupInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ResponseGroupInformations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInformation struct {
	XsdGoPkgHasElem_Request

	XsdGoPkgHasElems_OperationInformation

	XsdGoPkgHasElems_ResponseGroupInformation
}

//	If the WalkHandlers.TxsdInformation function is not nil (ie. was set by outside code), calls it with this TxsdInformation instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdInformation instance.
func (me *TxsdInformation) Walk() (err error) {
	if fn := WalkHandlers.TxsdInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ResponseGroupInformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OperationInformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Information struct {
	Informations []*TxsdInformation `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Information"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Information function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Information instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Information instance.
func (me *XsdGoPkgHasElems_Information) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Information; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Informations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHelpResponse struct {
	XsdGoPkgHasElem_OperationRequest

	XsdGoPkgHasElems_Information
}

//	If the WalkHandlers.TxsdHelpResponse function is not nil (ie. was set by outside code), calls it with this TxsdHelpResponse instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdHelpResponse instance.
func (me *TxsdHelpResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdHelpResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_OperationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Information.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HelpResponse struct {
	HelpResponse *TxsdHelpResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HelpResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HelpResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HelpResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HelpResponse instance.
func (me *XsdGoPkgHasElem_HelpResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HelpResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HelpResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HelpResponse struct {
	HelpResponses []*TxsdHelpResponse `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HelpResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HelpResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HelpResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HelpResponse instance.
func (me *XsdGoPkgHasElems_HelpResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HelpResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HelpResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Information struct {
	Information *TxsdInformation `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Information"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Information function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Information instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Information instance.
func (me *XsdGoPkgHasElem_Information) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Information; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Information.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OperationInformation struct {
	OperationInformation *TxsdOperationInformation `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 OperationInformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OperationInformation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OperationInformation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OperationInformation instance.
func (me *XsdGoPkgHasElem_OperationInformation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OperationInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OperationInformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResponseGroupInformation struct {
	ResponseGroupInformation *TxsdResponseGroupInformation `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ResponseGroupInformation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResponseGroupInformation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResponseGroupInformation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ResponseGroupInformation instance.
func (me *XsdGoPkgHasElem_ResponseGroupInformation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResponseGroupInformation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ResponseGroupInformation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResponseGroupsequenceGetAccountBalanceRequestschema_ResponseGroup_XsdtString_ struct {
	ResponseGroup xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ResponseGroup"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResponseGroupsequenceGetAccountBalanceRequestschema_ResponseGroup_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResponseGroupsequenceGetAccountBalanceRequestschema_ResponseGroup_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ResponseGroupsequenceGetAccountBalanceRequestschema_ResponseGroup_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ResponseGroupsequenceGetAccountBalanceRequestschema_ResponseGroup_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResponseGroupsequenceGetAccountBalanceRequestschema_ResponseGroup_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TimestampsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Timestamp_XsdtDateTime_ struct {
	Timestamps []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Timestamp"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimestampsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Timestamp_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimestampsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Timestamp_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimestampsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Timestamp_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_TimestampsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Timestamp_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TimestampsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Timestamp_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetStatisticResultsequenceTxsdGetRequesterWorkerStatisticResponseGetRequesterWorkerStatisticResponseschema_GetStatisticResult_TGetStatisticResult_ struct {
	GetStatisticResult *TGetStatisticResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetStatisticResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetStatisticResultsequenceTxsdGetRequesterWorkerStatisticResponseGetRequesterWorkerStatisticResponseschema_GetStatisticResult_TGetStatisticResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetStatisticResultsequenceTxsdGetRequesterWorkerStatisticResponseGetRequesterWorkerStatisticResponseschema_GetStatisticResult_TGetStatisticResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetStatisticResultsequenceTxsdGetRequesterWorkerStatisticResponseGetRequesterWorkerStatisticResponseschema_GetStatisticResult_TGetStatisticResult_ instance.
func (me *XsdGoPkgHasElem_GetStatisticResultsequenceTxsdGetRequesterWorkerStatisticResponseGetRequesterWorkerStatisticResponseschema_GetStatisticResult_TGetStatisticResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetStatisticResultsequenceTxsdGetRequesterWorkerStatisticResponseGetRequesterWorkerStatisticResponseschema_GetStatisticResult_TGetStatisticResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetStatisticResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SignaturesequenceGetAccountBalanceschema_Signature_XsdtString_ struct {
	Signatures []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Signature"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SignaturesequenceGetAccountBalanceschema_Signature_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SignaturesequenceGetAccountBalanceschema_Signature_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SignaturesequenceGetAccountBalanceschema_Signature_XsdtString_ instance.
func (me *XsdGoPkgHasElems_SignaturesequenceGetAccountBalanceschema_Signature_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SignaturesequenceGetAccountBalanceschema_Signature_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrantTimesequenceBonusPaymentschema_GrantTime_XsdtDateTime_ struct {
	GrantTimes []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrantTimesequenceBonusPaymentschema_GrantTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrantTimesequenceBonusPaymentschema_GrantTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrantTimesequenceBonusPaymentschema_GrantTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_GrantTimesequenceBonusPaymentschema_GrantTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrantTimesequenceBonusPaymentschema_GrantTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ValidatesequenceGetReviewResultsForHITschema_Validate_XsdtString_ struct {
	Validates []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Validate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ValidatesequenceGetReviewResultsForHITschema_Validate_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ValidatesequenceGetReviewResultsForHITschema_Validate_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ValidatesequenceGetReviewResultsForHITschema_Validate_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ValidatesequenceGetReviewResultsForHITschema_Validate_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ValidatesequenceGetReviewResultsForHITschema_Validate_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_ struct {
	RevokeQualificationResult *TRevokeQualificationResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RevokeQualificationResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_ instance.
func (me *XsdGoPkgHasElem_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RevokeQualificationResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_ struct {
	Argument *TxsdHTTPHeadersSequenceHeader `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Argument"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_ instance.
func (me *XsdGoPkgHasElem_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Argument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PageNumbersequenceGetQualificationsForQualificationTypeRequestschema_PageNumber_XsdtInt_ struct {
	PageNumbers []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 PageNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PageNumbersequenceGetQualificationsForQualificationTypeRequestschema_PageNumber_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PageNumbersequenceGetQualificationsForQualificationTypeRequestschema_PageNumber_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PageNumbersequenceGetQualificationsForQualificationTypeRequestschema_PageNumber_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_PageNumbersequenceGetQualificationsForQualificationTypeRequestschema_PageNumber_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PageNumbersequenceGetQualificationsForQualificationTypeRequestschema_PageNumber_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CredentialsequenceBlockWorkerschema_Credential_XsdtString_ struct {
	Credentials []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Credential"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CredentialsequenceBlockWorkerschema_Credential_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CredentialsequenceBlockWorkerschema_Credential_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CredentialsequenceBlockWorkerschema_Credential_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CredentialsequenceBlockWorkerschema_Credential_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CredentialsequenceBlockWorkerschema_Credential_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ParametersequenceTxsdOperationInformationSequenceAvailableParametersAvailableParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_ struct {
	Parameter xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Parameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ParametersequenceTxsdOperationInformationSequenceAvailableParametersAvailableParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ParametersequenceTxsdOperationInformationSequenceAvailableParametersAvailableParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ParametersequenceTxsdOperationInformationSequenceAvailableParametersAvailableParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ParametersequenceTxsdOperationInformationSequenceAvailableParametersAvailableParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ParametersequenceTxsdOperationInformationSequenceAvailableParametersAvailableParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MaxAssignmentssequenceHITschema_MaxAssignments_XsdtInt_ struct {
	MaxAssignmentses []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MaxAssignments"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MaxAssignmentssequenceHITschema_MaxAssignments_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MaxAssignmentssequenceHITschema_MaxAssignments_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MaxAssignmentssequenceHITschema_MaxAssignments_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_MaxAssignmentssequenceHITschema_MaxAssignments_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MaxAssignmentssequenceHITschema_MaxAssignments_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_ struct {
	SetHITAsReviewingResult *TSetHITAsReviewingResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITAsReviewingResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_ instance.
func (me *XsdGoPkgHasElem_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SetHITAsReviewingResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_ struct {
	Request *TApproveRejectedAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AWSAccessKeyIdsequenceTxsdRegisterHITTypeRegisterHITTypeschema_AWSAccessKeyId_XsdtString_ struct {
	AWSAccessKeyIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AWSAccessKeyId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AWSAccessKeyIdsequenceTxsdRegisterHITTypeRegisterHITTypeschema_AWSAccessKeyId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AWSAccessKeyIdsequenceTxsdRegisterHITTypeRegisterHITTypeschema_AWSAccessKeyId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AWSAccessKeyIdsequenceTxsdRegisterHITTypeRegisterHITTypeschema_AWSAccessKeyId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AWSAccessKeyIdsequenceTxsdRegisterHITTypeRegisterHITTypeschema_AWSAccessKeyId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AWSAccessKeyIdsequenceTxsdRegisterHITTypeRegisterHITTypeschema_AWSAccessKeyId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_ struct {
	Request *TGetQualificationScoreRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisableHITRequestsequenceRequestschema_DisableHITRequest_TDisableHITRequest_ struct {
	DisableHITRequests []*TDisableHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisableHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisableHITRequestsequenceRequestschema_DisableHITRequest_TDisableHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisableHITRequestsequenceRequestschema_DisableHITRequest_TDisableHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisableHITRequestsequenceRequestschema_DisableHITRequest_TDisableHITRequest_ instance.
func (me *XsdGoPkgHasElems_DisableHITRequestsequenceRequestschema_DisableHITRequest_TDisableHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisableHITRequestsequenceRequestschema_DisableHITRequest_TDisableHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisableHITRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_ struct {
	Request *TForceExpireHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_ struct {
	Request *TDisableHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SearchHITsRequestsequenceRequestschema_SearchHITsRequest_TSearchHITsRequest_ struct {
	SearchHITsRequests []*TSearchHITsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchHITsRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SearchHITsRequestsequenceRequestschema_SearchHITsRequest_TSearchHITsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SearchHITsRequestsequenceRequestschema_SearchHITsRequest_TSearchHITsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SearchHITsRequestsequenceRequestschema_SearchHITsRequest_TSearchHITsRequest_ instance.
func (me *XsdGoPkgHasElems_SearchHITsRequestsequenceRequestschema_SearchHITsRequest_TSearchHITsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SearchHITsRequestsequenceRequestschema_SearchHITsRequest_TSearchHITsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SearchHITsRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QualificationTypeIdsequenceGetQualificationsForQualificationTypeRequestschema_QualificationTypeId_XsdtString_ struct {
	QualificationTypeIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationTypeId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QualificationTypeIdsequenceGetQualificationsForQualificationTypeRequestschema_QualificationTypeId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QualificationTypeIdsequenceGetQualificationsForQualificationTypeRequestschema_QualificationTypeId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QualificationTypeIdsequenceGetQualificationsForQualificationTypeRequestschema_QualificationTypeId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_QualificationTypeIdsequenceGetQualificationsForQualificationTypeRequestschema_QualificationTypeId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QualificationTypeIdsequenceGetQualificationsForQualificationTypeRequestschema_QualificationTypeId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_ struct {
	MustBeOwnedByCallers []xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MustBeOwnedByCaller"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NamesequenceTxsdResponseGroupInformationResponseGroupInformationschema_Name_XsdtString_ struct {
	Names []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Name"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NamesequenceTxsdResponseGroupInformationResponseGroupInformationschema_Name_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NamesequenceTxsdResponseGroupInformationResponseGroupInformationschema_Name_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NamesequenceTxsdResponseGroupInformationResponseGroupInformationschema_Name_XsdtString_ instance.
func (me *XsdGoPkgHasElems_NamesequenceTxsdResponseGroupInformationResponseGroupInformationschema_Name_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NamesequenceTxsdResponseGroupInformationResponseGroupInformationschema_Name_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BlockWorkerResultsequenceBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_ struct {
	BlockWorkerResult *TBlockWorkerResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BlockWorkerResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BlockWorkerResultsequenceBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BlockWorkerResultsequenceBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BlockWorkerResultsequenceBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_ instance.
func (me *XsdGoPkgHasElem_BlockWorkerResultsequenceBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BlockWorkerResultsequenceBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlockWorkerResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrantQualificationRequestsequenceRequestschema_GrantQualificationRequest_TGrantQualificationRequest_ struct {
	GrantQualificationRequests []*TGrantQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantQualificationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrantQualificationRequestsequenceRequestschema_GrantQualificationRequest_TGrantQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrantQualificationRequestsequenceRequestschema_GrantQualificationRequest_TGrantQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrantQualificationRequestsequenceRequestschema_GrantQualificationRequest_TGrantQualificationRequest_ instance.
func (me *XsdGoPkgHasElems_GrantQualificationRequestsequenceRequestschema_GrantQualificationRequest_TGrantQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrantQualificationRequestsequenceRequestschema_GrantQualificationRequest_TGrantQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GrantQualificationRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceGrantBonusschema_Request_TGrantBonusRequest_ struct {
	Request *TGrantBonusRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceGrantBonusschema_Request_TGrantBonusRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceGrantBonusschema_Request_TGrantBonusRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceGrantBonusschema_Request_TGrantBonusRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceGrantBonusschema_Request_TGrantBonusRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceGrantBonusschema_Request_TGrantBonusRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_ struct {
	Statistics []TRequesterStatistic `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Statistic"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_ instance.
func (me *XsdGoPkgHasElems_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_ struct {
	QualificationType *TQualificationType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_ instance.
func (me *XsdGoPkgHasElem_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.QualificationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_ struct {
	SortProperties []TGetReviewableHITsSortProperty `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_ instance.
func (me *XsdGoPkgHasElems_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RewardsequenceRegisterHITTypeRequestschema_Reward_TPrice_ struct {
	Rewards []*TPrice `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Reward"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RewardsequenceRegisterHITTypeRequestschema_Reward_TPrice_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RewardsequenceRegisterHITTypeRequestschema_Reward_TPrice_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RewardsequenceRegisterHITTypeRequestschema_Reward_TPrice_ instance.
func (me *XsdGoPkgHasElems_RewardsequenceRegisterHITTypeRequestschema_Reward_TPrice_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RewardsequenceRegisterHITTypeRequestschema_Reward_TPrice_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Rewards {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAssignmentResultsequenceGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_ struct {
	GetAssignmentResult *TGetAssignmentResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAssignmentResultsequenceGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAssignmentResultsequenceGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAssignmentResultsequenceGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_ instance.
func (me *XsdGoPkgHasElem_GetAssignmentResultsequenceGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAssignmentResultsequenceGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAssignmentResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_ struct {
	GetBlockedWorkersRequests []*TGetBlockedWorkersRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBlockedWorkersRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_ instance.
func (me *XsdGoPkgHasElems_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetBlockedWorkersRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RetryDelayInSecondssequenceUpdateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_ struct {
	RetryDelayInSecondses []xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RetryDelayInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RetryDelayInSecondssequenceUpdateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RetryDelayInSecondssequenceUpdateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RetryDelayInSecondssequenceUpdateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElems_RetryDelayInSecondssequenceUpdateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RetryDelayInSecondssequenceUpdateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AvailableParameterssequenceOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_ struct {
	AvailableParameterses []*TxsdOperationInformationSequenceAvailableParameters `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AvailableParameters"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AvailableParameterssequenceOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AvailableParameterssequenceOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AvailableParameterssequenceOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_ instance.
func (me *XsdGoPkgHasElems_AvailableParameterssequenceOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AvailableParameterssequenceOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AvailableParameterses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_ struct {
	GetHITsForQualificationTypeResult *TGetHITsForQualificationTypeResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITsForQualificationTypeResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_ instance.
func (me *XsdGoPkgHasElem_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetHITsForQualificationTypeResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_ struct {
	GetBlockedWorkersResult *TGetBlockedWorkersResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBlockedWorkersResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_ instance.
func (me *XsdGoPkgHasElem_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetBlockedWorkersResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_ struct {
	GetHITRequests []*TGetHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_ instance.
func (me *XsdGoPkgHasElems_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetHITRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HITIdsequenceGetReviewResultsForHITRequestschema_HITId_XsdtString_ struct {
	HITIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HITIdsequenceGetReviewResultsForHITRequestschema_HITId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HITIdsequenceGetReviewResultsForHITRequestschema_HITId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HITIdsequenceGetReviewResultsForHITRequestschema_HITId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_HITIdsequenceGetReviewResultsForHITRequestschema_HITId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HITIdsequenceGetReviewResultsForHITRequestschema_HITId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_ struct {
	HelpRequests []*THelpRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HelpRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_ instance.
func (me *XsdGoPkgHasElems_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HelpRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_ struct {
	AssignmentReviewPolicies []*TReviewPolicy `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignmentReviewPolicy"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_ instance.
func (me *XsdGoPkgHasElems_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssignmentReviewPolicies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_ struct {
	PolicyLevel TReviewPolicyLevel `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 PolicyLevel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_ instance.
func (me *XsdGoPkgHasElem_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_ struct {
	RevokeQualificationRequests []*TRevokeQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RevokeQualificationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_ instance.
func (me *XsdGoPkgHasElems_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RevokeQualificationRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_ struct {
	DisableHITResult *TDisableHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisableHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_ instance.
func (me *XsdGoPkgHasElem_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisableHITResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_ struct {
	Request *TCreateHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_ struct {
	Request *TExtendHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequesterFeedbacksequenceRejectAssignmentRequestschema_RequesterFeedback_XsdtString_ struct {
	RequesterFeedbacks []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RequesterFeedback"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequesterFeedbacksequenceRejectAssignmentRequestschema_RequesterFeedback_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequesterFeedbacksequenceRejectAssignmentRequestschema_RequesterFeedback_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequesterFeedbacksequenceRejectAssignmentRequestschema_RequesterFeedback_XsdtString_ instance.
func (me *XsdGoPkgHasElems_RequesterFeedbacksequenceRejectAssignmentRequestschema_RequesterFeedback_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequesterFeedbacksequenceRejectAssignmentRequestschema_RequesterFeedback_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceGetHITschema_Request_TGetHITRequest_ struct {
	Request *TGetHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetHITschema_Request_TGetHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceGetHITschema_Request_TGetHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceGetHITschema_Request_TGetHITRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceGetHITschema_Request_TGetHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetHITschema_Request_TGetHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TypesequenceClaimschema_Type_XsdtString_ struct {
	Type xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Type"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TypesequenceClaimschema_Type_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TypesequenceClaimschema_Type_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TypesequenceClaimschema_Type_XsdtString_ instance.
func (me *XsdGoPkgHasElem_TypesequenceClaimschema_Type_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TypesequenceClaimschema_Type_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_ struct {
	Request *TSendTestEventNotificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_ struct {
	Statuses []TQualificationStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Status"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_ instance.
func (me *XsdGoPkgHasElems_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_ struct {
	GetReviewableHITsResult *TGetReviewableHITsResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewableHITsResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_ instance.
func (me *XsdGoPkgHasElem_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetReviewableHITsResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TotalNumResultssequenceGetBonusPaymentsResultschema_TotalNumResults_XsdtInt_ struct {
	TotalNumResultses []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 TotalNumResults"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalNumResultssequenceGetBonusPaymentsResultschema_TotalNumResults_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalNumResultssequenceGetBonusPaymentsResultschema_TotalNumResults_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalNumResultssequenceGetBonusPaymentsResultschema_TotalNumResults_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_TotalNumResultssequenceGetBonusPaymentsResultschema_TotalNumResults_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalNumResultssequenceGetBonusPaymentsResultschema_TotalNumResults_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_ struct {
	PolicyNames []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 PolicyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_ struct {
	AutoGrantedValues []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AutoGrantedValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PageSizesequenceGetQualificationRequestsRequestschema_PageSize_XsdtInt_ struct {
	PageSizes []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 PageSize"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PageSizesequenceGetQualificationRequestsRequestschema_PageSize_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PageSizesequenceGetQualificationRequestsRequestschema_PageSize_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PageSizesequenceGetQualificationRequestsRequestschema_PageSize_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_PageSizesequenceGetQualificationRequestsRequestschema_PageSize_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PageSizesequenceGetQualificationRequestsRequestschema_PageSize_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_ struct {
	Request *TGetReviewableHITsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_ struct {
	NotifyWorkersRequests []*TNotifyWorkersRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_ instance.
func (me *XsdGoPkgHasElems_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NotifyWorkersRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TestsequenceQualificationTypeschema_Test_XsdtString_ struct {
	Tests []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Test"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TestsequenceQualificationTypeschema_Test_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TestsequenceQualificationTypeschema_Test_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TestsequenceQualificationTypeschema_Test_XsdtString_ instance.
func (me *XsdGoPkgHasElems_TestsequenceQualificationTypeschema_Test_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TestsequenceQualificationTypeschema_Test_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_ struct {
	WorkerBlock *TWorkerBlock `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 WorkerBlock"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_ instance.
func (me *XsdGoPkgHasElem_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.WorkerBlock.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_ struct {
	RejectionTimes []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectionTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_ struct {
	AutoGranteds []xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AutoGranted"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QuestionsequenceHITschema_Question_XsdtString_ struct {
	Questions []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Question"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QuestionsequenceHITschema_Question_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QuestionsequenceHITschema_Question_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QuestionsequenceHITschema_Question_XsdtString_ instance.
func (me *XsdGoPkgHasElems_QuestionsequenceHITschema_Question_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QuestionsequenceHITschema_Question_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_ struct {
	GrantBonusResult *TGrantBonusResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantBonusResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_ instance.
func (me *XsdGoPkgHasElem_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GrantBonusResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_KeysequenceReviewResultDetailschema_Key_XsdtString_ struct {
	Keys []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Key"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KeysequenceReviewResultDetailschema_Key_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KeysequenceReviewResultDetailschema_Key_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KeysequenceReviewResultDetailschema_Key_XsdtString_ instance.
func (me *XsdGoPkgHasElems_KeysequenceReviewResultDetailschema_Key_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_KeysequenceReviewResultDetailschema_Key_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_ struct {
	QualificationRequestIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationRequestId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_ struct {
	GetAssignmentsForHITResult *TGetAssignmentsForHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentsForHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_ instance.
func (me *XsdGoPkgHasElem_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAssignmentsForHITResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_ struct {
	SetHITAsReviewingRequests []*TSetHITAsReviewingRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITAsReviewingRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_ instance.
func (me *XsdGoPkgHasElems_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SetHITAsReviewingRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_ struct {
	Request *TGetRequesterStatisticRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_ struct {
	FormattedPrices []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 FormattedPrice"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_ instance.
func (me *XsdGoPkgHasElems_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_ struct {
	Request *TGetHITsForQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_ struct {
	Request *TGetQualificationRequestsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_ struct {
	GetRequesterWorkerStatisticRequests []*TGetRequesterWorkerStatisticRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterWorkerStatisticRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_ instance.
func (me *XsdGoPkgHasElems_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetRequesterWorkerStatisticRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_ struct {
	Reverts []xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Revert"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_ struct {
	RegisterHITTypeResult *TRegisterHITTypeResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RegisterHITTypeResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_ instance.
func (me *XsdGoPkgHasElem_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RegisterHITTypeResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_ struct {
	MessageTexts []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MessageText"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_ instance.
func (me *XsdGoPkgHasElems_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceNotifyWorkersschema_Request_TNotifyWorkersRequest_ struct {
	Request *TNotifyWorkersRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceNotifyWorkersschema_Request_TNotifyWorkersRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceNotifyWorkersschema_Request_TNotifyWorkersRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceNotifyWorkersschema_Request_TNotifyWorkersRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceNotifyWorkersschema_Request_TNotifyWorkersRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceNotifyWorkersschema_Request_TNotifyWorkersRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_ struct {
	ActionIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ActionId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_ struct {
	ErrorCodes []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ErrorCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DescriptionsequenceUpdateQualificationTypeRequestschema_Description_XsdtString_ struct {
	Descriptions []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Description"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DescriptionsequenceUpdateQualificationTypeRequestschema_Description_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DescriptionsequenceUpdateQualificationTypeRequestschema_Description_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DescriptionsequenceUpdateQualificationTypeRequestschema_Description_XsdtString_ instance.
func (me *XsdGoPkgHasElems_DescriptionsequenceUpdateQualificationTypeRequestschema_Description_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DescriptionsequenceUpdateQualificationTypeRequestschema_Description_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DatesequenceDataPointschema_Date_XsdtDateTime_ struct {
	Dates []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Date"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DatesequenceDataPointschema_Date_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DatesequenceDataPointschema_Date_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DatesequenceDataPointschema_Date_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_DatesequenceDataPointschema_Date_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DatesequenceDataPointschema_Date_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubjectIdsequenceQualificationschema_SubjectId_XsdtString_ struct {
	SubjectIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SubjectId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubjectIdsequenceQualificationschema_SubjectId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubjectIdsequenceQualificationschema_SubjectId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubjectIdsequenceQualificationschema_SubjectId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_SubjectIdsequenceQualificationschema_SubjectId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubjectIdsequenceQualificationschema_SubjectId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ChangeHITTypeOfHITResultsequenceChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_ struct {
	ChangeHITTypeOfHITResult *TChangeHITTypeOfHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ChangeHITTypeOfHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ChangeHITTypeOfHITResultsequenceChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ChangeHITTypeOfHITResultsequenceChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ChangeHITTypeOfHITResultsequenceChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_ instance.
func (me *XsdGoPkgHasElem_ChangeHITTypeOfHITResultsequenceChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ChangeHITTypeOfHITResultsequenceChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ChangeHITTypeOfHITResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_ struct {
	SearchQualificationTypesResult *TSearchQualificationTypesResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchQualificationTypesResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_ instance.
func (me *XsdGoPkgHasElem_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SearchQualificationTypesResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_ struct {
	Transports []TNotificationTransport `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Transport"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_ instance.
func (me *XsdGoPkgHasElems_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequesterAnnotationsequenceHITschema_RequesterAnnotation_XsdtString_ struct {
	RequesterAnnotations []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RequesterAnnotation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequesterAnnotationsequenceHITschema_RequesterAnnotation_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequesterAnnotationsequenceHITschema_RequesterAnnotation_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequesterAnnotationsequenceHITschema_RequesterAnnotation_XsdtString_ instance.
func (me *XsdGoPkgHasElems_RequesterAnnotationsequenceHITschema_RequesterAnnotation_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequesterAnnotationsequenceHITschema_RequesterAnnotation_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssignmentDurationInSecondssequenceRegisterHITTypeRequestschema_AssignmentDurationInSeconds_XsdtLong_ struct {
	AssignmentDurationInSecondses []xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignmentDurationInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssignmentDurationInSecondssequenceRegisterHITTypeRequestschema_AssignmentDurationInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssignmentDurationInSecondssequenceRegisterHITTypeRequestschema_AssignmentDurationInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssignmentDurationInSecondssequenceRegisterHITTypeRequestschema_AssignmentDurationInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElems_AssignmentDurationInSecondssequenceRegisterHITTypeRequestschema_AssignmentDurationInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssignmentDurationInSecondssequenceRegisterHITTypeRequestschema_AssignmentDurationInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_ struct {
	Data *TKeyValuePair `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Data"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_ instance.
func (me *XsdGoPkgHasElem_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Data.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetHITsForQualificationTypeRequestsequenceRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_ struct {
	GetHITsForQualificationTypeRequests []*TGetHITsForQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetHITsForQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetHITsForQualificationTypeRequestsequenceRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetHITsForQualificationTypeRequestsequenceRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetHITsForQualificationTypeRequestsequenceRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_GetHITsForQualificationTypeRequestsequenceRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetHITsForQualificationTypeRequestsequenceRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetHITsForQualificationTypeRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssignmentIdsequenceRejectAssignmentRequestschema_AssignmentId_XsdtString_ struct {
	AssignmentIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignmentId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssignmentIdsequenceRejectAssignmentRequestschema_AssignmentId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssignmentIdsequenceRejectAssignmentRequestschema_AssignmentId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssignmentIdsequenceRejectAssignmentRequestschema_AssignmentId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AssignmentIdsequenceRejectAssignmentRequestschema_AssignmentId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssignmentIdsequenceRejectAssignmentRequestschema_AssignmentId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NumResultssequenceSearchQualificationTypesResultschema_NumResults_XsdtInt_ struct {
	NumResultses []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NumResults"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NumResultssequenceSearchQualificationTypesResultschema_NumResults_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NumResultssequenceSearchQualificationTypesResultschema_NumResults_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NumResultssequenceSearchQualificationTypesResultschema_NumResults_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_NumResultssequenceSearchQualificationTypesResultschema_NumResults_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NumResultssequenceSearchQualificationTypesResultschema_NumResults_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceUnblockWorkerschema_Request_TUnblockWorkerRequest_ struct {
	Request *TUnblockWorkerRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceUnblockWorkerschema_Request_TUnblockWorkerRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceUnblockWorkerschema_Request_TUnblockWorkerRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceUnblockWorkerschema_Request_TUnblockWorkerRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceUnblockWorkerschema_Request_TUnblockWorkerRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceUnblockWorkerschema_Request_TUnblockWorkerRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssignQualificationResultsequenceAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_ struct {
	AssignQualificationResult *TAssignQualificationResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignQualificationResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssignQualificationResultsequenceAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssignQualificationResultsequenceAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AssignQualificationResultsequenceAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_ instance.
func (me *XsdGoPkgHasElem_AssignQualificationResultsequenceAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssignQualificationResultsequenceAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssignQualificationResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_ struct {
	ObjectTypes []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ObjectType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_ struct {
	AvailableBalances []*TPrice `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AvailableBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_ instance.
func (me *XsdGoPkgHasElems_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AvailableBalances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_KeywordssequenceHITschema_Keywords_XsdtString_ struct {
	Keywordses []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Keywords"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KeywordssequenceHITschema_Keywords_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KeywordssequenceHITschema_Keywords_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KeywordssequenceHITschema_Keywords_XsdtString_ instance.
func (me *XsdGoPkgHasElems_KeywordssequenceHITschema_Keywords_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_KeywordssequenceHITschema_Keywords_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_ struct {
	DefaultResponseGroupses []*TxsdOperationInformationSequenceDefaultResponseGroups `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DefaultResponseGroups"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_ instance.
func (me *XsdGoPkgHasElems_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DefaultResponseGroupses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UpdateQualificationTypeRequestsequenceRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_ struct {
	UpdateQualificationTypeRequests []*TUpdateQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UpdateQualificationTypeRequestsequenceRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UpdateQualificationTypeRequestsequenceRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UpdateQualificationTypeRequestsequenceRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_UpdateQualificationTypeRequestsequenceRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UpdateQualificationTypeRequestsequenceRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UpdateQualificationTypeRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubmitTimesequenceQualificationRequestschema_SubmitTime_XsdtDateTime_ struct {
	SubmitTimes []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SubmitTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubmitTimesequenceQualificationRequestschema_SubmitTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubmitTimesequenceQualificationRequestschema_SubmitTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubmitTimesequenceQualificationRequestschema_SubmitTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_SubmitTimesequenceQualificationRequestschema_SubmitTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubmitTimesequenceQualificationRequestschema_SubmitTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_ struct {
	DisposeQualificationTypeResult *TDisposeQualificationTypeResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeQualificationTypeResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_ instance.
func (me *XsdGoPkgHasElem_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisposeQualificationTypeResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_ struct {
	DisposeHITRequests []*TDisposeHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_ instance.
func (me *XsdGoPkgHasElems_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisposeHITRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_ struct {
	HITLayoutIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITLayoutId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_ struct {
	Subdivisions []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Subdivision"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_ instance.
func (me *XsdGoPkgHasElems_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_ struct {
	QualificationRequirement *TQualificationRequirement `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationRequirement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_ instance.
func (me *XsdGoPkgHasElem_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.QualificationRequirement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_ struct {
	GetAssignmentsForHITRequests []*TGetAssignmentsForHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentsForHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_ instance.
func (me *XsdGoPkgHasElems_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAssignmentsForHITRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_ struct {
	SendNotifications []xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SendNotification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_ struct {
	Messages []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Message"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_ instance.
func (me *XsdGoPkgHasElems_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_ struct {
	MustBeRequestables []xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MustBeRequestable"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApproveAssignmentRequestsequenceRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_ struct {
	ApproveAssignmentRequests []*TApproveAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveAssignmentRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApproveAssignmentRequestsequenceRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApproveAssignmentRequestsequenceRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApproveAssignmentRequestsequenceRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_ instance.
func (me *XsdGoPkgHasElems_ApproveAssignmentRequestsequenceRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApproveAssignmentRequestsequenceRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ApproveAssignmentRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_ struct {
	RequiredParameterses []*TxsdOperationInformationSequenceRequiredParameters `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RequiredParameters"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_ instance.
func (me *XsdGoPkgHasElems_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RequiredParameterses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_ struct {
	DisposeQualificationTypeRequests []*TDisposeQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DisposeQualificationTypeRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_ struct {
	ReviewResult *TReviewResultDetail `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ReviewResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_ instance.
func (me *XsdGoPkgHasElem_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReviewResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_ struct {
	GrantBonusRequests []*TGrantBonusRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantBonusRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_ instance.
func (me *XsdGoPkgHasElems_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GrantBonusRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_ struct {
	Request *TGetAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_ struct {
	Request *TGetRequesterWorkerStatisticRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_ struct {
	Request *TRejectQualificationRequestRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_ struct {
	Request *TGetAssignmentsForHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_ struct {
	Request *TCreateQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_ struct {
	Deadlines []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Deadline"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OperationsequenceValidOperationssequenceResponseGroupInformationschema_Operation_XsdtString_ struct {
	Operation xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Operation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OperationsequenceValidOperationssequenceResponseGroupInformationschema_Operation_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OperationsequenceValidOperationssequenceResponseGroupInformationschema_Operation_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OperationsequenceValidOperationssequenceResponseGroupInformationschema_Operation_XsdtString_ instance.
func (me *XsdGoPkgHasElem_OperationsequenceValidOperationssequenceResponseGroupInformationschema_Operation_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OperationsequenceValidOperationssequenceResponseGroupInformationschema_Operation_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_ struct {
	NumberOfAssignmentsPendings []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NumberOfAssignmentsPending"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_ struct {
	AssignmentReviewReports []*TReviewReport `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignmentReviewReport"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_ instance.
func (me *XsdGoPkgHasElems_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssignmentReviewReports {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RejectAssignmentResultsequenceRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_ struct {
	RejectAssignmentResult *TRejectAssignmentResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectAssignmentResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RejectAssignmentResultsequenceRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RejectAssignmentResultsequenceRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RejectAssignmentResultsequenceRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_ instance.
func (me *XsdGoPkgHasElem_RejectAssignmentResultsequenceRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RejectAssignmentResultsequenceRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RejectAssignmentResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TestDurationInSecondssequenceQualificationTypeschema_TestDurationInSeconds_XsdtLong_ struct {
	TestDurationInSecondses []xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 TestDurationInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TestDurationInSecondssequenceQualificationTypeschema_TestDurationInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TestDurationInSecondssequenceQualificationTypeschema_TestDurationInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TestDurationInSecondssequenceQualificationTypeschema_TestDurationInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElems_TestDurationInSecondssequenceQualificationTypeschema_TestDurationInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TestDurationInSecondssequenceQualificationTypeschema_TestDurationInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_ struct {
	Request *TUpdateQualificationScoreRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_ struct {
	Request *TDisposeHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_ struct {
	IsRequestables []xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 IsRequestable"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_ struct {
	SearchHITsResult *TSearchHITsResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchHITsResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_ instance.
func (me *XsdGoPkgHasElem_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SearchHITsResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TitlesequenceHITschema_Title_XsdtString_ struct {
	Titles []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Title"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TitlesequenceHITschema_Title_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TitlesequenceHITschema_Title_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TitlesequenceHITschema_Title_XsdtString_ instance.
func (me *XsdGoPkgHasElems_TitlesequenceHITschema_Title_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TitlesequenceHITschema_Title_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HITStatussequenceHITschema_HITStatus_THITStatus_ struct {
	HITStatuses []THITStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HITStatussequenceHITschema_HITStatus_THITStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HITStatussequenceHITschema_HITStatus_THITStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HITStatussequenceHITschema_HITStatus_THITStatus_ instance.
func (me *XsdGoPkgHasElems_HITStatussequenceHITschema_HITStatus_THITStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HITStatussequenceHITschema_HITStatus_THITStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_ struct {
	UpdateQualificationScoreResult *TUpdateQualificationScoreResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UpdateQualificationScoreResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_ instance.
func (me *XsdGoPkgHasElem_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UpdateQualificationScoreResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssignQualificationRequestsequenceRequestschema_AssignQualificationRequest_TAssignQualificationRequest_ struct {
	AssignQualificationRequests []*TAssignQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AssignQualificationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssignQualificationRequestsequenceRequestschema_AssignQualificationRequest_TAssignQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssignQualificationRequestsequenceRequestschema_AssignQualificationRequest_TAssignQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssignQualificationRequestsequenceRequestschema_AssignQualificationRequest_TAssignQualificationRequest_ instance.
func (me *XsdGoPkgHasElems_AssignQualificationRequestsequenceRequestschema_AssignQualificationRequest_TAssignQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssignQualificationRequestsequenceRequestschema_AssignQualificationRequest_TAssignQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssignQualificationRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_ struct {
	Request *TGetQualificationsForQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ForceExpireHITResultsequenceForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_ struct {
	ForceExpireHITResult *TForceExpireHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ForceExpireHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ForceExpireHITResultsequenceForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ForceExpireHITResultsequenceForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ForceExpireHITResultsequenceForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_ instance.
func (me *XsdGoPkgHasElem_ForceExpireHITResultsequenceForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ForceExpireHITResultsequenceForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ForceExpireHITResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_ struct {
	QuestionIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QuestionId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_ struct {
	CreationTimes []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreationTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_ struct {
	Request *TChangeHITTypeOfHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_ struct {
	Request *TUpdateQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceSearchHITsschema_Request_TSearchHITsRequest_ struct {
	Request *TSearchHITsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceSearchHITsschema_Request_TSearchHITsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceSearchHITsschema_Request_TSearchHITsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceSearchHITsschema_Request_TSearchHITsRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceSearchHITsschema_Request_TSearchHITsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceSearchHITsschema_Request_TSearchHITsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_ struct {
	CurrencyCodes []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CurrencyCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GrantQualificationResultsequenceGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_ struct {
	GrantQualificationResult *TGrantQualificationResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GrantQualificationResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GrantQualificationResultsequenceGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GrantQualificationResultsequenceGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GrantQualificationResultsequenceGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_ instance.
func (me *XsdGoPkgHasElem_GrantQualificationResultsequenceGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GrantQualificationResultsequenceGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GrantQualificationResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetReviewableHITsRequestsequenceRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_ struct {
	GetReviewableHITsRequests []*TGetReviewableHITsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewableHITsRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetReviewableHITsRequestsequenceRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetReviewableHITsRequestsequenceRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetReviewableHITsRequestsequenceRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_ instance.
func (me *XsdGoPkgHasElems_GetReviewableHITsRequestsequenceRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetReviewableHITsRequestsequenceRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetReviewableHITsRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_ struct {
	Request *TGetReviewResultsForHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExpirationsequenceHITschema_Expiration_XsdtDateTime_ struct {
	Expirations []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Expiration"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExpirationsequenceHITschema_Expiration_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExpirationsequenceHITschema_Expiration_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExpirationsequenceHITschema_Expiration_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_ExpirationsequenceHITschema_Expiration_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExpirationsequenceHITschema_Expiration_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UniqueRequestTokensequenceGrantBonusRequestschema_UniqueRequestToken_XsdtString_ struct {
	UniqueRequestTokens []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UniqueRequestToken"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UniqueRequestTokensequenceGrantBonusRequestschema_UniqueRequestToken_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UniqueRequestTokensequenceGrantBonusRequestschema_UniqueRequestToken_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UniqueRequestTokensequenceGrantBonusRequestschema_UniqueRequestToken_XsdtString_ instance.
func (me *XsdGoPkgHasElems_UniqueRequestTokensequenceGrantBonusRequestschema_UniqueRequestToken_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UniqueRequestTokensequenceGrantBonusRequestschema_UniqueRequestToken_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_ struct {
	QuestionIdentifiers []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QuestionIdentifier"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_ instance.
func (me *XsdGoPkgHasElems_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceRegisterHITTypeschema_Request_TRegisterHITTypeRequest_ struct {
	Request *TRegisterHITTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceRegisterHITTypeschema_Request_TRegisterHITTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceRegisterHITTypeschema_Request_TRegisterHITTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceRegisterHITTypeschema_Request_TRegisterHITTypeRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceRegisterHITTypeschema_Request_TRegisterHITTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceRegisterHITTypeschema_Request_TRegisterHITTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_ struct {
	Notifications []*TNotificationSpecification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Notification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_ instance.
func (me *XsdGoPkgHasElems_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Notifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_ struct {
	Destinations []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Destination"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_ instance.
func (me *XsdGoPkgHasElems_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CreateQualificationTypeRequestsequenceRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_ struct {
	CreateQualificationTypeRequests []*TCreateQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CreateQualificationTypeRequestsequenceRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CreateQualificationTypeRequestsequenceRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CreateQualificationTypeRequestsequenceRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_CreateQualificationTypeRequestsequenceRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CreateQualificationTypeRequestsequenceRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CreateQualificationTypeRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HITReviewPolicysequenceGetReviewResultsForHITResultschema_HITReviewPolicy_TReviewPolicy_ struct {
	HITReviewPolicies []*TReviewPolicy `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITReviewPolicy"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HITReviewPolicysequenceGetReviewResultsForHITResultschema_HITReviewPolicy_TReviewPolicy_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HITReviewPolicysequenceGetReviewResultsForHITResultschema_HITReviewPolicy_TReviewPolicy_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HITReviewPolicysequenceGetReviewResultsForHITResultschema_HITReviewPolicy_TReviewPolicy_ instance.
func (me *XsdGoPkgHasElems_HITReviewPolicysequenceGetReviewResultsForHITResultschema_HITReviewPolicy_TReviewPolicy_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HITReviewPolicysequenceGetReviewResultsForHITResultschema_HITReviewPolicy_TReviewPolicy_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HITReviewPolicies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_ struct {
	Element xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Element"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_ struct {
	HITLayoutParameter *THITLayoutParameter `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITLayoutParameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_ instance.
func (me *XsdGoPkgHasElem_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HITLayoutParameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_ struct {
	GetQualificationRequestsRequests []*TGetQualificationRequestsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationRequestsRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_ instance.
func (me *XsdGoPkgHasElems_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationRequestsRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_ struct {
	Request *TSetHITAsReviewingRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AutoApprovalDelayInSecondssequenceHITschema_AutoApprovalDelayInSeconds_XsdtLong_ struct {
	AutoApprovalDelayInSecondses []xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AutoApprovalDelayInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AutoApprovalDelayInSecondssequenceHITschema_AutoApprovalDelayInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AutoApprovalDelayInSecondssequenceHITschema_AutoApprovalDelayInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AutoApprovalDelayInSecondssequenceHITschema_AutoApprovalDelayInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElems_AutoApprovalDelayInSecondssequenceHITschema_AutoApprovalDelayInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AutoApprovalDelayInSecondssequenceHITschema_AutoApprovalDelayInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceGrantQualificationschema_Request_TGrantQualificationRequest_ struct {
	Request *TGrantQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceGrantQualificationschema_Request_TGrantQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceGrantQualificationschema_Request_TGrantQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceGrantQualificationschema_Request_TGrantQualificationRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceGrantQualificationschema_Request_TGrantQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceGrantQualificationschema_Request_TGrantQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_ struct {
	Request *TDisposeQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_ struct {
	Request *TRevokeQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_ struct {
	Request *TGetBonusPaymentsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_ struct {
	SortProperties []TGetQualificationRequestsSortProperty `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_ instance.
func (me *XsdGoPkgHasElems_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_ struct {
	GetRequesterStatisticRequests []*TGetRequesterStatisticRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetRequesterStatisticRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_ instance.
func (me *XsdGoPkgHasElems_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetRequesterStatisticRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_ struct {
	Codes []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Code"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_ struct {
	NotifyWorkersFailureCodes []TNotifyWorkersFailureCode `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersFailureCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_ instance.
func (me *XsdGoPkgHasElems_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_ struct {
	ValidOperationses []*TxsdResponseGroupInformationSequenceValidOperations `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ValidOperations"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_ instance.
func (me *XsdGoPkgHasElems_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ValidOperationses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_ struct {
	Statuses []TReviewActionStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Status"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_ instance.
func (me *XsdGoPkgHasElems_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetReviewResultsForHITResultsequenceGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_ struct {
	GetReviewResultsForHITResult *TGetReviewResultsForHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewResultsForHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetReviewResultsForHITResultsequenceGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetReviewResultsForHITResultsequenceGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetReviewResultsForHITResultsequenceGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_ instance.
func (me *XsdGoPkgHasElem_GetReviewResultsForHITResultsequenceGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetReviewResultsForHITResultsequenceGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetReviewResultsForHITResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_ struct {
	QualificationTypeStatuses []TQualificationTypeStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationTypeStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_ instance.
func (me *XsdGoPkgHasElems_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_ struct {
	Unuseds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Unused"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_ instance.
func (me *XsdGoPkgHasElems_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BodysequenceClaimschema_Body_XsdtString_ struct {
	Body xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Body"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BodysequenceClaimschema_Body_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BodysequenceClaimschema_Body_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BodysequenceClaimschema_Body_XsdtString_ instance.
func (me *XsdGoPkgHasElem_BodysequenceClaimschema_Body_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BodysequenceClaimschema_Body_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_ struct {
	GetAssignmentRequests []*TGetAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAssignmentRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_ instance.
func (me *XsdGoPkgHasElems_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAssignmentRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AnswerKeysequenceQualificationTypeschema_AnswerKey_XsdtString_ struct {
	AnswerKeys []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AnswerKey"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnswerKeysequenceQualificationTypeschema_AnswerKey_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnswerKeysequenceQualificationTypeschema_AnswerKey_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnswerKeysequenceQualificationTypeschema_AnswerKey_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AnswerKeysequenceQualificationTypeschema_AnswerKey_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnswerKeysequenceQualificationTypeschema_AnswerKey_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetReviewResultsForHITRequestsequenceRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_ struct {
	GetReviewResultsForHITRequests []*TGetReviewResultsForHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetReviewResultsForHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetReviewResultsForHITRequestsequenceRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetReviewResultsForHITRequestsequenceRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetReviewResultsForHITRequestsequenceRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_ instance.
func (me *XsdGoPkgHasElems_GetReviewResultsForHITRequestsequenceRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetReviewResultsForHITRequestsequenceRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetReviewResultsForHITRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HITTypeIdsequenceRegisterHITTypeResultschema_HITTypeId_XsdtString_ struct {
	HITTypeIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITTypeId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HITTypeIdsequenceRegisterHITTypeResultschema_HITTypeId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HITTypeIdsequenceRegisterHITTypeResultschema_HITTypeId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HITTypeIdsequenceRegisterHITTypeResultschema_HITTypeId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_HITTypeIdsequenceRegisterHITTypeResultschema_HITTypeId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HITTypeIdsequenceRegisterHITTypeResultschema_HITTypeId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_ struct {
	SortProperties []TGetAssignmentsForHITSortProperty `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_ instance.
func (me *XsdGoPkgHasElems_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReasonsequenceBonusPaymentschema_Reason_XsdtString_ struct {
	Reasons []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Reason"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReasonsequenceBonusPaymentschema_Reason_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReasonsequenceBonusPaymentschema_Reason_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReasonsequenceBonusPaymentschema_Reason_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ReasonsequenceBonusPaymentschema_Reason_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReasonsequenceBonusPaymentschema_Reason_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CountsequenceGetRequesterWorkerStatisticRequestschema_Count_XsdtInt_ struct {
	Counts []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Count"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CountsequenceGetRequesterWorkerStatisticRequestschema_Count_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CountsequenceGetRequesterWorkerStatisticRequestschema_Count_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CountsequenceGetRequesterWorkerStatisticRequestschema_Count_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_CountsequenceGetRequesterWorkerStatisticRequestschema_Count_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CountsequenceGetRequesterWorkerStatisticRequestschema_Count_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TypesequenceClaimschema_Type_XsdtString_ struct {
	Types []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Type"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TypesequenceClaimschema_Type_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TypesequenceClaimschema_Type_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TypesequenceClaimschema_Type_XsdtString_ instance.
func (me *XsdGoPkgHasElems_TypesequenceClaimschema_Type_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TypesequenceClaimschema_Type_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SortDirectionsequenceSearchHITsRequestschema_SortDirection_TSortDirection_ struct {
	SortDirections []TSortDirection `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortDirection"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SortDirectionsequenceSearchHITsRequestschema_SortDirection_TSortDirection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SortDirectionsequenceSearchHITsRequestschema_SortDirection_TSortDirection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SortDirectionsequenceSearchHITsRequestschema_SortDirection_TSortDirection_ instance.
func (me *XsdGoPkgHasElems_SortDirectionsequenceSearchHITsRequestschema_SortDirection_TSortDirection_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SortDirectionsequenceSearchHITsRequestschema_SortDirection_TSortDirection_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationsForQualificationTypeResultsequenceGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_ struct {
	GetQualificationsForQualificationTypeResult *TGetQualificationsForQualificationTypeResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationsForQualificationTypeResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationsForQualificationTypeResultsequenceGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationsForQualificationTypeResultsequenceGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationsForQualificationTypeResultsequenceGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_ instance.
func (me *XsdGoPkgHasElem_GetQualificationsForQualificationTypeResultsequenceGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationsForQualificationTypeResultsequenceGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationsForQualificationTypeResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_ struct {
	AutoApprovalTimes []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AutoApprovalTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_ struct {
	LifetimeInSecondses []xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 LifetimeInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElems_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ForceExpireHITRequestsequenceRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_ struct {
	ForceExpireHITRequests []*TForceExpireHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ForceExpireHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ForceExpireHITRequestsequenceRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ForceExpireHITRequestsequenceRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ForceExpireHITRequestsequenceRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_ instance.
func (me *XsdGoPkgHasElems_ForceExpireHITRequestsequenceRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ForceExpireHITRequestsequenceRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForceExpireHITRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_ struct {
	Request *TGetAccountBalanceRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_ struct {
	RejectQualificationRequestResult *TRejectQualificationRequestResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectQualificationRequestResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_ instance.
func (me *XsdGoPkgHasElem_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RejectQualificationRequestResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_ struct {
	SetHITTypeNotificationResult *TSetHITTypeNotificationResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SetHITTypeNotificationResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_ instance.
func (me *XsdGoPkgHasElem_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SetHITTypeNotificationResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BlockWorkerRequestsequenceRequestschema_BlockWorkerRequest_TBlockWorkerRequest_ struct {
	BlockWorkerRequests []*TBlockWorkerRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BlockWorkerRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BlockWorkerRequestsequenceRequestschema_BlockWorkerRequest_TBlockWorkerRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BlockWorkerRequestsequenceRequestschema_BlockWorkerRequest_TBlockWorkerRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BlockWorkerRequestsequenceRequestschema_BlockWorkerRequest_TBlockWorkerRequest_ instance.
func (me *XsdGoPkgHasElems_BlockWorkerRequestsequenceRequestschema_BlockWorkerRequest_TBlockWorkerRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BlockWorkerRequestsequenceRequestschema_BlockWorkerRequest_TBlockWorkerRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BlockWorkerRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_ struct {
	GetBonusPaymentsRequests []*TGetBonusPaymentsRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBonusPaymentsRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_ instance.
func (me *XsdGoPkgHasElems_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetBonusPaymentsRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SendTestEventNotificationResultsequenceSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_ struct {
	SendTestEventNotificationResult *TSendTestEventNotificationResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SendTestEventNotificationResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SendTestEventNotificationResultsequenceSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SendTestEventNotificationResultsequenceSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SendTestEventNotificationResultsequenceSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_ instance.
func (me *XsdGoPkgHasElem_SendTestEventNotificationResultsequenceSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SendTestEventNotificationResultsequenceSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SendTestEventNotificationResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AboutsequenceHelpRequestschema_About_XsdtString_ struct {
	About xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 About"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AboutsequenceHelpRequestschema_About_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AboutsequenceHelpRequestschema_About_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AboutsequenceHelpRequestschema_About_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AboutsequenceHelpRequestschema_About_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AboutsequenceHelpRequestschema_About_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApproveAssignmentResultsequenceApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_ struct {
	ApproveAssignmentResult *TApproveAssignmentResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveAssignmentResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApproveAssignmentResultsequenceApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApproveAssignmentResultsequenceApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ApproveAssignmentResultsequenceApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_ instance.
func (me *XsdGoPkgHasElem_ApproveAssignmentResultsequenceApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApproveAssignmentResultsequenceApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ApproveAssignmentResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HeadersequenceHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_ struct {
	Header *TxsdHTTPHeadersSequenceHeader `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Header"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HeadersequenceHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HeadersequenceHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HeadersequenceHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_ instance.
func (me *XsdGoPkgHasElem_HeadersequenceHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HeadersequenceHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Header.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_ struct {
	ActionNames []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ActionName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_ struct {
	QualificationRequest *TQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 QualificationRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_ instance.
func (me *XsdGoPkgHasElem_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.QualificationRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QualificationsequenceGetQualificationScoreResponseschema_Qualification_TQualification_ struct {
	Qualification *TQualification `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Qualification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QualificationsequenceGetQualificationScoreResponseschema_Qualification_TQualification_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QualificationsequenceGetQualificationScoreResponseschema_Qualification_TQualification_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_QualificationsequenceGetQualificationScoreResponseschema_Qualification_TQualification_ instance.
func (me *XsdGoPkgHasElem_QualificationsequenceGetQualificationScoreResponseschema_Qualification_TQualification_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QualificationsequenceGetQualificationScoreResponseschema_Qualification_TQualification_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Qualification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_ struct {
	OnHoldBalances []*TPrice `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 OnHoldBalance"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_ instance.
func (me *XsdGoPkgHasElems_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OnHoldBalances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationTypeRequestsequenceRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_ struct {
	GetQualificationTypeRequests []*TGetQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationTypeRequestsequenceRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationTypeRequestsequenceRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationTypeRequestsequenceRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_GetQualificationTypeRequestsequenceRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationTypeRequestsequenceRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationTypeRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CreateHITRequestsequenceRequestschema_CreateHITRequest_TCreateHITRequest_ struct {
	CreateHITRequests []*TCreateHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreateHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CreateHITRequestsequenceRequestschema_CreateHITRequest_TCreateHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CreateHITRequestsequenceRequestschema_CreateHITRequest_TCreateHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CreateHITRequestsequenceRequestschema_CreateHITRequest_TCreateHITRequest_ instance.
func (me *XsdGoPkgHasElems_CreateHITRequestsequenceRequestschema_CreateHITRequest_TCreateHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CreateHITRequestsequenceRequestschema_CreateHITRequest_TCreateHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CreateHITRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceBlockWorkerschema_Request_TBlockWorkerRequest_ struct {
	Request *TBlockWorkerRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceBlockWorkerschema_Request_TBlockWorkerRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceBlockWorkerschema_Request_TBlockWorkerRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceBlockWorkerschema_Request_TBlockWorkerRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceBlockWorkerschema_Request_TBlockWorkerRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceBlockWorkerschema_Request_TBlockWorkerRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AmountsequencePriceschema_Amount_XsdtDecimal_ struct {
	Amounts []xsdt.Decimal `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Amount"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AmountsequencePriceschema_Amount_XsdtDecimal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AmountsequencePriceschema_Amount_XsdtDecimal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AmountsequencePriceschema_Amount_XsdtDecimal_ instance.
func (me *XsdGoPkgHasElems_AmountsequencePriceschema_Amount_XsdtDecimal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AmountsequencePriceschema_Amount_XsdtDecimal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_ struct {
	Error *TxsdErrorsSequenceError `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Error"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_ instance.
func (me *XsdGoPkgHasElem_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Error.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_ struct {
	Elementses []*TxsdResponseGroupInformationSequenceElements `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Elements"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_ instance.
func (me *XsdGoPkgHasElems_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Elementses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_ struct {
	GetFileUploadURLResult *TGetFileUploadURLResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetFileUploadURLResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_ instance.
func (me *XsdGoPkgHasElem_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetFileUploadURLResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CountrysequenceLocaleschema_Country_XsdtString_ struct {
	Countries []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Country"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CountrysequenceLocaleschema_Country_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CountrysequenceLocaleschema_Country_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CountrysequenceLocaleschema_Country_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CountrysequenceLocaleschema_Country_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CountrysequenceLocaleschema_Country_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_ struct {
	TestEventTypes []TEventType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 TestEventType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_ instance.
func (me *XsdGoPkgHasElems_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_ struct {
	Request *TGetBlockedWorkersRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_ struct {
	HITReviewReports []*TReviewReport `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITReviewReport"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_ instance.
func (me *XsdGoPkgHasElems_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HITReviewReports {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceRejectAssignmentschema_Request_TRejectAssignmentRequest_ struct {
	Request *TRejectAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceRejectAssignmentschema_Request_TRejectAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceRejectAssignmentschema_Request_TRejectAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceRejectAssignmentschema_Request_TRejectAssignmentRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceRejectAssignmentschema_Request_TRejectAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceRejectAssignmentschema_Request_TRejectAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_ struct {
	ExtendHITResult *TExtendHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ExtendHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_ instance.
func (me *XsdGoPkgHasElem_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ExtendHITResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_ struct {
	AcceptTimes []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AcceptTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_ struct {
	Request *TGetFileUploadURLRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_ struct {
	Actives []xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Active"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetAccountBalanceRequestsequenceRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_ struct {
	GetAccountBalanceRequests []*TGetAccountBalanceRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAccountBalanceRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetAccountBalanceRequestsequenceRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetAccountBalanceRequestsequenceRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetAccountBalanceRequestsequenceRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_ instance.
func (me *XsdGoPkgHasElems_GetAccountBalanceRequestsequenceRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetAccountBalanceRequestsequenceRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetAccountBalanceRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_ struct {
	NotifyWorkersFailureStatus *TNotifyWorkersFailureStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersFailureStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_ instance.
func (me *XsdGoPkgHasElem_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NotifyWorkersFailureStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TimePeriodsequenceGetRequesterWorkerStatisticRequestschema_TimePeriod_TimePeriod_ struct {
	TimePeriods []TimePeriod `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 TimePeriod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimePeriodsequenceGetRequesterWorkerStatisticRequestschema_TimePeriod_TimePeriod_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimePeriodsequenceGetRequesterWorkerStatisticRequestschema_TimePeriod_TimePeriod_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimePeriodsequenceGetRequesterWorkerStatisticRequestschema_TimePeriod_TimePeriod_ instance.
func (me *XsdGoPkgHasElems_TimePeriodsequenceGetRequesterWorkerStatisticRequestschema_TimePeriod_TimePeriod_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TimePeriodsequenceGetRequesterWorkerStatisticRequestschema_TimePeriod_TimePeriod_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_ struct {
	Statuses []TReviewableHITStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Status"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_ instance.
func (me *XsdGoPkgHasElems_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SearchQualificationTypesRequestsequenceRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_ struct {
	SearchQualificationTypesRequests []*TSearchQualificationTypesRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SearchQualificationTypesRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SearchQualificationTypesRequestsequenceRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SearchQualificationTypesRequestsequenceRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SearchQualificationTypesRequestsequenceRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_ instance.
func (me *XsdGoPkgHasElems_SearchQualificationTypesRequestsequenceRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SearchQualificationTypesRequestsequenceRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SearchQualificationTypesRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_ struct {
	BonusAmounts []*TPrice `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BonusAmount"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_ instance.
func (me *XsdGoPkgHasElems_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BonusAmounts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ChangeHITTypeOfHITRequestsequenceRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_ struct {
	ChangeHITTypeOfHITRequests []*TChangeHITTypeOfHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ChangeHITTypeOfHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ChangeHITTypeOfHITRequestsequenceRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ChangeHITTypeOfHITRequestsequenceRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ChangeHITTypeOfHITRequestsequenceRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_ instance.
func (me *XsdGoPkgHasElems_ChangeHITTypeOfHITRequestsequenceRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ChangeHITTypeOfHITRequestsequenceRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ChangeHITTypeOfHITRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceHelpschema_Request_THelpRequest_ struct {
	Request *THelpRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceHelpschema_Request_THelpRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceHelpschema_Request_THelpRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceHelpschema_Request_THelpRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceHelpschema_Request_THelpRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceHelpschema_Request_THelpRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AnswersequenceAssignmentschema_Answer_XsdtString_ struct {
	Answers []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Answer"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnswersequenceAssignmentschema_Answer_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnswersequenceAssignmentschema_Answer_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnswersequenceAssignmentschema_Answer_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AnswersequenceAssignmentschema_Answer_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnswersequenceAssignmentschema_Answer_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_ struct {
	ExpirationIncrementInSecondses []xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ExpirationIncrementInSeconds"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_ instance.
func (me *XsdGoPkgHasElems_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_ struct {
	ApproveRejectedAssignmentResult *TApproveRejectedAssignmentResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveRejectedAssignmentResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_ instance.
func (me *XsdGoPkgHasElem_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ApproveRejectedAssignmentResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_ struct {
	DisposeHITResult *TDisposeHITResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DisposeHITResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_ instance.
func (me *XsdGoPkgHasElem_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DisposeHITResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UnblockWorkerRequestsequenceRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_ struct {
	UnblockWorkerRequests []*TUnblockWorkerRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UnblockWorkerRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UnblockWorkerRequestsequenceRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnblockWorkerRequestsequenceRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnblockWorkerRequestsequenceRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_ instance.
func (me *XsdGoPkgHasElems_UnblockWorkerRequestsequenceRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UnblockWorkerRequestsequenceRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UnblockWorkerRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_ struct {
	IsValids []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 IsValid"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_ instance.
func (me *XsdGoPkgHasElems_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_ struct {
	SubjectTypes []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SubjectType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_ instance.
func (me *XsdGoPkgHasElems_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_ struct {
	RetrieveResultses []xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RetrieveResults"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_ struct {
	ReviewAction *TReviewActionDetail `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ReviewAction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_ instance.
func (me *XsdGoPkgHasElem_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReviewAction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_ struct {
	Request *TApproveAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_ struct {
	GetQualificationsForQualificationTypeRequests []*TGetQualificationsForQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationsForQualificationTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElems_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetQualificationsForQualificationTypeRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_ struct {
	BonusPayment *TBonusPayment `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 BonusPayment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_ instance.
func (me *XsdGoPkgHasElem_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BonusPayment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_ struct {
	NumberOfAssignmentsAvailables []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NumberOfAssignmentsAvailable"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_ struct {
	Request *TGetQualificationTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_ struct {
	Request *TAssignQualificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_ struct {
	RetrieveActionses []xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RetrieveActions"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_ struct {
	NumberOfAssignmentsCompleteds []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NumberOfAssignmentsCompleted"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_ struct {
	GetQualificationRequestsResult *TGetQualificationRequestsResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetQualificationRequestsResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_ instance.
func (me *XsdGoPkgHasElem_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetQualificationRequestsResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_ struct {
	UnblockWorkerResult *TUnblockWorkerResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 UnblockWorkerResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_ instance.
func (me *XsdGoPkgHasElem_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UnblockWorkerResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApproveRejectedAssignmentRequestsequenceRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_ struct {
	ApproveRejectedAssignmentRequests []*TApproveRejectedAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApproveRejectedAssignmentRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApproveRejectedAssignmentRequestsequenceRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApproveRejectedAssignmentRequestsequenceRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApproveRejectedAssignmentRequestsequenceRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_ instance.
func (me *XsdGoPkgHasElems_ApproveRejectedAssignmentRequestsequenceRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApproveRejectedAssignmentRequestsequenceRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ApproveRejectedAssignmentRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_ struct {
	ExtendHITRequests []*TExtendHITRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ExtendHITRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_ instance.
func (me *XsdGoPkgHasElems_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ExtendHITRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_ struct {
	RejectAssignmentRequests []*TRejectAssignmentRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectAssignmentRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_ instance.
func (me *XsdGoPkgHasElems_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RejectAssignmentRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_ struct {
	ApprovalTimes []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ApprovalTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_ struct {
	Parameter *TPolicyParameter `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Parameter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_ instance.
func (me *XsdGoPkgHasElem_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Parameter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_ struct {
	Request *TSearchQualificationTypesRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NotifyWorkersResultsequenceNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_ struct {
	NotifyWorkersResult *TNotifyWorkersResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NotifyWorkersResultsequenceNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotifyWorkersResultsequenceNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NotifyWorkersResultsequenceNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_ instance.
func (me *XsdGoPkgHasElem_NotifyWorkersResultsequenceNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NotifyWorkersResultsequenceNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NotifyWorkersResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestsequenceSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_ struct {
	Request *TSetHITTypeNotificationRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestsequenceSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestsequenceSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestsequenceSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_ instance.
func (me *XsdGoPkgHasElem_RequestsequenceSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestsequenceSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_ struct {
	RejectQualificationRequestRequests []*TRejectQualificationRequestRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RejectQualificationRequestRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_ instance.
func (me *XsdGoPkgHasElems_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RejectQualificationRequestRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_ struct {
	DataPoint *TDataPoint `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DataPoint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_ instance.
func (me *XsdGoPkgHasElem_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataPoint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_ struct {
	MaxAssignmentsIncrements []xsdt.Int `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MaxAssignmentsIncrement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_ instance.
func (me *XsdGoPkgHasElems_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_ struct {
	Subjects []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Subject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_ instance.
func (me *XsdGoPkgHasElems_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_ struct {
	HITGroupIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITGroupId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_ struct {
	SortProperties []TSearchHITsSortProperty `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_ instance.
func (me *XsdGoPkgHasElems_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_ struct {
	DoubleValues []xsdt.Double `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 DoubleValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_ instance.
func (me *XsdGoPkgHasElems_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_ struct {
	ObjectIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 ObjectId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResultsequenceReviewActionDetailschema_Result_XsdtString_ struct {
	Results []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Result"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResultsequenceReviewActionDetailschema_Result_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResultsequenceReviewActionDetailschema_Result_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResultsequenceReviewActionDetailschema_Result_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ResultsequenceReviewActionDetailschema_Result_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResultsequenceReviewActionDetailschema_Result_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_ struct {
	SortProperties []TSearchQualificationTypesSortProperty `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 SortProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_ instance.
func (me *XsdGoPkgHasElems_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetFileUploadURLRequestsequenceRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_ struct {
	GetFileUploadURLRequests []*TGetFileUploadURLRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetFileUploadURLRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetFileUploadURLRequestsequenceRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetFileUploadURLRequestsequenceRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetFileUploadURLRequestsequenceRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_ instance.
func (me *XsdGoPkgHasElems_GetFileUploadURLRequestsequenceRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetFileUploadURLRequestsequenceRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GetFileUploadURLRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetAccountBalanceResultsequenceGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_ struct {
	GetAccountBalanceResult *TGetAccountBalanceResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetAccountBalanceResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetAccountBalanceResultsequenceGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetAccountBalanceResultsequenceGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetAccountBalanceResultsequenceGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_ instance.
func (me *XsdGoPkgHasElem_GetAccountBalanceResultsequenceGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetAccountBalanceResultsequenceGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetAccountBalanceResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_ struct {
	AvailableResponseGroupses []*TxsdOperationInformationSequenceAvailableResponseGroups `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 AvailableResponseGroups"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_ instance.
func (me *XsdGoPkgHasElems_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AvailableResponseGroupses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_ struct {
	RequiredToPreviews []xsdt.Boolean `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RequiredToPreview"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_ struct {
	FileUploadURLs []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 FileUploadURL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_ instance.
func (me *XsdGoPkgHasElems_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_ struct {
	HITReviewStatuses []THITReviewStatus `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HITReviewStatus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_ instance.
func (me *XsdGoPkgHasElems_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_ struct {
	CompleteTimes []xsdt.DateTime `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CompleteTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElems_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TClaim struct {
	XsdGoPkgHasElem_TypesequenceClaimschema_Type_XsdtString_

	XsdGoPkgHasElem_BodysequenceClaimschema_Body_XsdtString_
}

//	If the WalkHandlers.TClaim function is not nil (ie. was set by outside code), calls it with this TClaim instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TClaim instance.
func (me *TClaim) Walk() (err error) {
	if fn := WalkHandlers.TClaim; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TypesequenceClaimschema_Type_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BodysequenceClaimschema_Body_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LongValuesequenceDataPointschema_LongValue_XsdtLong_ struct {
	LongValues []xsdt.Long `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 LongValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LongValuesequenceDataPointschema_LongValue_XsdtLong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LongValuesequenceDataPointschema_LongValue_XsdtLong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LongValuesequenceDataPointschema_LongValue_XsdtLong_ instance.
func (me *XsdGoPkgHasElems_LongValuesequenceDataPointschema_LongValue_XsdtLong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LongValuesequenceDataPointschema_LongValue_XsdtLong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BodysequenceClaimschema_Body_XsdtString_ struct {
	Bodies []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Body"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BodysequenceClaimschema_Body_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BodysequenceClaimschema_Body_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BodysequenceClaimschema_Body_XsdtString_ instance.
func (me *XsdGoPkgHasElems_BodysequenceClaimschema_Body_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BodysequenceClaimschema_Body_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_ struct {
	NotifyWorkersFailureMessages []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 NotifyWorkersFailureMessage"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_ instance.
func (me *XsdGoPkgHasElems_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetBonusPaymentsResultsequenceGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_ struct {
	GetBonusPaymentsResult *TGetBonusPaymentsResult `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 GetBonusPaymentsResult"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetBonusPaymentsResultsequenceGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetBonusPaymentsResultsequenceGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GetBonusPaymentsResultsequenceGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_ instance.
func (me *XsdGoPkgHasElem_GetBonusPaymentsResultsequenceGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetBonusPaymentsResultsequenceGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GetBonusPaymentsResult.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_VersionsequenceNotificationSpecificationschema_Version_XsdtString_ struct {
	Versions []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Version"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VersionsequenceNotificationSpecificationschema_Version_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VersionsequenceNotificationSpecificationschema_Version_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VersionsequenceNotificationSpecificationschema_Version_XsdtString_ instance.
func (me *XsdGoPkgHasElems_VersionsequenceNotificationSpecificationschema_Version_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VersionsequenceNotificationSpecificationschema_Version_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_ struct {
	RegisterHITTypeRequests []*TRegisterHITTypeRequest `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RegisterHITTypeRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_ instance.
func (me *XsdGoPkgHasElems_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RegisterHITTypeRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_ struct {
	MapEntry *TParameterMapEntry `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 MapEntry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_ instance.
func (me *XsdGoPkgHasElem_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MapEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_ struct {
	Queries []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Query"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_ instance.
func (me *XsdGoPkgHasElems_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_ struct {
	HelpTypes []TxsdHelpRequestSequenceHelpType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 HelpType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_ instance.
func (me *XsdGoPkgHasElems_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CreationDatesequenceResponseGroupInformationschema_CreationDate_XsdtString_ struct {
	CreationDates []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 CreationDate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CreationDatesequenceResponseGroupInformationschema_CreationDate_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CreationDatesequenceResponseGroupInformationschema_CreationDate_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CreationDatesequenceResponseGroupInformationschema_CreationDate_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CreationDatesequenceResponseGroupInformationschema_CreationDate_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CreationDatesequenceResponseGroupInformationschema_CreationDate_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_ struct {
	EventType TEventType `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 EventType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_ instance.
func (me *XsdGoPkgHasElem_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_ struct {
	Comparators []TComparator `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 Comparator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_ instance.
func (me *XsdGoPkgHasElems_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestIdsequenceOperationRequestschema_RequestId_XsdtString_ struct {
	RequestIds []xsdt.String `xml:"http://requester.mturk.amazonaws.com/doc/2014-08-15 RequestId"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestIdsequenceOperationRequestschema_RequestId_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestIdsequenceOperationRequestschema_RequestId_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestIdsequenceOperationRequestschema_RequestId_XsdtString_ instance.
func (me *XsdGoPkgHasElems_RequestIdsequenceOperationRequestschema_RequestId_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestIdsequenceOperationRequestschema_RequestId_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 961 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 961 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_SearchHITs                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_SearchHITs, bool) error
	XsdGoPkgHasElems_ChangeHITTypeOfHITResultsequenceTxsdChangeHITTypeOfHITResponseChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_                                                                                                func(*XsdGoPkgHasElems_ChangeHITTypeOfHITResultsequenceTxsdChangeHITTypeOfHITResponseChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_, bool) error
	XsdGoPkgHasElems_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_                                                                                                                                                                          func(*XsdGoPkgHasElems_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_, bool) error
	XsdGoPkgHasElem_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_                                                                                                                                                                                 func(*XsdGoPkgHasElem_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_, bool) error
	XsdGoPkgHasElem_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_                                                                                                                                                                  func(*XsdGoPkgHasElem_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_, bool) error
	XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_                                                                                                                              func(*XsdGoPkgHasElem_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_, bool) error
	XsdGoPkgHasElem_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_                                                                           func(*XsdGoPkgHasElem_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_, bool) error
	XsdGoPkgHasElems_GetAssignmentsForHITResponse                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_GetAssignmentsForHITResponse, bool) error
	XsdGoPkgHasElems_AssignQualificationResultsequenceTxsdAssignQualificationResponseAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_                                                                                           func(*XsdGoPkgHasElems_AssignQualificationResultsequenceTxsdAssignQualificationResponseAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_, bool) error
	XsdGoPkgHasElem_UnblockWorker                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_UnblockWorker, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_                                                                                                                          func(*XsdGoPkgHasElem_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_, bool) error
	XsdGoPkgHasElems_CreateQualificationTypeRequestsequenceRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_                                                                                                                               func(*XsdGoPkgHasElems_CreateQualificationTypeRequestsequenceRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_, bool) error
	TDisposeHITRequest                                                                                                                                                                                                                                                 func(*TDisposeHITRequest, bool) error
	XsdGoPkgHasElems_GetHITsForQualificationTypeResponse                                                                                                                                                                                                               func(*XsdGoPkgHasElems_GetHITsForQualificationTypeResponse, bool) error
	TDisposeQualificationTypeResult                                                                                                                                                                                                                                    func(*TDisposeQualificationTypeResult, bool) error
	XsdGoPkgHasElem_NotifyWorkersResponse                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_NotifyWorkersResponse, bool) error
	XsdGoPkgHasElem_GetAssignmentsForHIT                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_GetAssignmentsForHIT, bool) error
	XsdGoPkgHasElems_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_                                                                                                                                func(*XsdGoPkgHasElems_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_                                                                                                                                                             func(*XsdGoPkgHasElems_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_, bool) error
	XsdGoPkgHasElems_GrantQualificationResultsequenceTxsdGrantQualificationResponseGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_                                                                                                func(*XsdGoPkgHasElems_GrantQualificationResultsequenceTxsdGrantQualificationResponseGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_                                                                                                                                                     func(*XsdGoPkgHasElem_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_, bool) error
	XsdGoPkgHasElems_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_                                                                                                                                                 func(*XsdGoPkgHasElems_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_GetHIT                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_GetHIT, bool) error
	XsdGoPkgHasElem_SearchHITsResponse                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_SearchHITsResponse, bool) error
	TUpdateQualificationScoreResult                                                                                                                                                                                                                                    func(*TUpdateQualificationScoreResult, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_                                                                                                                                           func(*XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_, bool) error
	XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_                                                                                                                                                                                  func(*XsdGoPkgHasElem_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_, bool) error
	XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_                                                                                                                                                                               func(*XsdGoPkgHasElem_PageNumbersequenceGetReviewableHITsRequestschema_PageNumber_XsdtInt_, bool) error
	XsdGoPkgHasElem_VersionsequenceNotificationSpecificationschema_Version_XsdtString_                                                                                                                                                                                 func(*XsdGoPkgHasElem_VersionsequenceNotificationSpecificationschema_Version_XsdtString_, bool) error
	XsdGoPkgHasElem_SetHITTypeNotification                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_SetHITTypeNotification, bool) error
	XsdGoPkgHasElem_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_                                                                                                                                                                         func(*XsdGoPkgHasElem_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_, bool) error
	TRejectAssignmentRequest                                                                                                                                                                                                                                           func(*TRejectAssignmentRequest, bool) error
	XsdGoPkgHasElem_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_                                                                                                                                                                                    func(*XsdGoPkgHasElem_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdSearchQualificationTypesSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_                                                                                                                               func(*XsdGoPkgHasElems_RequestsequenceTxsdSearchQualificationTypesSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_                                                                                                                                                                             func(*XsdGoPkgHasElem_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_, bool) error
	TGetBonusPaymentsResult                                                                                                                                                                                                                                            func(*TGetBonusPaymentsResult, bool) error
	XsdGoPkgHasElems_GetRequesterWorkerStatisticResponse                                                                                                                                                                                                               func(*XsdGoPkgHasElems_GetRequesterWorkerStatisticResponse, bool) error
	XsdGoPkgHasElems_DescriptionsequenceUpdateQualificationTypeRequestschema_Description_XsdtString_                                                                                                                                                                   func(*XsdGoPkgHasElems_DescriptionsequenceUpdateQualificationTypeRequestschema_Description_XsdtString_, bool) error
	XsdGoPkgHasElems_KeywordssequenceHITschema_Keywords_XsdtString_                                                                                                                                                                                                    func(*XsdGoPkgHasElems_KeywordssequenceHITschema_Keywords_XsdtString_, bool) error
	XsdGoPkgHasElems_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_                                                                                         func(*XsdGoPkgHasElems_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_, bool) error
	XsdGoPkgHasElem_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_                                                                                                                                                                                        func(*XsdGoPkgHasElem_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_, bool) error
	XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_                                                                                                                                                                                              func(*XsdGoPkgHasElem_TitlesequenceCreateHITRequestschema_Title_XsdtString_, bool) error
	XsdGoPkgHasElem_RequestsequenceGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_                                                                                                                                                            func(*XsdGoPkgHasElem_RequestsequenceGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_, bool) error
	XsdGoPkgHasElems_SortDirectionsequenceSearchHITsRequestschema_SortDirection_TSortDirection_                                                                                                                                                                        func(*XsdGoPkgHasElems_SortDirectionsequenceSearchHITsRequestschema_SortDirection_TSortDirection_, bool) error
	XsdGoPkgHasElem_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_                                                                                                                                                                           func(*XsdGoPkgHasElem_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_, bool) error
	XsdGoPkgHasElems_CreateHIT                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_CreateHIT, bool) error
	XsdGoPkgHasElem_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_                                                                                                                                                                                      func(*XsdGoPkgHasElem_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_, bool) error
	XsdGoPkgHasElem_ExtendHIT                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_ExtendHIT, bool) error
	XsdGoPkgHasElem_RequestsequenceGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_                                                                                                                                                                            func(*XsdGoPkgHasElem_RequestsequenceGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_, bool) error
	XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_                                                                                                                                                                      func(*XsdGoPkgHasElem_AWSAccessKeyIdsequenceTxsdCreateHITCreateHITschema_AWSAccessKeyId_XsdtString_, bool) error
	XsdGoPkgHasElem_AssignQualificationRequestsequenceTxsdRequestRequestschema_AssignQualificationRequest_TAssignQualificationRequest_                                                                                                                                 func(*XsdGoPkgHasElem_AssignQualificationRequestsequenceTxsdRequestRequestschema_AssignQualificationRequest_TAssignQualificationRequest_, bool) error
	TExtendHITResult                                                                                                                                                                                                                                                   func(*TExtendHITResult, bool) error
	XsdGoPkgHasElems_GetBonusPayments                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_GetBonusPayments, bool) error
	XsdGoPkgHasElems_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_                                                                                                                                                                                   func(*XsdGoPkgHasElems_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_, bool) error
	XsdGoPkgHasElems_AssignmentDurationInSecondssequenceRegisterHITTypeRequestschema_AssignmentDurationInSeconds_XsdtLong_                                                                                                                                             func(*XsdGoPkgHasElems_AssignmentDurationInSecondssequenceRegisterHITTypeRequestschema_AssignmentDurationInSeconds_XsdtLong_, bool) error
	XsdGoPkgHasElems_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_                                                                                                                                                                                func(*XsdGoPkgHasElems_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_, bool) error
	XsdGoPkgHasElem_GetBonusPaymentsResultsequenceGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_                                                                                                                                       func(*XsdGoPkgHasElem_GetBonusPaymentsResultsequenceGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_, bool) error
	TxsdBlockWorker                                                                                                                                                                                                                                                    func(*TxsdBlockWorker, bool) error
	TxsdHelp                                                                                                                                                                                                                                                           func(*TxsdHelp, bool) error
	XsdGoPkgHasElem_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_                                                                                                                                                                         func(*XsdGoPkgHasElem_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_, bool) error
	XsdGoPkgHasElem_AssignmentsequenceGetAssignmentResultschema_Assignment_TAssignment_                                                                                                                                                                                func(*XsdGoPkgHasElem_AssignmentsequenceGetAssignmentResultschema_Assignment_TAssignment_, bool) error
	TGetQualificationRequestsResult                                                                                                                                                                                                                                    func(*TGetQualificationRequestsResult, bool) error
	XsdGoPkgHasElems_GetQualificationTypeResponse                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_GetQualificationTypeResponse, bool) error
	XsdGoPkgHasElem_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_                                                                                                                                          func(*XsdGoPkgHasElem_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_, bool) error
	XsdGoPkgHasElems_SendTestEventNotification                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_SendTestEventNotification, bool) error
	XsdGoPkgHasElem_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_                                                                                                            func(*XsdGoPkgHasElem_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_, bool) error
	TSendTestEventNotificationRequest                                                                                                                                                                                                                                  func(*TSendTestEventNotificationRequest, bool) error
	XsdGoPkgHasElems_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_                                                                                                                                                                          func(*XsdGoPkgHasElems_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_, bool) error
	TRejectAssignmentResult                                                                                                                                                                                                                                            func(*TRejectAssignmentResult, bool) error
	XsdGoPkgHasElems_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_                                                                                      func(*XsdGoPkgHasElems_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_, bool) error
	XsdGoPkgHasElems_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_                                                                                                                                                                              func(*XsdGoPkgHasElems_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_, bool) error
	XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_                                                                                                                                                                                   func(*XsdGoPkgHasElem_PageSizesequenceGetReviewableHITsRequestschema_PageSize_XsdtInt_, bool) error
	XsdGoPkgHasElems_ForceExpireHITResultsequenceTxsdForceExpireHITResponseForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_                                                                                                                    func(*XsdGoPkgHasElems_ForceExpireHITResultsequenceTxsdForceExpireHITResponseForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdApproveRejectedAssignmentApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_                                                                                                                            func(*XsdGoPkgHasElems_RequestsequenceTxsdApproveRejectedAssignmentApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_, bool) error
	XsdGoPkgHasElem_DatesequenceDataPointschema_Date_XsdtDateTime_                                                                                                                                                                                                     func(*XsdGoPkgHasElem_DatesequenceDataPointschema_Date_XsdtDateTime_, bool) error
	TGrantBonusRequest                                                                                                                                                                                                                                                 func(*TGrantBonusRequest, bool) error
	XsdGoPkgHasElems_ForceExpireHITResponse                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_ForceExpireHITResponse, bool) error
	XsdGoPkgHasElems_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_                                                                                                                                                           func(*XsdGoPkgHasElems_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_                                                                                                                                                                                    func(*XsdGoPkgHasElem_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_, bool) error
	XsdGoPkgHasElems_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_                                                                                                                                                                                       func(*XsdGoPkgHasElems_PolicyNamesequenceReviewPolicyschema_PolicyName_XsdtString_, bool) error
	XsdGoPkgHasElem_RequestsequenceGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_                                                                                                                                                      func(*XsdGoPkgHasElem_RequestsequenceGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_, bool) error
	XsdGoPkgHasElems_DisposeHITResponse                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_DisposeHITResponse, bool) error
	XsdGoPkgHasElems_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_                                                                                                     func(*XsdGoPkgHasElems_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_                                                                                                                                                                            func(*XsdGoPkgHasElems_RequestsequenceTxsdExtendHITExtendHITschema_Request_TExtendHITRequest_, bool) error
	XsdGoPkgHasElem_GetQualificationRequests                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_GetQualificationRequests, bool) error
	XsdGoPkgHasElems_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_                                                                                                                                                                 func(*XsdGoPkgHasElems_SortPropertysequenceSearchHITsRequestschema_SortProperty_TSearchHITsSortProperty_, bool) error
	TNotifyWorkersRequest                                                                                                                                                                                                                                              func(*TNotifyWorkersRequest, bool) error
	XsdGoPkgHasElem_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_                                                                                                                                                                                  func(*XsdGoPkgHasElem_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_, bool) error
	XsdGoPkgHasElems_GrantQualification                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_GrantQualification, bool) error
	XsdGoPkgHasElem_RequestsequenceGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_                                                                                                                                                                func(*XsdGoPkgHasElem_RequestsequenceGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_, bool) error
	XsdGoPkgHasElem_SendTestEventNotification                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_SendTestEventNotification, bool) error
	XsdGoPkgHasElem_ResponseGroupsequenceGetAccountBalanceRequestschema_ResponseGroup_XsdtString_                                                                                                                                                                      func(*XsdGoPkgHasElem_ResponseGroupsequenceGetAccountBalanceRequestschema_ResponseGroup_XsdtString_, bool) error
	XsdGoPkgHasElems_ChangeHITTypeOfHITRequestsequenceRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_                                                                                                                                              func(*XsdGoPkgHasElems_ChangeHITTypeOfHITRequestsequenceRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_, bool) error
	XsdGoPkgHasElem_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_                                                                                                                          func(*XsdGoPkgHasElem_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_, bool) error
	XsdGoPkgHasElem_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_                                                                                                                                                      func(*XsdGoPkgHasElem_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_, bool) error
	XsdGoPkgHasElem_GetAccountBalance                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_GetAccountBalance, bool) error
	XsdGoPkgHasElems_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_                                                                                                                                                            func(*XsdGoPkgHasElems_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_, bool) error
	XsdGoPkgHasElems_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_                                                                                                                                             func(*XsdGoPkgHasElems_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_, bool) error
	TxsdRequest                                                                                                                                                                                                                                                        func(*TxsdRequest, bool) error
	TNotifyWorkersFailureStatus                                                                                                                                                                                                                                        func(*TNotifyWorkersFailureStatus, bool) error
	XsdGoPkgHasElems_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_                                                                                                                                                                                      func(*XsdGoPkgHasElems_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_                                                                                                                                            func(*XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationTypeGetQualificationTypeschema_Request_TGetQualificationTypeRequest_, bool) error
	XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_                                                                                                                                                                                        func(*XsdGoPkgHasElem_QuestionsequenceCreateHITRequestschema_Question_XsdtString_, bool) error
	TxsdErrorsSequenceError                                                                                                                                                                                                                                            func(*TxsdErrorsSequenceError, bool) error
	XsdGoPkgHasElem_RejectAssignmentResultsequenceRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_                                                                                                                                       func(*XsdGoPkgHasElem_RejectAssignmentResultsequenceRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_, bool) error
	TDisposeHITResult                                                                                                                                                                                                                                                  func(*TDisposeHITResult, bool) error
	XsdGoPkgHasElems_Errors                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_Errors, bool) error
	XsdGoPkgHasElem_OperationsequenceValidOperationssequenceResponseGroupInformationschema_Operation_XsdtString_                                                                                                                                                       func(*XsdGoPkgHasElem_OperationsequenceValidOperationssequenceResponseGroupInformationschema_Operation_XsdtString_, bool) error
	TParameterMapEntry                                                                                                                                                                                                                                                 func(*TParameterMapEntry, bool) error
	XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_                                                                                                                                                                                        func(*XsdGoPkgHasElem_SubmitTimesequenceAssignmentschema_SubmitTime_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_GetReviewableHITsResponse                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_GetReviewableHITsResponse, bool) error
	XsdGoPkgHasElems_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_                                                                  func(*XsdGoPkgHasElems_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_, bool) error
	XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_                                                                                                                                                                                            func(*XsdGoPkgHasElems_ValuesequenceParameterMapEntryschema_Value_XsdtString_, bool) error
	TGetRequesterStatisticRequest                                                                                                                                                                                                                                      func(*TGetRequesterStatisticRequest, bool) error
	TxsdSetHITAsReviewing                                                                                                                                                                                                                                              func(*TxsdSetHITAsReviewing, bool) error
	XsdGoPkgHasElem_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_                                                                                                                                                                        func(*XsdGoPkgHasElem_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_, bool) error
	XsdGoPkgHasElem_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_                                                                   func(*XsdGoPkgHasElem_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_, bool) error
	XsdGoPkgHasElems_SendTestEventNotificationResponse                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_SendTestEventNotificationResponse, bool) error
	TxsdOperationInformationSequenceDefaultResponseGroups                                                                                                                                                                                                              func(*TxsdOperationInformationSequenceDefaultResponseGroups, bool) error
	XsdGoPkgHasElems_SearchHITsRequestsequenceRequestschema_SearchHITsRequest_TSearchHITsRequest_                                                                                                                                                                      func(*XsdGoPkgHasElems_SearchHITsRequestsequenceRequestschema_SearchHITsRequest_TSearchHITsRequest_, bool) error
	TxsdCreateHIT                                                                                                                                                                                                                                                      func(*TxsdCreateHIT, bool) error
	XsdGoPkgHasElems_NamesequenceTxsdResponseGroupInformationResponseGroupInformationschema_Name_XsdtString_                                                                                                                                                           func(*XsdGoPkgHasElems_NamesequenceTxsdResponseGroupInformationResponseGroupInformationschema_Name_XsdtString_, bool) error
	XsdGoPkgHasElem_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_                                                                                                                                                         func(*XsdGoPkgHasElem_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_, bool) error
	XsdGoPkgHasElem_RequestsequenceSearchHITsschema_Request_TSearchHITsRequest_                                                                                                                                                                                        func(*XsdGoPkgHasElem_RequestsequenceSearchHITsschema_Request_TSearchHITsRequest_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_                                                                                                                                                                            func(*XsdGoPkgHasElems_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_, bool) error
	XsdGoPkgHasElem_UnblockWorkerRequestsequenceTxsdRequestRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_                                                                                                                                                   func(*XsdGoPkgHasElem_UnblockWorkerRequestsequenceTxsdRequestRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_, bool) error
	TxsdGetQualificationRequestsResponse                                                                                                                                                                                                                               func(*TxsdGetQualificationRequestsResponse, bool) error
	XsdGoPkgHasElems_BlockWorker                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_BlockWorker, bool) error
	XsdGoPkgHasElems_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_                                                                                                                                                            func(*XsdGoPkgHasElems_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_, bool) error
	THITLayoutParameter                                                                                                                                                                                                                                                func(*THITLayoutParameter, bool) error
	XsdGoPkgHasElems_GetReviewResultsForHITResultsequenceTxsdGetReviewResultsForHITResponseGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_                                                                            func(*XsdGoPkgHasElems_GetReviewResultsForHITResultsequenceTxsdGetReviewResultsForHITResponseGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_, bool) error
	XsdGoPkgHasElem_RequestsequenceGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_                                                                                                                                                                  func(*XsdGoPkgHasElem_RequestsequenceGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_, bool) error
	XsdGoPkgHasElem_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_                                                                                                                                                           func(*XsdGoPkgHasElem_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_, bool) error
	XsdGoPkgHasElems_TimePeriodsequenceGetRequesterWorkerStatisticRequestschema_TimePeriod_TimePeriod_                                                                                                                                                                 func(*XsdGoPkgHasElems_TimePeriodsequenceGetRequesterWorkerStatisticRequestschema_TimePeriod_TimePeriod_, bool) error
	XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_                                                                                                                                                                                  func(*XsdGoPkgHasElem_ValidatesequenceTxsdCreateHITCreateHITschema_Validate_XsdtString_, bool) error
	XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_                                                                                                                                                         func(*XsdGoPkgHasElem_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_                                                                                                                                                    func(*XsdGoPkgHasElems_RequestsequenceTxsdSetHITAsReviewingSetHITAsReviewingschema_Request_TSetHITAsReviewingRequest_, bool) error
	XsdGoPkgHasElems_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_                                                                                                                                                        func(*XsdGoPkgHasElems_AssignmentReviewPolicysequenceCreateHITRequestschema_AssignmentReviewPolicy_TReviewPolicy_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_                                                                                                                                                                 func(*XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_, bool) error
	XsdGoPkgHasElems_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_                                                                                                                                                                                           func(*XsdGoPkgHasElems_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_                                                                                                                                                                                 func(*XsdGoPkgHasElems_HITsequenceTxsdCreateHITResponseCreateHITResponseschema_Hit_Thit_, bool) error
	XsdGoPkgHasElems_GetReviewableHITs                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_GetReviewableHITs, bool) error
	TxsdApproveRejectedAssignment                                                                                                                                                                                                                                      func(*TxsdApproveRejectedAssignment, bool) error
	XsdGoPkgHasElems_GetBlockedWorkers                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_GetBlockedWorkers, bool) error
	XsdGoPkgHasElems_TitlesequenceHITschema_Title_XsdtString_                                                                                                                                                                                                          func(*XsdGoPkgHasElems_TitlesequenceHITschema_Title_XsdtString_, bool) error
	TGetHITRequest                                                                                                                                                                                                                                                     func(*TGetHITRequest, bool) error
	XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_                                                                                                                                                                                  func(*XsdGoPkgHasElem_TestsequenceCreateQualificationTypeRequestschema_Test_XsdtString_, bool) error
	XsdGoPkgHasElem_DisposeHIT                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_DisposeHIT, bool) error
	XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_                                                                                                                                                                                       func(*XsdGoPkgHasElem_GrantTimesequenceQualificationschema_GrantTime_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetReviewResultsForHITGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_                                                                                                                                     func(*XsdGoPkgHasElems_RequestsequenceTxsdGetReviewResultsForHITGetReviewResultsForHITschema_Request_TGetReviewResultsForHITRequest_, bool) error
	TGetAccountBalanceResult                                                                                                                                                                                                                                           func(*TGetAccountBalanceResult, bool) error
	XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_                                                                                                                                                                              func(*XsdGoPkgHasElem_TimestampsequenceTxsdCreateHITCreateHITschema_Timestamp_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_                                                                                                                               func(*XsdGoPkgHasElems_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_, bool) error
	XsdGoPkgHasElems_GetQualificationScore                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_GetQualificationScore, bool) error
	TxsdForceExpireHITResponse                                                                                                                                                                                                                                         func(*TxsdForceExpireHITResponse, bool) error
	XsdGoPkgHasElem_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_                                                                                                                               func(*XsdGoPkgHasElem_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_, bool) error
	XsdGoPkgHasElems_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_                                                                                                                                                     func(*XsdGoPkgHasElems_MessagesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Message_XsdtString_, bool) error
	XsdGoPkgHasElems_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_                                                                                                          func(*XsdGoPkgHasElems_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_, bool) error
	TxsdSearchQualificationTypes                                                                                                                                                                                                                                       func(*TxsdSearchQualificationTypes, bool) error
	XsdGoPkgHasElems_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_                                                                                                                                                                                       func(*XsdGoPkgHasElems_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_, bool) error
	TPrice                                                                                                                                                                                                                                                             func(*TPrice, bool) error
	TxsdRegisterHITType                                                                                                                                                                                                                                                func(*TxsdRegisterHITType, bool) error
	TxsdSetHITTypeNotification                                                                                                                                                                                                                                         func(*TxsdSetHITTypeNotification, bool) error
	XsdGoPkgHasElems_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_                                                                                                                                             func(*XsdGoPkgHasElems_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_, bool) error
	XsdGoPkgHasElems_RevokeQualification                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_RevokeQualification, bool) error
	XsdGoPkgHasElem_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_                                                                                                                                                                           func(*XsdGoPkgHasElem_OnHoldBalancesequenceGetAccountBalanceResultschema_OnHoldBalance_TPrice_, bool) error
	XsdGoPkgHasElem_BlockWorker                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_BlockWorker, bool) error
	XsdGoPkgHasElems_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_                                                                                                                                                                        func(*XsdGoPkgHasElems_DestinationsequenceNotificationSpecificationschema_Destination_XsdtString_, bool) error
	XsdGoPkgHasElems_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_                                                                                                                                                                                     func(*XsdGoPkgHasElems_SubjectsequenceNotifyWorkersRequestschema_Subject_XsdtString_, bool) error
	XsdGoPkgHasElem_GrantQualificationRequestsequenceTxsdRequestRequestschema_GrantQualificationRequest_TGrantQualificationRequest_                                                                                                                                    func(*XsdGoPkgHasElem_GrantQualificationRequestsequenceTxsdRequestRequestschema_GrantQualificationRequest_TGrantQualificationRequest_, bool) error
	TxsdGrantQualificationResponse                                                                                                                                                                                                                                     func(*TxsdGrantQualificationResponse, bool) error
	XsdGoPkgHasElems_GetRequesterStatistic                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_GetRequesterStatistic, bool) error
	XsdGoPkgHasElems_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_                                                                                                                                                            func(*XsdGoPkgHasElems_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_ApproveAssignmentRequestsequenceRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_                                                                                                                                                 func(*XsdGoPkgHasElems_ApproveAssignmentRequestsequenceRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_, bool) error
	XsdGoPkgHasElems_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_                                                                                                                                                                           func(*XsdGoPkgHasElems_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_                                                                                                                                     func(*XsdGoPkgHasElems_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_, bool) error
	XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_                                                                                                                                                                   func(*XsdGoPkgHasElem_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_                                                                                                                                        func(*XsdGoPkgHasElems_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_                                                                                                                         func(*XsdGoPkgHasElems_RequestsequenceTxsdRejectQualificationRequestRejectQualificationRequestschema_Request_TRejectQualificationRequestRequest_, bool) error
	XsdGoPkgHasElems_UpdateQualificationScoreResponse                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_UpdateQualificationScoreResponse, bool) error
	XsdGoPkgHasElems_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_                                                                                                                                                               func(*XsdGoPkgHasElems_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_, bool) error
	TCreateHITRequest                                                                                                                                                                                                                                                  func(*TCreateHITRequest, bool) error
	XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_                                                                                                                                                  func(*XsdGoPkgHasElem_TestDurationInSecondssequenceCreateQualificationTypeRequestschema_TestDurationInSeconds_XsdtLong_, bool) error
	XsdGoPkgHasElems_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_                                                                                                                                                              func(*XsdGoPkgHasElems_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_, bool) error
	XsdGoPkgHasElems_UpdateQualificationTypeRequestsequenceRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_                                                                                                                               func(*XsdGoPkgHasElems_UpdateQualificationTypeRequestsequenceRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_, bool) error
	XsdGoPkgHasElems_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_                                                                                                                                                            func(*XsdGoPkgHasElems_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_, bool) error
	XsdGoPkgHasElems_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_                                                                                                                                                  func(*XsdGoPkgHasElems_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_, bool) error
	XsdGoPkgHasElems_GetReviewResultsForHITRequestsequenceRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_                                                                                                                                  func(*XsdGoPkgHasElems_GetReviewResultsForHITRequestsequenceRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_, bool) error
	XsdGoPkgHasElem_GetBonusPayments                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_GetBonusPayments, bool) error
	XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_                                                                                                            func(*XsdGoPkgHasElems_GetStatisticResultsequenceTxsdGetRequesterStatisticResponseGetRequesterStatisticResponseschema_GetStatisticResult_TGetStatisticResult_, bool) error
	XsdGoPkgHasElem_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_                                                                                                                                                                                    func(*XsdGoPkgHasElem_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_, bool) error
	TxsdAssignQualification                                                                                                                                                                                                                                            func(*TxsdAssignQualification, bool) error
	XsdGoPkgHasElems_DatesequenceDataPointschema_Date_XsdtDateTime_                                                                                                                                                                                                    func(*XsdGoPkgHasElems_DatesequenceDataPointschema_Date_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_                                                                                                                                                                                           func(*XsdGoPkgHasElems_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_, bool) error
	XsdGoPkgHasElem_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_                                                                                                                                                                                        func(*XsdGoPkgHasElem_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_, bool) error
	TChangeHITTypeOfHITResult                                                                                                                                                                                                                                          func(*TChangeHITTypeOfHITResult, bool) error
	TQualificationType                                                                                                                                                                                                                                                 func(*TQualificationType, bool) error
	XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_                                                                                                                                                                            func(*XsdGoPkgHasElem_SubjectIdsequenceRevokeQualificationRequestschema_SubjectId_XsdtString_, bool) error
	XsdGoPkgHasElems_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_                                                             func(*XsdGoPkgHasElems_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_, bool) error
	TxsdSearchHITs                                                                                                                                                                                                                                                     func(*TxsdSearchHITs, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_                                                                                                                                                                             func(*XsdGoPkgHasElem_RequestsequenceTxsdCreateHITCreateHITschema_Request_TCreateHITRequest_, bool) error
	XsdGoPkgHasElem_GetRequesterWorkerStatistic                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_GetRequesterWorkerStatistic, bool) error
	XsdGoPkgHasElem_GetRequesterWorkerStatisticResponse                                                                                                                                                                                                                func(*XsdGoPkgHasElem_GetRequesterWorkerStatisticResponse, bool) error
	XsdGoPkgHasElems_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_                                                                                                                                                  func(*XsdGoPkgHasElems_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_, bool) error
	XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_                                                                                                                                                                           func(*XsdGoPkgHasElem_ReasonsequenceRejectQualificationRequestRequestschema_Reason_XsdtString_, bool) error
	TxsdGetReviewResultsForHITResponse                                                                                                                                                                                                                                 func(*TxsdGetReviewResultsForHITResponse, bool) error
	XsdGoPkgHasElem_UpdateQualificationScore                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_UpdateQualificationScore, bool) error
	XsdGoPkgHasElems_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_                                                   func(*XsdGoPkgHasElems_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_, bool) error
	TBlockWorkerResult                                                                                                                                                                                                                                                 func(*TBlockWorkerResult, bool) error
	XsdGoPkgHasElem_RequestsequenceSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_                                                                                                                                                            func(*XsdGoPkgHasElem_RequestsequenceSearchQualificationTypesschema_Request_TSearchQualificationTypesRequest_, bool) error
	XsdGoPkgHasElem_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_                                                                                                                                                                          func(*XsdGoPkgHasElem_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_, bool) error
	XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_                                                                                                                                                   func(*XsdGoPkgHasElem_NotificationsequenceSetHITTypeNotificationRequestschema_Notification_TNotificationSpecification_, bool) error
	XsdGoPkgHasElem_ApproveAssignment                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_ApproveAssignment, bool) error
	XsdGoPkgHasElems_AmountsequencePriceschema_Amount_XsdtDecimal_                                                                                                                                                                                                     func(*XsdGoPkgHasElems_AmountsequencePriceschema_Amount_XsdtDecimal_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdSetHITTypeNotificationSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_                                                                                                                                     func(*XsdGoPkgHasElems_RequestsequenceTxsdSetHITTypeNotificationSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_, bool) error
	TRevokeQualificationResult                                                                                                                                                                                                                                         func(*TRevokeQualificationResult, bool) error
	XsdGoPkgHasElems_AssignmentStatussequenceGetAssignmentsForHITRequestschema_AssignmentStatus_TAssignmentStatus_                                                                                                                                                     func(*XsdGoPkgHasElems_AssignmentStatussequenceGetAssignmentsForHITRequestschema_AssignmentStatus_TAssignmentStatus_, bool) error
	TxsdGetFileUploadURLResponse                                                                                                                                                                                                                                       func(*TxsdGetFileUploadURLResponse, bool) error
	XsdGoPkgHasElem_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_                                                                                                      func(*XsdGoPkgHasElem_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_, bool) error
	XsdGoPkgHasElems_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_                                                                                func(*XsdGoPkgHasElems_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_, bool) error
	XsdGoPkgHasElems_UpdateQualificationScore                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_UpdateQualificationScore, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_                                                                                                                                                              func(*XsdGoPkgHasElem_RequestsequenceTxsdForceExpireHITForceExpireHITschema_Request_TForceExpireHITRequest_, bool) error
	XsdGoPkgHasElem_GetReviewResultsForHITResultsequenceGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_                                                                                                               func(*XsdGoPkgHasElem_GetReviewResultsForHITResultsequenceGetReviewResultsForHITResponseschema_GetReviewResultsForHITResult_TGetReviewResultsForHITResult_, bool) error
	TGetAssignmentRequest                                                                                                                                                                                                                                              func(*TGetAssignmentRequest, bool) error
	XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_                                                                                                                                                      func(*XsdGoPkgHasElem_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_, bool) error
	TxsdSearchHITsResponse                                                                                                                                                                                                                                             func(*TxsdSearchHITsResponse, bool) error
	TxsdChangeHITTypeOfHIT                                                                                                                                                                                                                                             func(*TxsdChangeHITTypeOfHIT, bool) error
	XsdGoPkgHasElems_GetQualificationsForQualificationTypeResponse                                                                                                                                                                                                     func(*XsdGoPkgHasElems_GetQualificationsForQualificationTypeResponse, bool) error
	XsdGoPkgHasElems_RejectQualificationRequestResponse                                                                                                                                                                                                                func(*XsdGoPkgHasElems_RejectQualificationRequestResponse, bool) error
	TxsdHelpResponse                                                                                                                                                                                                                                                   func(*TxsdHelpResponse, bool) error
	XsdGoPkgHasElems_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_                                                                                                                                                                                func(*XsdGoPkgHasElems_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_, bool) error
	XsdGoPkgHasElems_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_                                                                                                                                                                          func(*XsdGoPkgHasElems_ComparatorsequenceQualificationRequirementschema_Comparator_TComparator_, bool) error
	XsdGoPkgHasElem_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_                                                                                                                                          func(*XsdGoPkgHasElem_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_, bool) error
	XsdGoPkgHasElem_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_                                                                                                                                                  func(*XsdGoPkgHasElem_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_, bool) error
	TReviewReport                                                                                                                                                                                                                                                      func(*TReviewReport, bool) error
	XsdGoPkgHasElems_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_                                                                                                                                                                      func(*XsdGoPkgHasElems_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_, bool) error
	XsdGoPkgHasElems_Help                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_Help, bool) error
	XsdGoPkgHasElem_RequestsequenceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_                                                                                                                                                                          func(*XsdGoPkgHasElem_RequestsequenceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_, bool) error
	XsdGoPkgHasElem_GetQualificationTypeResponse                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_GetQualificationTypeResponse, bool) error
	XsdGoPkgHasElem_ParametersequenceTxsdOperationInformationSequenceAvailableParametersAvailableParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_                                                                            func(*XsdGoPkgHasElem_ParametersequenceTxsdOperationInformationSequenceAvailableParametersAvailableParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_, bool) error
	XsdGoPkgHasElems_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_                                                                                                                                                                func(*XsdGoPkgHasElems_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_, bool) error
	XsdGoPkgHasElem_TypesequenceClaimschema_Type_XsdtString_                                                                                                                                                                                                           func(*XsdGoPkgHasElem_TypesequenceClaimschema_Type_XsdtString_, bool) error
	XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_                                                                                                                                              func(*XsdGoPkgHasElems_QualificationsequenceGetQualificationsForQualificationTypeResultschema_Qualification_TQualification_, bool) error
	XsdGoPkgHasElems_GetAccountBalance                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_GetAccountBalance, bool) error
	XsdGoPkgHasElem_LongValuesequenceDataPointschema_LongValue_XsdtLong_                                                                                                                                                                                               func(*XsdGoPkgHasElem_LongValuesequenceDataPointschema_LongValue_XsdtLong_, bool) error
	XsdGoPkgHasElem_GetStatisticResultsequenceTxsdGetRequesterWorkerStatisticResponseGetRequesterWorkerStatisticResponseschema_GetStatisticResult_TGetStatisticResult_                                                                                                 func(*XsdGoPkgHasElem_GetStatisticResultsequenceTxsdGetRequesterWorkerStatisticResponseGetRequesterWorkerStatisticResponseschema_GetStatisticResult_TGetStatisticResult_, bool) error
	XsdGoPkgHasElems_ChangeHITTypeOfHIT                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_ChangeHITTypeOfHIT, bool) error
	XsdGoPkgHasElem_CreateQualificationTypeResponse                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_CreateQualificationTypeResponse, bool) error
	XsdGoPkgHasElems_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_                                                                                                                                                                                 func(*XsdGoPkgHasElems_QuestionIdsequenceReviewResultDetailschema_QuestionId_XsdtString_, bool) error
	XsdGoPkgHasElem_QualificationsequenceGetQualificationScoreResponseschema_Qualification_TQualification_                                                                                                                                                             func(*XsdGoPkgHasElem_QualificationsequenceGetQualificationScoreResponseschema_Qualification_TQualification_, bool) error
	TxsdHTTPHeaders                                                                                                                                                                                                                                                    func(*TxsdHTTPHeaders, bool) error
	TxsdArguments                                                                                                                                                                                                                                                      func(*TxsdArguments, bool) error
	TApproveAssignmentResult                                                                                                                                                                                                                                           func(*TApproveAssignmentResult, bool) error
	XsdGoPkgHasElems_GetFileUploadURL                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_GetFileUploadURL, bool) error
	XsdGoPkgHasElems_OperationInformation                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_OperationInformation, bool) error
	XsdGoPkgHasElems_AnswerKeysequenceQualificationTypeschema_AnswerKey_XsdtString_                                                                                                                                                                                    func(*XsdGoPkgHasElems_AnswerKeysequenceQualificationTypeschema_AnswerKey_XsdtString_, bool) error
	XsdGoPkgHasElems_CreateHITRequestsequenceRequestschema_CreateHITRequest_TCreateHITRequest_                                                                                                                                                                         func(*XsdGoPkgHasElems_CreateHITRequestsequenceRequestschema_CreateHITRequest_TCreateHITRequest_, bool) error
	XsdGoPkgHasElems_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_                                                                                                           func(*XsdGoPkgHasElems_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_, bool) error
	XsdGoPkgHasElem_GetAssignmentsForHITResponse                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_GetAssignmentsForHITResponse, bool) error
	TxsdGrantBonusResponse                                                                                                                                                                                                                                             func(*TxsdGrantBonusResponse, bool) error
	XsdGoPkgHasElem_GetQualificationScore                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_GetQualificationScore, bool) error
	TxsdNotifyWorkersResponse                                                                                                                                                                                                                                          func(*TxsdNotifyWorkersResponse, bool) error
	XsdGoPkgHasElem_GetQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_                                                                                                                              func(*XsdGoPkgHasElem_GetQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_, bool) error
	TxsdApproveAssignmentResponse                                                                                                                                                                                                                                      func(*TxsdApproveAssignmentResponse, bool) error
	XsdGoPkgHasElems_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_                                                                                                                                                                                 func(*XsdGoPkgHasElems_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_, bool) error
	XsdGoPkgHasElem_GetAccountBalanceRequestsequenceTxsdRequestRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_                                                                                                                                       func(*XsdGoPkgHasElem_GetAccountBalanceRequestsequenceTxsdRequestRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_, bool) error
	TxsdGetHITResponse                                                                                                                                                                                                                                                 func(*TxsdGetHITResponse, bool) error
	XsdGoPkgHasElems_SetHITAsReviewingResponse                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_SetHITAsReviewingResponse, bool) error
	TxsdExtendHIT                                                                                                                                                                                                                                                      func(*TxsdExtendHIT, bool) error
	XsdGoPkgHasElem_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_                                                                                                                                                              func(*XsdGoPkgHasElem_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_, bool) error
	XsdGoPkgHasElems_SetHITAsReviewing                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_SetHITAsReviewing, bool) error
	XsdGoPkgHasElems_RejectAssignment                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_RejectAssignment, bool) error
	XsdGoPkgHasElems_BlockWorkerResultsequenceTxsdBlockWorkerResponseBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_                                                                                                                                   func(*XsdGoPkgHasElems_BlockWorkerResultsequenceTxsdBlockWorkerResponseBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_, bool) error
	XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_                                                                                                                                                                                        func(*XsdGoPkgHasElem_KeywordssequenceCreateHITRequestschema_Keywords_XsdtString_, bool) error
	XsdGoPkgHasElems_GetFileUploadURLResponse                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_GetFileUploadURLResponse, bool) error
	XsdGoPkgHasElems_SearchHITsResponse                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_SearchHITsResponse, bool) error
	XsdGoPkgHasElem_GrantQualification                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_GrantQualification, bool) error
	XsdGoPkgHasElem_GetReviewResultsForHITRequestsequenceTxsdRequestRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_                                                                                                                        func(*XsdGoPkgHasElem_GetReviewResultsForHITRequestsequenceTxsdRequestRequestschema_GetReviewResultsForHITRequest_TGetReviewResultsForHITRequest_, bool) error
	XsdGoPkgHasElems_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_                                                                                                               func(*XsdGoPkgHasElems_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_, bool) error
	XsdGoPkgHasElems_MaxAssignmentssequenceHITschema_MaxAssignments_XsdtInt_                                                                                                                                                                                           func(*XsdGoPkgHasElems_MaxAssignmentssequenceHITschema_MaxAssignments_XsdtInt_, bool) error
	TApproveRejectedAssignmentResult                                                                                                                                                                                                                                   func(*TApproveRejectedAssignmentResult, bool) error
	XsdGoPkgHasElems_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_                                                                  func(*XsdGoPkgHasElems_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_, bool) error
	XsdGoPkgHasElems_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_                                                                                                                                                                                          func(*XsdGoPkgHasElems_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_, bool) error
	XsdGoPkgHasElems_GetReviewableHITsRequestsequenceRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_                                                                                                                                                 func(*XsdGoPkgHasElems_GetReviewableHITsRequestsequenceRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_, bool) error
	XsdGoPkgHasElem_AmountsequencePriceschema_Amount_XsdtDecimal_                                                                                                                                                                                                      func(*XsdGoPkgHasElem_AmountsequencePriceschema_Amount_XsdtDecimal_, bool) error
	XsdGoPkgHasElem_GetHITsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_                                                                                                         func(*XsdGoPkgHasElem_GetHITsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_, bool) error
	XsdGoPkgHasElem_RequestIdsequenceTxsdOperationRequestOperationRequestschema_RequestId_XsdtString_                                                                                                                                                                  func(*XsdGoPkgHasElem_RequestIdsequenceTxsdOperationRequestOperationRequestschema_RequestId_XsdtString_, bool) error
	TxsdExtendHITResponse                                                                                                                                                                                                                                              func(*TxsdExtendHITResponse, bool) error
	XsdGoPkgHasElem_RequestsequenceSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_                                                                                                                                                                func(*XsdGoPkgHasElem_RequestsequenceSetHITTypeNotificationschema_Request_TSetHITTypeNotificationRequest_, bool) error
	TxsdGetReviewResultsForHIT                                                                                                                                                                                                                                         func(*TxsdGetReviewResultsForHIT, bool) error
	TGetHITsForQualificationTypeResult                                                                                                                                                                                                                                 func(*TGetHITsForQualificationTypeResult, bool) error
	TxsdGetQualificationScoreResponse                                                                                                                                                                                                                                  func(*TxsdGetQualificationScoreResponse, bool) error
	XsdGoPkgHasElems_RejectAssignmentResponse                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_RejectAssignmentResponse, bool) error
	XsdGoPkgHasElem_RequestsequenceChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_                                                                                                                                                                        func(*XsdGoPkgHasElem_RequestsequenceChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_, bool) error
	XsdGoPkgHasElem_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_                                                    func(*XsdGoPkgHasElem_GetHITsForQualificationTypeResultsequenceTxsdGetHITsForQualificationTypeResponseGetHITsForQualificationTypeResponseschema_GetHITsForQualificationTypeResult_TGetHITsForQualificationTypeResult_, bool) error
	XsdGoPkgHasElem_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_                                                                                                                                       func(*XsdGoPkgHasElem_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_                                                                                                                                               func(*XsdGoPkgHasElem_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_, bool) error
	XsdGoPkgHasElems_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_                                                                                                                                         func(*XsdGoPkgHasElems_RejectAssignmentRequestsequenceTxsdRequestRequestschema_RejectAssignmentRequest_TRejectAssignmentRequest_, bool) error
	Thit                                                                                                                                                                                                                                                               func(*Thit, bool) error
	TAssignment                                                                                                                                                                                                                                                        func(*TAssignment, bool) error
	XsdGoPkgHasElem_SetHITAsReviewing                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_SetHITAsReviewing, bool) error
	XsdGoPkgHasElems_RejectAssignmentResultsequenceTxsdRejectAssignmentResponseRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_                                                                                                          func(*XsdGoPkgHasElems_RejectAssignmentResultsequenceTxsdRejectAssignmentResponseRejectAssignmentResponseschema_RejectAssignmentResult_TRejectAssignmentResult_, bool) error
	TChangeHITTypeOfHITRequest                                                                                                                                                                                                                                         func(*TChangeHITTypeOfHITRequest, bool) error
	XsdGoPkgHasElems_IntegerValuesequenceQualificationRequirementschema_IntegerValue_XsdtInt_                                                                                                                                                                          func(*XsdGoPkgHasElems_IntegerValuesequenceQualificationRequirementschema_IntegerValue_XsdtInt_, bool) error
	XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_                                                                                                                                                                                                  func(*XsdGoPkgHasElem_AnswersequenceAssignmentschema_Answer_XsdtString_, bool) error
	XsdGoPkgHasElem_RequestsequenceGrantBonusschema_Request_TGrantBonusRequest_                                                                                                                                                                                        func(*XsdGoPkgHasElem_RequestsequenceGrantBonusschema_Request_TGrantBonusRequest_, bool) error
	XsdGoPkgHasElems_LocaleValuesequenceQualificationRequirementschema_LocaleValue_TLocale_                                                                                                                                                                            func(*XsdGoPkgHasElems_LocaleValuesequenceQualificationRequirementschema_LocaleValue_TLocale_, bool) error
	XsdGoPkgHasElems_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_                                                                                                                                                                                func(*XsdGoPkgHasElems_ErrorsequenceTxsdErrorsErrorsschema_Error_TxsdErrorsSequenceError_, bool) error
	XsdGoPkgHasElems_UpdateQualificationType                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_UpdateQualificationType, bool) error
	XsdGoPkgHasElems_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_                                                                                                                                                                                   func(*XsdGoPkgHasElems_DataPointsequenceGetStatisticResultschema_DataPoint_TDataPoint_, bool) error
	TxsdRevokeQualification                                                                                                                                                                                                                                            func(*TxsdRevokeQualification, bool) error
	XsdGoPkgHasElem_ForceExpireHITResultsequenceForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_                                                                                                                                               func(*XsdGoPkgHasElem_ForceExpireHITResultsequenceForceExpireHITResponseschema_ForceExpireHITResult_TForceExpireHITResult_, bool) error
	XsdGoPkgHasElem_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_                                                                                                                                                    func(*XsdGoPkgHasElem_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_, bool) error
	XsdGoPkgHasElem_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_                                                                                                                                      func(*XsdGoPkgHasElem_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_, bool) error
	XsdGoPkgHasElems_ApproveAssignmentResponse                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_ApproveAssignmentResponse, bool) error
	XsdGoPkgHasElems_ChangeHITTypeOfHITResponse                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_ChangeHITTypeOfHITResponse, bool) error
	XsdGoPkgHasElem_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_                                                                                                         func(*XsdGoPkgHasElem_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_, bool) error
	XsdGoPkgHasElem_UpdateQualificationTypeRequestsequenceTxsdRequestRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_                                                                                                                     func(*XsdGoPkgHasElem_UpdateQualificationTypeRequestsequenceTxsdRequestRequestschema_UpdateQualificationTypeRequest_TUpdateQualificationTypeRequest_, bool) error
	XsdGoPkgHasElems_GetBonusPaymentsResponse                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_GetBonusPaymentsResponse, bool) error
	XsdGoPkgHasElems_VersionsequenceNotificationSpecificationschema_Version_XsdtString_                                                                                                                                                                                func(*XsdGoPkgHasElems_VersionsequenceNotificationSpecificationschema_Version_XsdtString_, bool) error
	XsdGoPkgHasElem_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_                                                                                                                                                             func(*XsdGoPkgHasElem_SendNotificationsequenceAssignQualificationRequestschema_SendNotification_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_OperationsequenceTxsdResponseGroupInformationSequenceValidOperationsValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Operation_XsdtString_                                                                       func(*XsdGoPkgHasElems_OperationsequenceTxsdResponseGroupInformationSequenceValidOperationsValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Operation_XsdtString_, bool) error
	XsdGoPkgHasElems_KeysequenceReviewResultDetailschema_Key_XsdtString_                                                                                                                                                                                               func(*XsdGoPkgHasElems_KeysequenceReviewResultDetailschema_Key_XsdtString_, bool) error
	XsdGoPkgHasElem_RequestsequenceUnblockWorkerschema_Request_TUnblockWorkerRequest_                                                                                                                                                                                  func(*XsdGoPkgHasElem_RequestsequenceUnblockWorkerschema_Request_TUnblockWorkerRequest_, bool) error
	XsdGoPkgHasElems_GetAccountBalanceResultsequenceTxsdGetAccountBalanceResponseGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_                                                                                                     func(*XsdGoPkgHasElems_GetAccountBalanceResultsequenceTxsdGetAccountBalanceResponseGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_, bool) error
	XsdGoPkgHasElems_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_                                                                                                                                                                                   func(*XsdGoPkgHasElems_ErrorCodesequenceReviewActionDetailschema_ErrorCode_XsdtString_, bool) error
	XsdGoPkgHasElems_SearchQualificationTypes                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_SearchQualificationTypes, bool) error
	XsdGoPkgHasElem_AvailableParameterssequenceTxsdOperationInformationOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_                                                                                             func(*XsdGoPkgHasElem_AvailableParameterssequenceTxsdOperationInformationOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_, bool) error
	XsdGoPkgHasElems_BlockWorkerRequestsequenceRequestschema_BlockWorkerRequest_TBlockWorkerRequest_                                                                                                                                                                   func(*XsdGoPkgHasElems_BlockWorkerRequestsequenceRequestschema_BlockWorkerRequest_TBlockWorkerRequest_, bool) error
	XsdGoPkgHasElem_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_                                                                                                                                                                                 func(*XsdGoPkgHasElem_HITReviewStatussequenceHITschema_HITReviewStatus_THITReviewStatus_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdRejectAssignmentRejectAssignmentschema_Request_TRejectAssignmentRequest_                                                                                                                                                       func(*XsdGoPkgHasElems_RequestsequenceTxsdRejectAssignmentRejectAssignmentschema_Request_TRejectAssignmentRequest_, bool) error
	XsdGoPkgHasElems_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_                                                                                                                                                                             func(*XsdGoPkgHasElems_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_, bool) error
	XsdGoPkgHasElems_AutoApprovalDelayInSecondssequenceHITschema_AutoApprovalDelayInSeconds_XsdtLong_                                                                                                                                                                  func(*XsdGoPkgHasElems_AutoApprovalDelayInSecondssequenceHITschema_AutoApprovalDelayInSeconds_XsdtLong_, bool) error
	XsdGoPkgHasElems_GetAssignmentResponse                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_GetAssignmentResponse, bool) error
	XsdGoPkgHasElem_GetFileUploadURL                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_GetFileUploadURL, bool) error
	XsdGoPkgHasElem_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_                                                                                 func(*XsdGoPkgHasElem_AvailableResponseGroupssequenceTxsdOperationInformationOperationInformationschema_AvailableResponseGroups_TxsdOperationInformationSequenceAvailableResponseGroups_, bool) error
	TxsdResponseGroupInformationSequenceElements                                                                                                                                                                                                                       func(*TxsdResponseGroupInformationSequenceElements, bool) error
	XsdGoPkgHasElem_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_                                                                                                      func(*XsdGoPkgHasElem_GetReviewableHITsResultsequenceTxsdGetReviewableHITsResponseGetReviewableHITsResponseschema_GetReviewableHITsResult_TGetReviewableHITsResult_, bool) error
	XsdGoPkgHasElems_HITReviewPolicysequenceGetReviewResultsForHITResultschema_HITReviewPolicy_TReviewPolicy_                                                                                                                                                          func(*XsdGoPkgHasElems_HITReviewPolicysequenceGetReviewResultsForHITResultschema_HITReviewPolicy_TReviewPolicy_, bool) error
	XsdGoPkgHasElems_AnswersequenceAssignmentschema_Answer_XsdtString_                                                                                                                                                                                                 func(*XsdGoPkgHasElems_AnswersequenceAssignmentschema_Answer_XsdtString_, bool) error
	XsdGoPkgHasElem_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_                                                                                                                                       func(*XsdGoPkgHasElem_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_, bool) error
	XsdGoPkgHasElem_RegisterHITType                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_RegisterHITType, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_                                                                                                                                                    func(*XsdGoPkgHasElems_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_, bool) error
	XsdGoPkgHasElems_GetHITsForQualificationType                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_GetHITsForQualificationType, bool) error
	XsdGoPkgHasElems_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_                                                                                                                                                                                     func(*XsdGoPkgHasElems_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_, bool) error
	XsdGoPkgHasElem_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_                                                                                                                                                                                       func(*XsdGoPkgHasElem_FormattedPricesequencePriceschema_FormattedPrice_XsdtString_, bool) error
	XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_                                                                                                                                                                                func(*XsdGoPkgHasElem_NumResultssequenceGetReviewableHITsResultschema_NumResults_XsdtInt_, bool) error
	TSearchHITsResult                                                                                                                                                                                                                                                  func(*TSearchHITsResult, bool) error
	XsdGoPkgHasElems_AWSAccessKeyIdsequenceTxsdRegisterHITTypeRegisterHITTypeschema_AWSAccessKeyId_XsdtString_                                                                                                                                                         func(*XsdGoPkgHasElems_AWSAccessKeyIdsequenceTxsdRegisterHITTypeRegisterHITTypeschema_AWSAccessKeyId_XsdtString_, bool) error
	XsdGoPkgHasElem_RequestsequenceRejectAssignmentschema_Request_TRejectAssignmentRequest_                                                                                                                                                                            func(*XsdGoPkgHasElem_RequestsequenceRejectAssignmentschema_Request_TRejectAssignmentRequest_, bool) error
	TLocale                                                                                                                                                                                                                                                            func(*TLocale, bool) error
	XsdGoPkgHasElem_SearchQualificationTypes                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_SearchQualificationTypes, bool) error
	XsdGoPkgHasElems_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_                                                                  func(*XsdGoPkgHasElems_SearchQualificationTypesResultsequenceTxsdSearchQualificationTypesResponseSearchQualificationTypesResponseschema_SearchQualificationTypesResult_TSearchQualificationTypesResult_, bool) error
	TxsdBlockWorkerResponse                                                                                                                                                                                                                                            func(*TxsdBlockWorkerResponse, bool) error
	TApproveRejectedAssignmentRequest                                                                                                                                                                                                                                  func(*TApproveRejectedAssignmentRequest, bool) error
	XsdGoPkgHasElem_GetReviewResultsForHITResponse                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_GetReviewResultsForHITResponse, bool) error
	XsdGoPkgHasElem_ChangeHITTypeOfHIT                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_ChangeHITTypeOfHIT, bool) error
	XsdGoPkgHasElems_GetQualificationTypeRequestsequenceRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_                                                                                                                                        func(*XsdGoPkgHasElems_GetQualificationTypeRequestsequenceRequestschema_GetQualificationTypeRequest_TGetQualificationTypeRequest_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetHITsForQualificationTypeGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_                                                                                                                      func(*XsdGoPkgHasElems_RequestsequenceTxsdGetHITsForQualificationTypeGetHITsForQualificationTypeschema_Request_TGetHITsForQualificationTypeRequest_, bool) error
	XsdGoPkgHasElems_GrantBonus                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_GrantBonus, bool) error
	XsdGoPkgHasElems_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_                                                                                                                                                           func(*XsdGoPkgHasElems_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_, bool) error
	XsdGoPkgHasElems_HITStatussequenceHITschema_HITStatus_THITStatus_                                                                                                                                                                                                  func(*XsdGoPkgHasElems_HITStatussequenceHITschema_HITStatus_THITStatus_, bool) error
	XsdGoPkgHasElems_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_                                                                                                                                                                           func(*XsdGoPkgHasElems_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_, bool) error
	TxsdSendTestEventNotificationResponse                                                                                                                                                                                                                              func(*TxsdSendTestEventNotificationResponse, bool) error
	TxsdChangeHITTypeOfHITResponse                                                                                                                                                                                                                                     func(*TxsdChangeHITTypeOfHITResponse, bool) error
	XsdGoPkgHasElems_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_                                                                                                                         func(*XsdGoPkgHasElems_UnblockWorkerResultsequenceTxsdUnblockWorkerResponseUnblockWorkerResponseschema_UnblockWorkerResult_TUnblockWorkerResult_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_                                                                                                                             func(*XsdGoPkgHasElem_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_, bool) error
	TQualificationRequirement                                                                                                                                                                                                                                          func(*TQualificationRequirement, bool) error
	XsdGoPkgHasElem_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_                                                                                                                                                            func(*XsdGoPkgHasElem_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_, bool) error
	XsdGoPkgHasElem_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_                                                                                                                                                                        func(*XsdGoPkgHasElem_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_, bool) error
	XsdGoPkgHasElems_GetReviewResultsForHIT                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_GetReviewResultsForHIT, bool) error
	TGetBlockedWorkersResult                                                                                                                                                                                                                                           func(*TGetBlockedWorkersResult, bool) error
	XsdGoPkgHasElems_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_                                                                                                                                                                               func(*XsdGoPkgHasElems_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_, bool) error
	XsdGoPkgHasElems_WorkerIdsequenceNotifyWorkersRequestschema_WorkerId_XsdtString_                                                                                                                                                                                   func(*XsdGoPkgHasElems_WorkerIdsequenceNotifyWorkersRequestschema_WorkerId_XsdtString_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_                                                                                                                                                                         func(*XsdGoPkgHasElems_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_                                                                                                                                                                         func(*XsdGoPkgHasElems_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_, bool) error
	TxsdGetBlockedWorkersResponse                                                                                                                                                                                                                                      func(*TxsdGetBlockedWorkersResponse, bool) error
	XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_                                                                                                                                                                                           func(*XsdGoPkgHasElem_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_, bool) error
	TxsdSetHITTypeNotificationResponse                                                                                                                                                                                                                                 func(*TxsdSetHITTypeNotificationResponse, bool) error
	TReviewActionDetail                                                                                                                                                                                                                                                func(*TReviewActionDetail, bool) error
	XsdGoPkgHasElems_NotifyWorkers                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_NotifyWorkers, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetBlockedWorkersGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_                                                                                                                                                    func(*XsdGoPkgHasElems_RequestsequenceTxsdGetBlockedWorkersGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_, bool) error
	XsdGoPkgHasElems_AvailableParameterssequenceOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_                                                                                                                    func(*XsdGoPkgHasElems_AvailableParameterssequenceOperationInformationschema_AvailableParameters_TxsdOperationInformationSequenceAvailableParameters_, bool) error
	XsdGoPkgHasElems_SubjectIdsequenceQualificationschema_SubjectId_XsdtString_                                                                                                                                                                                        func(*XsdGoPkgHasElems_SubjectIdsequenceQualificationschema_SubjectId_XsdtString_, bool) error
	XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_                                                                                                                                                                 func(*XsdGoPkgHasElem_StatisticsequenceGetRequesterStatisticRequestschema_Statistic_TRequesterStatistic_, bool) error
	TDataPoint                                                                                                                                                                                                                                                         func(*TDataPoint, bool) error
	XsdGoPkgHasElem_RequestsequenceGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_                                                                                                                                                      func(*XsdGoPkgHasElem_RequestsequenceGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_, bool) error
	XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_                                                                                                                                                                               func(*XsdGoPkgHasElem_MaxAssignmentssequenceCreateHITRequestschema_MaxAssignments_XsdtInt_, bool) error
	XsdGoPkgHasElem_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_                                                                                                                                                             func(*XsdGoPkgHasElem_PolicyLevelsequenceGetReviewResultsForHITRequestschema_PolicyLevel_TReviewPolicyLevel_, bool) error
	XsdGoPkgHasElem_ResultsequenceReviewActionDetailschema_Result_XsdtString_                                                                                                                                                                                          func(*XsdGoPkgHasElem_ResultsequenceReviewActionDetailschema_Result_XsdtString_, bool) error
	TxsdApproveRejectedAssignmentResponse                                                                                                                                                                                                                              func(*TxsdApproveRejectedAssignmentResponse, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdUnblockWorkerUnblockWorkerschema_Request_TUnblockWorkerRequest_                                                                                                                                                                func(*XsdGoPkgHasElems_RequestsequenceTxsdUnblockWorkerUnblockWorkerschema_Request_TUnblockWorkerRequest_, bool) error
	XsdGoPkgHasElems_ValidatesequenceGetReviewResultsForHITschema_Validate_XsdtString_                                                                                                                                                                                 func(*XsdGoPkgHasElems_ValidatesequenceGetReviewResultsForHITschema_Validate_XsdtString_, bool) error
	XsdGoPkgHasElem_LocaleValuesequenceQualificationschema_LocaleValue_TLocale_                                                                                                                                                                                        func(*XsdGoPkgHasElem_LocaleValuesequenceQualificationschema_LocaleValue_TLocale_, bool) error
	XsdGoPkgHasElem_RevokeQualification                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_RevokeQualification, bool) error
	XsdGoPkgHasElem_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_                                                                                          func(*XsdGoPkgHasElem_ElementsequenceTxsdResponseGroupInformationSequenceElementsElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Element_XsdtString_, bool) error
	XsdGoPkgHasElem_GetReviewableHITsRequestsequenceTxsdRequestRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_                                                                                                                                       func(*XsdGoPkgHasElem_GetReviewableHITsRequestsequenceTxsdRequestRequestschema_GetReviewableHITsRequest_TGetReviewableHITsRequest_, bool) error
	XsdGoPkgHasElem_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_                                                                                                                                             func(*XsdGoPkgHasElem_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_, bool) error
	XsdGoPkgHasElems_SendTestEventNotificationResultsequenceTxsdSendTestEventNotificationResponseSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_                                                             func(*XsdGoPkgHasElems_SendTestEventNotificationResultsequenceTxsdSendTestEventNotificationResponseSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_, bool) error
	TGetReviewableHITsResult                                                                                                                                                                                                                                           func(*TGetReviewableHITsResult, bool) error
	XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_                                                                                                                                                                        func(*XsdGoPkgHasElem_TimePeriodsequenceGetRequesterStatisticRequestschema_TimePeriod_TimePeriod_, bool) error
	XsdGoPkgHasElems_GetHITResponse                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_GetHITResponse, bool) error
	XsdGoPkgHasElem_GetHITsForQualificationTypeResponse                                                                                                                                                                                                                func(*XsdGoPkgHasElem_GetHITsForQualificationTypeResponse, bool) error
	XsdGoPkgHasElems_UnblockWorker                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_UnblockWorker, bool) error
	XsdGoPkgHasElem_BlockWorkerRequestsequenceTxsdRequestRequestschema_BlockWorkerRequest_TBlockWorkerRequest_                                                                                                                                                         func(*XsdGoPkgHasElem_BlockWorkerRequestsequenceTxsdRequestRequestschema_BlockWorkerRequest_TBlockWorkerRequest_, bool) error
	XsdGoPkgHasElem_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_                                                                                                                                                                                 func(*XsdGoPkgHasElem_StatussequenceReviewActionDetailschema_Status_TReviewActionStatus_, bool) error
	XsdGoPkgHasElems_SearchHITs                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_SearchHITs, bool) error
	XsdGoPkgHasElem_SearchQualificationTypesResponse                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_SearchQualificationTypesResponse, bool) error
	XsdGoPkgHasElem_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_                                                                                                           func(*XsdGoPkgHasElem_GetFileUploadURLResultsequenceTxsdGetFileUploadURLResponseGetFileUploadURLResponseschema_GetFileUploadURLResult_TGetFileUploadURLResult_, bool) error
	XsdGoPkgHasElems_GetAccountBalanceRequestsequenceRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_                                                                                                                                                 func(*XsdGoPkgHasElems_GetAccountBalanceRequestsequenceRequestschema_GetAccountBalanceRequest_TGetAccountBalanceRequest_, bool) error
	XsdGoPkgHasElem_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_                                                                                                                                                                                 func(*XsdGoPkgHasElem_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_, bool) error
	XsdGoPkgHasElem_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_                                                                                                                              func(*XsdGoPkgHasElem_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_, bool) error
	XsdGoPkgHasElem_GetBlockedWorkers                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_GetBlockedWorkers, bool) error
	XsdGoPkgHasElems_HelpResponse                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_HelpResponse, bool) error
	XsdGoPkgHasElems_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_                                                                                      func(*XsdGoPkgHasElems_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_, bool) error
	XsdGoPkgHasElem_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_                                                                                                                                                                              func(*XsdGoPkgHasElem_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_ApproveAssignment                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_ApproveAssignment, bool) error
	XsdGoPkgHasElems_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_                                                                                                                                                                         func(*XsdGoPkgHasElems_StatussequenceGetReviewableHITsRequestschema_Status_TReviewableHITStatus_, bool) error
	XsdGoPkgHasElems_ApproveRejectedAssignmentRequestsequenceRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_                                                                                                                         func(*XsdGoPkgHasElems_ApproveRejectedAssignmentRequestsequenceRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_, bool) error
	XsdGoPkgHasElem_GetAccountBalanceResponse                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_GetAccountBalanceResponse, bool) error
	XsdGoPkgHasElem_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_                                                                                                      func(*XsdGoPkgHasElem_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_, bool) error
	XsdGoPkgHasElems_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_                                                                                                                                                                                 func(*XsdGoPkgHasElems_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_, bool) error
	XsdGoPkgHasElems_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_                                                                                                                                                             func(*XsdGoPkgHasElems_TestEventTypesequenceSendTestEventNotificationRequestschema_TestEventType_TEventType_, bool) error
	XsdGoPkgHasElems_CreateHITResponse                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_CreateHITResponse, bool) error
	XsdGoPkgHasElem_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_                                                                                                func(*XsdGoPkgHasElem_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_, bool) error
	XsdGoPkgHasElem_CreationDatesequenceTxsdResponseGroupInformationResponseGroupInformationschema_CreationDate_XsdtString_                                                                                                                                            func(*XsdGoPkgHasElem_CreationDatesequenceTxsdResponseGroupInformationResponseGroupInformationschema_CreationDate_XsdtString_, bool) error
	TxsdOperationInformation                                                                                                                                                                                                                                           func(*TxsdOperationInformation, bool) error
	TGetHITsForQualificationTypeRequest                                                                                                                                                                                                                                func(*TGetHITsForQualificationTypeRequest, bool) error
	XsdGoPkgHasElems_SignaturesequenceGetAccountBalanceschema_Signature_XsdtString_                                                                                                                                                                                    func(*XsdGoPkgHasElems_SignaturesequenceGetAccountBalanceschema_Signature_XsdtString_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdSearchHITsSearchHITsschema_Request_TSearchHITsRequest_                                                                                                                                                                         func(*XsdGoPkgHasElems_RequestsequenceTxsdSearchHITsSearchHITsschema_Request_TSearchHITsRequest_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_                                                                                                                                  func(*XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_, bool) error
	XsdGoPkgHasElems_TimestampsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Timestamp_XsdtDateTime_                                                                                                                                                             func(*XsdGoPkgHasElems_TimestampsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Timestamp_XsdtDateTime_, bool) error
	XsdGoPkgHasElem_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_                                                                                                                                                                                           func(*XsdGoPkgHasElem_CurrencyCodesequencePriceschema_CurrencyCode_XsdtString_, bool) error
	XsdGoPkgHasElem_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_                                                                                                                                                                              func(*XsdGoPkgHasElem_MessageTextsequenceNotifyWorkersRequestschema_MessageText_XsdtString_, bool) error
	TxsdDisableHITResponse                                                                                                                                                                                                                                             func(*TxsdDisableHITResponse, bool) error
	XsdGoPkgHasElem_GetQualificationsForQualificationType                                                                                                                                                                                                              func(*XsdGoPkgHasElem_GetQualificationsForQualificationType, bool) error
	XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_                                                                                                                                                                  func(*XsdGoPkgHasElem_SortDirectionsequenceGetReviewableHITsRequestschema_SortDirection_TSortDirection_, bool) error
	XsdGoPkgHasElems_GrantTimesequenceBonusPaymentschema_GrantTime_XsdtDateTime_                                                                                                                                                                                       func(*XsdGoPkgHasElems_GrantTimesequenceBonusPaymentschema_GrantTime_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_RetryDelayInSecondssequenceUpdateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_                                                                                                                                                     func(*XsdGoPkgHasElems_RetryDelayInSecondssequenceUpdateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_, bool) error
	XsdGoPkgHasElems_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_                                                                                                                                                     func(*XsdGoPkgHasElems_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_                                                                                                                                                                func(*XsdGoPkgHasElem_NumberOfAssignmentsCompletedsequenceHITschema_NumberOfAssignmentsCompleted_XsdtInt_, bool) error
	XsdGoPkgHasElem_HTTPHeaders                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_HTTPHeaders, bool) error
	XsdGoPkgHasElems_Request                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Request, bool) error
	XsdGoPkgHasElem_GetAccountBalanceResultsequenceGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_                                                                                                                                   func(*XsdGoPkgHasElem_GetAccountBalanceResultsequenceGetAccountBalanceResponseschema_GetAccountBalanceResult_TGetAccountBalanceResult_, bool) error
	XsdGoPkgHasElems_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_                                                                                                                                            func(*XsdGoPkgHasElems_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_, bool) error
	XsdGoPkgHasElems_CountrysequenceLocaleschema_Country_XsdtString_                                                                                                                                                                                                   func(*XsdGoPkgHasElems_CountrysequenceLocaleschema_Country_XsdtString_, bool) error
	XsdGoPkgHasElems_BodysequenceClaimschema_Body_XsdtString_                                                                                                                                                                                                          func(*XsdGoPkgHasElems_BodysequenceClaimschema_Body_XsdtString_, bool) error
	XsdGoPkgHasElem_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_                                                                                                                                 func(*XsdGoPkgHasElem_RevokeQualificationRequestsequenceTxsdRequestRequestschema_RevokeQualificationRequest_TRevokeQualificationRequest_, bool) error
	XsdGoPkgHasElems_DisableHIT                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_DisableHIT, bool) error
	XsdGoPkgHasElem_ResponseGroupInformation                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_ResponseGroupInformation, bool) error
	XsdGoPkgHasElems_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_                                                                                                                                                            func(*XsdGoPkgHasElems_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_, bool) error
	XsdGoPkgHasElem_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_                                                                                                                                                                       func(*XsdGoPkgHasElem_BonusPaymentsequenceGetBonusPaymentsResultschema_BonusPayment_TBonusPayment_, bool) error
	XsdGoPkgHasElems_GetAssignmentsForHIT                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_GetAssignmentsForHIT, bool) error
	XsdGoPkgHasElems_CreateQualificationTypeResponse                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_CreateQualificationTypeResponse, bool) error
	XsdGoPkgHasElem_HelpResponse                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_HelpResponse, bool) error
	XsdGoPkgHasElem_SendTestEventNotificationResultsequenceSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_                                                                                                   func(*XsdGoPkgHasElem_SendTestEventNotificationResultsequenceSendTestEventNotificationResponseschema_SendTestEventNotificationResult_TSendTestEventNotificationResult_, bool) error
	XsdGoPkgHasElem_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_                                                                                                                                                                              func(*XsdGoPkgHasElem_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_, bool) error
	TxsdAssignQualificationResponse                                                                                                                                                                                                                                    func(*TxsdAssignQualificationResponse, bool) error
	XsdGoPkgHasElems_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_                                                                                                                                                              func(*XsdGoPkgHasElems_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_, bool) error
	TExtendHITRequest                                                                                                                                                                                                                                                  func(*TExtendHITRequest, bool) error
	TxsdDisposeQualificationType                                                                                                                                                                                                                                       func(*TxsdDisposeQualificationType, bool) error
	XsdGoPkgHasElems_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_                                                                                                                              func(*XsdGoPkgHasElems_NotifyWorkersFailureCodesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureCode_TNotifyWorkersFailureCode_, bool) error
	XsdGoPkgHasElems_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_                                                                                                                 func(*XsdGoPkgHasElems_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_, bool) error
	XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_                                                                                                                                                                         func(*XsdGoPkgHasElem_IntegerValuesequenceAssignQualificationRequestschema_IntegerValue_XsdtInt_, bool) error
	XsdGoPkgHasElem_RejectQualificationRequestResponse                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_RejectQualificationRequestResponse, bool) error
	XsdGoPkgHasElem_CountrysequenceLocaleschema_Country_XsdtString_                                                                                                                                                                                                    func(*XsdGoPkgHasElem_CountrysequenceLocaleschema_Country_XsdtString_, bool) error
	XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_                                                                                                                                                                                     func(*XsdGoPkgHasElem_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_, bool) error
	XsdGoPkgHasElems_UpdateQualificationTypeResponse                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_UpdateQualificationTypeResponse, bool) error
	XsdGoPkgHasElems_UnblockWorkerResponse                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_UnblockWorkerResponse, bool) error
	XsdGoPkgHasElem_Help                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_Help, bool) error
	XsdGoPkgHasElems_TypesequenceClaimschema_Type_XsdtString_                                                                                                                                                                                                          func(*XsdGoPkgHasElems_TypesequenceClaimschema_Type_XsdtString_, bool) error
	XsdGoPkgHasElem_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_                                                                                                                                                                                  func(*XsdGoPkgHasElem_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_                                                                                                                               func(*XsdGoPkgHasElems_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_, bool) error
	XsdGoPkgHasElem_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_                                                                                       func(*XsdGoPkgHasElem_DefaultResponseGroupssequenceTxsdOperationInformationOperationInformationschema_DefaultResponseGroups_TxsdOperationInformationSequenceDefaultResponseGroups_, bool) error
	XsdGoPkgHasElems_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_                                                                                                                                                                                          func(*XsdGoPkgHasElems_CreationTimesequenceHITschema_CreationTime_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_                                                                                                                                                          func(*XsdGoPkgHasElems_HITLayoutParametersequenceCreateHITRequestschema_HITLayoutParameter_THITLayoutParameter_, bool) error
	XsdGoPkgHasElem_ExpirationsequenceHITschema_Expiration_XsdtDateTime_                                                                                                                                                                                               func(*XsdGoPkgHasElem_ExpirationsequenceHITschema_Expiration_XsdtDateTime_, bool) error
	XsdGoPkgHasElem_Request                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Request, bool) error
	TxsdOperationRequest                                                                                                                                                                                                                                               func(*TxsdOperationRequest, bool) error
	XsdGoPkgHasElems_CreationDatesequenceResponseGroupInformationschema_CreationDate_XsdtString_                                                                                                                                                                       func(*XsdGoPkgHasElems_CreationDatesequenceResponseGroupInformationschema_CreationDate_XsdtString_, bool) error
	XsdGoPkgHasElems_GetQualificationRequests                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_GetQualificationRequests, bool) error
	XsdGoPkgHasElems_GetQualificationRequestsResponse                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_GetQualificationRequestsResponse, bool) error
	XsdGoPkgHasElem_DisposeQualificationTypeResponse                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_DisposeQualificationTypeResponse, bool) error
	TRevokeQualificationRequest                                                                                                                                                                                                                                        func(*TRevokeQualificationRequest, bool) error
	TForceExpireHITResult                                                                                                                                                                                                                                              func(*TForceExpireHITResult, bool) error
	XsdGoPkgHasElem_ForceExpireHITResponse                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_ForceExpireHITResponse, bool) error
	TxsdGetAssignmentsForHIT                                                                                                                                                                                                                                           func(*TxsdGetAssignmentsForHIT, bool) error
	TxsdOperationInformationSequenceAvailableParameters                                                                                                                                                                                                                func(*TxsdOperationInformationSequenceAvailableParameters, bool) error
	XsdGoPkgHasElem_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_                                                                                                                                                            func(*XsdGoPkgHasElem_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_, bool) error
	TUnblockWorkerRequest                                                                                                                                                                                                                                              func(*TUnblockWorkerRequest, bool) error
	XsdGoPkgHasElem_SetHITAsReviewingResponse                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_SetHITAsReviewingResponse, bool) error
	TxsdGetBonusPaymentsResponse                                                                                                                                                                                                                                       func(*TxsdGetBonusPaymentsResponse, bool) error
	XsdGoPkgHasElem_ApproveRejectedAssignment                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_ApproveRejectedAssignment, bool) error
	XsdGoPkgHasElems_ApproveRejectedAssignment                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_ApproveRejectedAssignment, bool) error
	XsdGoPkgHasElems_ApproveRejectedAssignmentResponse                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_ApproveRejectedAssignmentResponse, bool) error
	TxsdNotifyWorkers                                                                                                                                                                                                                                                  func(*TxsdNotifyWorkers, bool) error
	XsdGoPkgHasElems_SetHITTypeNotificationResponse                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_SetHITTypeNotificationResponse, bool) error
	XsdGoPkgHasElem_DisposeHITResponse                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_DisposeHITResponse, bool) error
	XsdGoPkgHasElem_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_                                                                                                                                                                                      func(*XsdGoPkgHasElem_ObjectIdsequenceReviewActionDetailschema_ObjectId_XsdtString_, bool) error
	XsdGoPkgHasElems_ExtendHITResponse                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_ExtendHITResponse, bool) error
	XsdGoPkgHasElem_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_                                                                                                                                                                               func(*XsdGoPkgHasElem_QuerysequenceSearchQualificationTypesRequestschema_Query_XsdtString_, bool) error
	XsdGoPkgHasElems_ExtendHIT                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_ExtendHIT, bool) error
	XsdGoPkgHasElems_QualificationTypeIdsequenceGetQualificationsForQualificationTypeRequestschema_QualificationTypeId_XsdtString_                                                                                                                                     func(*XsdGoPkgHasElems_QualificationTypeIdsequenceGetQualificationsForQualificationTypeRequestschema_QualificationTypeId_XsdtString_, bool) error
	XsdGoPkgHasElems_UniqueRequestTokensequenceGrantBonusRequestschema_UniqueRequestToken_XsdtString_                                                                                                                                                                  func(*XsdGoPkgHasElems_UniqueRequestTokensequenceGrantBonusRequestschema_UniqueRequestToken_XsdtString_, bool) error
	XsdGoPkgHasElems_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_                                                                                                                                                           func(*XsdGoPkgHasElems_CodesequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Code_XsdtString_, bool) error
	XsdGoPkgHasElem_Arguments                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Arguments, bool) error
	TxsdCreateHITResponse                                                                                                                                                                                                                                              func(*TxsdCreateHITResponse, bool) error
	TGetAssignmentResult                                                                                                                                                                                                                                               func(*TGetAssignmentResult, bool) error
	XsdGoPkgHasElems_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_                                                                                               func(*XsdGoPkgHasElems_RequiredParameterssequenceTxsdOperationInformationOperationInformationschema_RequiredParameters_TxsdOperationInformationSequenceRequiredParameters_, bool) error
	TxsdUpdateQualificationType                                                                                                                                                                                                                                        func(*TxsdUpdateQualificationType, bool) error
	XsdGoPkgHasElems_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_                                                                                                                                                     func(*XsdGoPkgHasElems_StatussequenceGetQualificationsForQualificationTypeRequestschema_Status_TQualificationStatus_, bool) error
	XsdGoPkgHasElems_HITTypeIdsequenceRegisterHITTypeResultschema_HITTypeId_XsdtString_                                                                                                                                                                                func(*XsdGoPkgHasElems_HITTypeIdsequenceRegisterHITTypeResultschema_HITTypeId_XsdtString_, bool) error
	XsdGoPkgHasElems_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_                                                                                                                                                                                        func(*XsdGoPkgHasElems_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_                                                                                                                            func(*XsdGoPkgHasElems_RequestsequenceTxsdSendTestEventNotificationSendTestEventNotificationschema_Request_TSendTestEventNotificationRequest_, bool) error
	XsdGoPkgHasElem_RejectAssignment                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_RejectAssignment, bool) error
	XsdGoPkgHasElems_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_                                                        func(*XsdGoPkgHasElems_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_, bool) error
	XsdGoPkgHasElems_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_                                                                                                                                                                                                func(*XsdGoPkgHasElems_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_, bool) error
	TReviewPolicy                                                                                                                                                                                                                                                      func(*TReviewPolicy, bool) error
	TSetHITAsReviewingRequest                                                                                                                                                                                                                                          func(*TSetHITAsReviewingRequest, bool) error
	XsdGoPkgHasElem_UnblockWorkerResponse                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_UnblockWorkerResponse, bool) error
	XsdGoPkgHasElems_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_                                                                                                                                                          func(*XsdGoPkgHasElems_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_, bool) error
	TSearchQualificationTypesRequest                                                                                                                                                                                                                                   func(*TSearchQualificationTypesRequest, bool) error
	XsdGoPkgHasElems_HeadersequenceTxsdHTTPHeadersHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_                                                                                                                                                              func(*XsdGoPkgHasElems_HeadersequenceTxsdHTTPHeadersHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_, bool) error
	XsdGoPkgHasElem_AboutsequenceHelpRequestschema_About_XsdtString_                                                                                                                                                                                                   func(*XsdGoPkgHasElem_AboutsequenceHelpRequestschema_About_XsdtString_, bool) error
	XsdGoPkgHasElem_GetQualificationsForQualificationTypeResponse                                                                                                                                                                                                      func(*XsdGoPkgHasElem_GetQualificationsForQualificationTypeResponse, bool) error
	XsdGoPkgHasElem_AssignQualificationResponse                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_AssignQualificationResponse, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_                                                                                                                                                                          func(*XsdGoPkgHasElem_RequestsequenceTxsdDisableHITDisableHITschema_Request_TDisableHITRequest_, bool) error
	XsdGoPkgHasElem_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_                                                         func(*XsdGoPkgHasElem_RejectQualificationRequestResultsequenceTxsdRejectQualificationRequestResponseRejectQualificationRequestResponseschema_RejectQualificationRequestResult_TRejectQualificationRequestResult_, bool) error
	XsdGoPkgHasElem_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_                                                                                                                                                            func(*XsdGoPkgHasElem_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_, bool) error
	TForceExpireHITRequest                                                                                                                                                                                                                                             func(*TForceExpireHITRequest, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_                                                                                                                                                                func(*XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentGetAssignmentschema_Request_TGetAssignmentRequest_, bool) error
	XsdGoPkgHasElem_GetAssignmentResponse                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_GetAssignmentResponse, bool) error
	TGetRequesterWorkerStatisticRequest                                                                                                                                                                                                                                func(*TGetRequesterWorkerStatisticRequest, bool) error
	XsdGoPkgHasElem_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_                                                                                                                                                                        func(*XsdGoPkgHasElem_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_, bool) error
	XsdGoPkgHasElems_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_                                                                                                                          func(*XsdGoPkgHasElems_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_, bool) error
	TAssignQualificationRequest                                                                                                                                                                                                                                        func(*TAssignQualificationRequest, bool) error
	TxsdDisposeHIT                                                                                                                                                                                                                                                     func(*TxsdDisposeHIT, bool) error
	TxsdDisposeHITResponse                                                                                                                                                                                                                                             func(*TxsdDisposeHITResponse, bool) error
	XsdGoPkgHasElems_RewardsequenceRegisterHITTypeRequestschema_Reward_TPrice_                                                                                                                                                                                         func(*XsdGoPkgHasElems_RewardsequenceRegisterHITTypeRequestschema_Reward_TPrice_, bool) error
	XsdGoPkgHasElem_SearchQualificationTypesRequestsequenceTxsdRequestRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_                                                                                                                  func(*XsdGoPkgHasElem_SearchQualificationTypesRequestsequenceTxsdRequestRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_, bool) error
	XsdGoPkgHasElem_GetHIT                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_GetHIT, bool) error
	TxsdRejectAssignmentResponse                                                                                                                                                                                                                                       func(*TxsdRejectAssignmentResponse, bool) error
	XsdGoPkgHasElem_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_                                                                                                                                                                            func(*XsdGoPkgHasElem_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_, bool) error
	XsdGoPkgHasElem_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_                                                                                                                                                                                  func(*XsdGoPkgHasElem_RejectionTimesequenceAssignmentschema_RejectionTime_XsdtDateTime_, bool) error
	XsdGoPkgHasElem_GetQualificationsForQualificationTypeResultsequenceGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_                                                   func(*XsdGoPkgHasElem_GetQualificationsForQualificationTypeResultsequenceGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_, bool) error
	XsdGoPkgHasElems_SearchQualificationTypesRequestsequenceRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_                                                                                                                            func(*XsdGoPkgHasElems_SearchQualificationTypesRequestsequenceRequestschema_SearchQualificationTypesRequest_TSearchQualificationTypesRequest_, bool) error
	XsdGoPkgHasElem_ChangeHITTypeOfHITRequestsequenceTxsdRequestRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_                                                                                                                                    func(*XsdGoPkgHasElem_ChangeHITTypeOfHITRequestsequenceTxsdRequestRequestschema_ChangeHITTypeOfHITRequest_TChangeHITTypeOfHITRequest_, bool) error
	TxsdRegisterHITTypeResponse                                                                                                                                                                                                                                        func(*TxsdRegisterHITTypeResponse, bool) error
	XsdGoPkgHasElems_AssignQualificationResponse                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_AssignQualificationResponse, bool) error
	TGetReviewResultsForHITRequest                                                                                                                                                                                                                                     func(*TGetReviewResultsForHITRequest, bool) error
	TxsdGetQualificationsForQualificationType                                                                                                                                                                                                                          func(*TxsdGetQualificationsForQualificationType, bool) error
	XsdGoPkgHasElem_NotifyWorkers                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_NotifyWorkers, bool) error
	XsdGoPkgHasElems_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_                                                                                                                                                            func(*XsdGoPkgHasElems_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_, bool) error
	XsdGoPkgHasElem_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_                                                                                                                                                                                    func(*XsdGoPkgHasElem_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_, bool) error
	XsdGoPkgHasElem_BlockWorkerResponse                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_BlockWorkerResponse, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_                                                                                                                                   func(*XsdGoPkgHasElem_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_, bool) error
	XsdGoPkgHasElems_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_                                                                                                                                                                             func(*XsdGoPkgHasElems_ActivesequenceSetHITTypeNotificationRequestschema_Active_XsdtBoolean_, bool) error
	TxsdSearchQualificationTypesResponse                                                                                                                                                                                                                               func(*TxsdSearchQualificationTypesResponse, bool) error
	TGetQualificationTypeRequest                                                                                                                                                                                                                                       func(*TGetQualificationTypeRequest, bool) error
	TGetReviewResultsForHITResult                                                                                                                                                                                                                                      func(*TGetReviewResultsForHITResult, bool) error
	XsdGoPkgHasElem_GrantBonus                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_GrantBonus, bool) error
	XsdGoPkgHasElems_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_                                                                                                                                         func(*XsdGoPkgHasElems_GetBonusPaymentsRequestsequenceTxsdRequestRequestschema_GetBonusPaymentsRequest_TGetBonusPaymentsRequest_, bool) error
	XsdGoPkgHasElem_HeadersequenceHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_                                                                                                                                                                              func(*XsdGoPkgHasElem_HeadersequenceHTTPHeadersschema_Header_TxsdHTTPHeadersSequenceHeader_, bool) error
	XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_                                                                                                                                                                                func(*XsdGoPkgHasElem_SignaturesequenceTxsdCreateHITCreateHITschema_Signature_XsdtString_, bool) error
	XsdGoPkgHasElem_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_                                                                                                                                                            func(*XsdGoPkgHasElem_RetrieveActionssequenceGetReviewResultsForHITRequestschema_RetrieveActions_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_                                                                                                                                                                     func(*XsdGoPkgHasElem_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_, bool) error
	XsdGoPkgHasElems_ExpirationsequenceHITschema_Expiration_XsdtDateTime_                                                                                                                                                                                              func(*XsdGoPkgHasElems_ExpirationsequenceHITschema_Expiration_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_RevokeQualificationResponse                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_RevokeQualificationResponse, bool) error
	XsdGoPkgHasElem_ApproveRejectedAssignmentRequestsequenceTxsdRequestRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_                                                                                                               func(*XsdGoPkgHasElem_ApproveRejectedAssignmentRequestsequenceTxsdRequestRequestschema_ApproveRejectedAssignmentRequest_TApproveRejectedAssignmentRequest_, bool) error
	XsdGoPkgHasElem_GrantQualificationResultsequenceGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_                                                                                                                               func(*XsdGoPkgHasElem_GrantQualificationResultsequenceGrantQualificationResponseschema_GrantQualificationResult_TGrantQualificationResult_, bool) error
	XsdGoPkgHasElems_ReasonsequenceBonusPaymentschema_Reason_XsdtString_                                                                                                                                                                                               func(*XsdGoPkgHasElems_ReasonsequenceBonusPaymentschema_Reason_XsdtString_, bool) error
	XsdGoPkgHasElem_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_                                                                                                                                                                           func(*XsdGoPkgHasElem_ReviewActionsequenceReviewReportschema_ReviewAction_TReviewActionDetail_, bool) error
	XsdGoPkgHasElem_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_                                                                                                                                                                func(*XsdGoPkgHasElem_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_, bool) error
	XsdGoPkgHasElem_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_                                                                                                                                                                                                 func(*XsdGoPkgHasElem_HITGroupIdsequenceHITschema_HITGroupId_XsdtString_, bool) error
	XsdGoPkgHasElem_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_                                                                   func(*XsdGoPkgHasElem_UpdateQualificationScoreResultsequenceTxsdUpdateQualificationScoreResponseUpdateQualificationScoreResponseschema_UpdateQualificationScoreResult_TUpdateQualificationScoreResult_, bool) error
	TxsdGetBonusPayments                                                                                                                                                                                                                                               func(*TxsdGetBonusPayments, bool) error
	TxsdRejectQualificationRequest                                                                                                                                                                                                                                     func(*TxsdRejectQualificationRequest, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_                                                                                                                                        func(*XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_, bool) error
	XsdGoPkgHasElem_UpdateQualificationTypeResponse                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_UpdateQualificationTypeResponse, bool) error
	TxsdResponseGroupInformationSequenceValidOperations                                                                                                                                                                                                                func(*TxsdResponseGroupInformationSequenceValidOperations, bool) error
	XsdGoPkgHasElems_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_                                                                                                                                          func(*XsdGoPkgHasElems_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_, bool) error
	TGetStatisticResult                                                                                                                                                                                                                                                func(*TGetStatisticResult, bool) error
	XsdGoPkgHasElem_GetBlockedWorkersResponse                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_GetBlockedWorkersResponse, bool) error
	XsdGoPkgHasElem_RequestsequenceGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_                                                                                                                                                                          func(*XsdGoPkgHasElem_RequestsequenceGetBlockedWorkersschema_Request_TGetBlockedWorkersRequest_, bool) error
	TGetAssignmentsForHITRequest                                                                                                                                                                                                                                       func(*TGetAssignmentsForHITRequest, bool) error
	XsdGoPkgHasElems_DisableHITResponse                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_DisableHITResponse, bool) error
	XsdGoPkgHasElem_AssignmentStatussequenceAssignmentschema_AssignmentStatus_TAssignmentStatus_                                                                                                                                                                       func(*XsdGoPkgHasElem_AssignmentStatussequenceAssignmentschema_AssignmentStatus_TAssignmentStatus_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_                                                                                                                                              func(*XsdGoPkgHasElems_RequestsequenceTxsdAssignQualificationAssignQualificationschema_Request_TAssignQualificationRequest_, bool) error
	TUnblockWorkerResult                                                                                                                                                                                                                                               func(*TUnblockWorkerResult, bool) error
	XsdGoPkgHasElems_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_                                                                                                                                                                       func(*XsdGoPkgHasElems_HelpTypesequenceHelpRequestschema_HelpType_TxsdHelpRequestSequenceHelpType_, bool) error
	TxsdUpdateQualificationScoreResponse                                                                                                                                                                                                                               func(*TxsdUpdateQualificationScoreResponse, bool) error
	XsdGoPkgHasElems_GetAccountBalanceResponse                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_GetAccountBalanceResponse, bool) error
	XsdGoPkgHasElems_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_                                                                                                                                                                                       func(*XsdGoPkgHasElems_AcceptTimesequenceAssignmentschema_AcceptTime_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_                                                                                                                             func(*XsdGoPkgHasElems_GetAssignmentsForHITRequestsequenceTxsdRequestRequestschema_GetAssignmentsForHITRequest_TGetAssignmentsForHITRequest_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetHITGetHITschema_Request_TGetHITRequest_                                                                                                                                                                                     func(*XsdGoPkgHasElems_RequestsequenceTxsdGetHITGetHITschema_Request_TGetHITRequest_, bool) error
	XsdGoPkgHasElems_GrantQualificationResponse                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_GrantQualificationResponse, bool) error
	XsdGoPkgHasElem_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_                                                                                                                                      func(*XsdGoPkgHasElem_SortPropertysequenceGetQualificationRequestsRequestschema_SortProperty_TGetQualificationRequestsSortProperty_, bool) error
	XsdGoPkgHasElems_DisposeHIT                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_DisposeHIT, bool) error
	TxsdGetQualificationTypeResponse                                                                                                                                                                                                                                   func(*TxsdGetQualificationTypeResponse, bool) error
	XsdGoPkgHasElems_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_                                                                                                                                                                                 func(*XsdGoPkgHasElems_HITLayoutIdsequenceCreateHITRequestschema_HITLayoutId_XsdtString_, bool) error
	XsdGoPkgHasElem_ApproveAssignmentResponse                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_ApproveAssignmentResponse, bool) error
	XsdGoPkgHasElems_DisposeQualificationType                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_DisposeQualificationType, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_                                                                                         func(*XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_, bool) error
	XsdGoPkgHasElem_ApproveAssignmentResultsequenceApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_                                                                                                                                   func(*XsdGoPkgHasElem_ApproveAssignmentResultsequenceApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_, bool) error
	XsdGoPkgHasElem_AssignQualificationResultsequenceAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_                                                                                                                           func(*XsdGoPkgHasElem_AssignQualificationResultsequenceAssignQualificationResponseschema_AssignQualificationResult_TAssignQualificationResult_, bool) error
	XsdGoPkgHasElems_SubmitTimesequenceQualificationRequestschema_SubmitTime_XsdtDateTime_                                                                                                                                                                             func(*XsdGoPkgHasElems_SubmitTimesequenceQualificationRequestschema_SubmitTime_XsdtDateTime_, bool) error
	TxsdApproveAssignment                                                                                                                                                                                                                                              func(*TxsdApproveAssignment, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdBlockWorkerBlockWorkerschema_Request_TBlockWorkerRequest_                                                                                                                                                                      func(*XsdGoPkgHasElems_RequestsequenceTxsdBlockWorkerBlockWorkerschema_Request_TBlockWorkerRequest_, bool) error
	XsdGoPkgHasElems_DisableHITRequestsequenceRequestschema_DisableHITRequest_TDisableHITRequest_                                                                                                                                                                      func(*XsdGoPkgHasElems_DisableHITRequestsequenceRequestschema_DisableHITRequest_TDisableHITRequest_, bool) error
	XsdGoPkgHasElems_NumResultssequenceSearchQualificationTypesResultschema_NumResults_XsdtInt_                                                                                                                                                                        func(*XsdGoPkgHasElems_NumResultssequenceSearchQualificationTypesResultschema_NumResults_XsdtInt_, bool) error
	TSetHITTypeNotificationRequest                                                                                                                                                                                                                                     func(*TSetHITTypeNotificationRequest, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_                                                                                        func(*XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationsForQualificationTypeGetQualificationsForQualificationTypeschema_Request_TGetQualificationsForQualificationTypeRequest_, bool) error
	TxsdUnblockWorkerResponse                                                                                                                                                                                                                                          func(*TxsdUnblockWorkerResponse, bool) error
	XsdGoPkgHasElems_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_                                                                                                                                                                                     func(*XsdGoPkgHasElems_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_, bool) error
	TGetQualificationRequestsRequest                                                                                                                                                                                                                                   func(*TGetQualificationRequestsRequest, bool) error
	TGrantQualificationRequest                                                                                                                                                                                                                                         func(*TGrantQualificationRequest, bool) error
	XsdGoPkgHasElems_SetHITTypeNotification                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_SetHITTypeNotification, bool) error
	XsdGoPkgHasElem_HITsequenceGetAssignmentResultschema_Hit_Thit_                                                                                                                                                                                                     func(*XsdGoPkgHasElem_HITsequenceGetAssignmentResultschema_Hit_Thit_, bool) error
	XsdGoPkgHasElem_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_                                                                   func(*XsdGoPkgHasElem_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_, bool) error
	XsdGoPkgHasElems_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_                                                                                                                                                   func(*XsdGoPkgHasElems_SortPropertysequenceGetReviewableHITsRequestschema_SortProperty_TGetReviewableHITsSortProperty_, bool) error
	XsdGoPkgHasElem_RequestsequenceNotifyWorkersschema_Request_TNotifyWorkersRequest_                                                                                                                                                                                  func(*XsdGoPkgHasElem_RequestsequenceNotifyWorkersschema_Request_TNotifyWorkersRequest_, bool) error
	XsdGoPkgHasElems_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_                                                                                                                                                        func(*XsdGoPkgHasElems_DatasequenceTxsdErrorsSequenceErrorErrorsequenceTxsdErrorsErrorsschema_Data_TKeyValuePair_, bool) error
	XsdGoPkgHasElem_RegisterHITTypeResponse                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_RegisterHITTypeResponse, bool) error
	TxsdDisposeQualificationTypeResponse                                                                                                                                                                                                                               func(*TxsdDisposeQualificationTypeResponse, bool) error
	XsdGoPkgHasElems_Arguments                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_Arguments, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_                                                                                                                                                        func(*XsdGoPkgHasElem_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_                                                                                                                                           func(*XsdGoPkgHasElems_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_, bool) error
	XsdGoPkgHasElem_GetRequesterStatistic                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_GetRequesterStatistic, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdHelpHelpschema_Request_THelpRequest_                                                                                                                                                                                           func(*XsdGoPkgHasElems_RequestsequenceTxsdHelpHelpschema_Request_THelpRequest_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_                                                                                                                                               func(*XsdGoPkgHasElem_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_, bool) error
	XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_                                                                                                                                                                                      func(*XsdGoPkgHasElem_HITTypeIdsequenceCreateHITRequestschema_HITTypeId_XsdtString_, bool) error
	TDisableHITRequest                                                                                                                                                                                                                                                 func(*TDisableHITRequest, bool) error
	XsdGoPkgHasElems_QuestionsequenceHITschema_Question_XsdtString_                                                                                                                                                                                                    func(*XsdGoPkgHasElems_QuestionsequenceHITschema_Question_XsdtString_, bool) error
	TxsdUpdateQualificationTypeResponse                                                                                                                                                                                                                                func(*TxsdUpdateQualificationTypeResponse, bool) error
	TWorkerBlock                                                                                                                                                                                                                                                       func(*TWorkerBlock, bool) error
	XsdGoPkgHasElems_TotalNumResultssequenceGetBonusPaymentsResultschema_TotalNumResults_XsdtInt_                                                                                                                                                                      func(*XsdGoPkgHasElems_TotalNumResultssequenceGetBonusPaymentsResultschema_TotalNumResults_XsdtInt_, bool) error
	XsdGoPkgHasElem_OperationRequest                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_OperationRequest, bool) error
	XsdGoPkgHasElem_CreateHITResponse                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_CreateHITResponse, bool) error
	TNotificationSpecification                                                                                                                                                                                                                                         func(*TNotificationSpecification, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationRequestsGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_                                                                                                                               func(*XsdGoPkgHasElems_RequestsequenceTxsdGetQualificationRequestsGetQualificationRequestsschema_Request_TGetQualificationRequestsRequest_, bool) error
	TxsdGetAssignmentResponse                                                                                                                                                                                                                                          func(*TxsdGetAssignmentResponse, bool) error
	TxsdGetReviewableHITs                                                                                                                                                                                                                                              func(*TxsdGetReviewableHITs, bool) error
	XsdGoPkgHasElem_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_                                                                   func(*XsdGoPkgHasElem_DisposeQualificationTypeResultsequenceTxsdDisposeQualificationTypeResponseDisposeQualificationTypeResponseschema_DisposeQualificationTypeResult_TDisposeQualificationTypeResult_, bool) error
	XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_                                                                                                                                                      func(*XsdGoPkgHasElem_AutoApprovalDelayInSecondssequenceCreateHITRequestschema_AutoApprovalDelayInSeconds_XsdtLong_, bool) error
	XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_                                                                                                                                                                             func(*XsdGoPkgHasElems_ResponseGroupsequenceCreateHITRequestschema_ResponseGroup_XsdtString_, bool) error
	XsdGoPkgHasElem_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_                                                                                                                                                             func(*XsdGoPkgHasElem_QuestionIdentifiersequenceGetFileUploadURLRequestschema_QuestionIdentifier_XsdtString_, bool) error
	XsdGoPkgHasElem_GetAssignment                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_GetAssignment, bool) error
	XsdGoPkgHasElem_GetRequesterStatisticResponse                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_GetRequesterStatisticResponse, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_                                                                                                                                   func(*XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationTypeUpdateQualificationTypeschema_Request_TUpdateQualificationTypeRequest_, bool) error
	XsdGoPkgHasElem_SendTestEventNotificationResponse                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_SendTestEventNotificationResponse, bool) error
	TxsdGetQualificationsForQualificationTypeResponse                                                                                                                                                                                                                  func(*TxsdGetQualificationsForQualificationTypeResponse, bool) error
	XsdGoPkgHasElem_ExtendHITResponse                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_ExtendHITResponse, bool) error
	XsdGoPkgHasElem_CreateQualificationType                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_CreateQualificationType, bool) error
	XsdGoPkgHasElem_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_                                                                                                                                                                                  func(*XsdGoPkgHasElem_ActionNamesequenceReviewActionDetailschema_ActionName_XsdtString_, bool) error
	TxsdGetHITsForQualificationTypeResponse                                                                                                                                                                                                                            func(*TxsdGetHITsForQualificationTypeResponse, bool) error
	XsdGoPkgHasElems_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_                                                                                            func(*XsdGoPkgHasElems_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_, bool) error
	XsdGoPkgHasElem_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_                                                                                                                                                   func(*XsdGoPkgHasElem_NotifyWorkersRequestsequenceTxsdRequestRequestschema_NotifyWorkersRequest_TNotifyWorkersRequest_, bool) error
	XsdGoPkgHasElem_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_                                                                                                                  func(*XsdGoPkgHasElem_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_, bool) error
	XsdGoPkgHasElem_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_                                                                                                                                         func(*XsdGoPkgHasElem_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_, bool) error
	XsdGoPkgHasElem_CreateHIT                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_CreateHIT, bool) error
	TxsdOperationInformationSequenceRequiredParameters                                                                                                                                                                                                                 func(*TxsdOperationInformationSequenceRequiredParameters, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_                                                                                                                                func(*XsdGoPkgHasElem_RequestsequenceTxsdUpdateQualificationScoreUpdateQualificationScoreschema_Request_TUpdateQualificationScoreRequest_, bool) error
	XsdGoPkgHasElem_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_                                                                                                                                                             func(*XsdGoPkgHasElem_RequiredToPreviewsequenceQualificationRequirementschema_RequiredToPreview_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_ApproveRejectedAssignmentResponse                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_ApproveRejectedAssignmentResponse, bool) error
	XsdGoPkgHasElem_ChangeHITTypeOfHITResultsequenceChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_                                                                                                                               func(*XsdGoPkgHasElem_ChangeHITTypeOfHITResultsequenceChangeHITTypeOfHITResponseschema_ChangeHITTypeOfHITResult_TChangeHITTypeOfHITResult_, bool) error
	XsdGoPkgHasElem_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_                                                                                                                                func(*XsdGoPkgHasElem_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_, bool) error
	XsdGoPkgHasElem_ForceExpireHITRequestsequenceTxsdRequestRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_                                                                                                                                                func(*XsdGoPkgHasElem_ForceExpireHITRequestsequenceTxsdRequestRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_, bool) error
	TGetQualificationScoreRequest                                                                                                                                                                                                                                      func(*TGetQualificationScoreRequest, bool) error
	XsdGoPkgHasElem_DisableHITResponse                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_DisableHITResponse, bool) error
	TSearchQualificationTypesResult                                                                                                                                                                                                                                    func(*TSearchQualificationTypesResult, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetAccountBalanceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_                                                                                                                                                    func(*XsdGoPkgHasElems_RequestsequenceTxsdGetAccountBalanceGetAccountBalanceschema_Request_TGetAccountBalanceRequest_, bool) error
	XsdGoPkgHasElems_GetHITsForQualificationTypeRequestsequenceRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_                                                                                                                   func(*XsdGoPkgHasElems_GetHITsForQualificationTypeRequestsequenceRequestschema_GetHITsForQualificationTypeRequest_TGetHITsForQualificationTypeRequest_, bool) error
	XsdGoPkgHasElems_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_                                                                                                     func(*XsdGoPkgHasElems_SetHITAsReviewingResultsequenceTxsdSetHITAsReviewingResponseSetHITAsReviewingResponseschema_SetHITAsReviewingResult_TSetHITAsReviewingResult_, bool) error
	XsdGoPkgHasElem_RejectAssignmentResponse                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_RejectAssignmentResponse, bool) error
	XsdGoPkgHasElem_GetBonusPaymentsResponse                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_GetBonusPaymentsResponse, bool) error
	TxsdUpdateQualificationScore                                                                                                                                                                                                                                       func(*TxsdUpdateQualificationScore, bool) error
	TxsdGetQualificationScore                                                                                                                                                                                                                                          func(*TxsdGetQualificationScore, bool) error
	XsdGoPkgHasElem_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_                                                                                             func(*XsdGoPkgHasElem_ValidOperationssequenceTxsdResponseGroupInformationResponseGroupInformationschema_ValidOperations_TxsdResponseGroupInformationSequenceValidOperations_, bool) error
	XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_                                                                                                                                        func(*XsdGoPkgHasElems_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_, bool) error
	XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_                                                                                                                                                                      func(*XsdGoPkgHasElem_WorkerIdsequenceGetRequesterWorkerStatisticRequestschema_WorkerId_XsdtString_, bool) error
	XsdGoPkgHasElem_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_                                                                                                                                                                                   func(*XsdGoPkgHasElem_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_                                                                                                                                      func(*XsdGoPkgHasElems_QualificationRequestsequenceGetQualificationRequestsResultschema_QualificationRequest_TQualificationRequest_, bool) error
	XsdGoPkgHasElems_TestDurationInSecondssequenceQualificationTypeschema_TestDurationInSeconds_XsdtLong_                                                                                                                                                              func(*XsdGoPkgHasElems_TestDurationInSecondssequenceQualificationTypeschema_TestDurationInSeconds_XsdtLong_, bool) error
	XsdGoPkgHasElem_CreateHITRequestsequenceTxsdRequestRequestschema_CreateHITRequest_TCreateHITRequest_                                                                                                                                                               func(*XsdGoPkgHasElem_CreateHITRequestsequenceTxsdRequestRequestschema_CreateHITRequest_TCreateHITRequest_, bool) error
	TxsdGrantBonus                                                                                                                                                                                                                                                     func(*TxsdGrantBonus, bool) error
	XsdGoPkgHasElem_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_                                                                                                                                        func(*XsdGoPkgHasElem_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_, bool) error
	XsdGoPkgHasElems_Information                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_Information, bool) error
	XsdGoPkgHasElem_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_                                                                                                                                                                                            func(*XsdGoPkgHasElem_DeadlinesequenceAssignmentschema_Deadline_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_                                                                                                                                                                        func(*XsdGoPkgHasElems_WorkerBlocksequenceGetBlockedWorkersResultschema_WorkerBlock_TWorkerBlock_, bool) error
	XsdGoPkgHasElems_RequesterFeedbacksequenceRejectAssignmentRequestschema_RequesterFeedback_XsdtString_                                                                                                                                                              func(*XsdGoPkgHasElems_RequesterFeedbacksequenceRejectAssignmentRequestschema_RequesterFeedback_XsdtString_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_                                                                                                                                                     func(*XsdGoPkgHasElem_RequestsequenceTxsdGetReviewableHITsGetReviewableHITsschema_Request_TGetReviewableHITsRequest_, bool) error
	XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_                                                                                                                                                                    func(*XsdGoPkgHasElem_UniqueRequestTokensequenceCreateHITRequestschema_UniqueRequestToken_XsdtString_, bool) error
	XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_                                                                                                                                                                       func(*XsdGoPkgHasElem_HITReviewPolicysequenceCreateHITRequestschema_HITReviewPolicy_TReviewPolicy_, bool) error
	XsdGoPkgHasElems_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_                                                                                                                                        func(*XsdGoPkgHasElems_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_, bool) error
	TDisableHITResult                                                                                                                                                                                                                                                  func(*TDisableHITResult, bool) error
	XsdGoPkgHasElem_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_                                                              func(*XsdGoPkgHasElem_ApproveRejectedAssignmentResultsequenceTxsdApproveRejectedAssignmentResponseApproveRejectedAssignmentResponseschema_ApproveRejectedAssignmentResult_TApproveRejectedAssignmentResult_, bool) error
	XsdGoPkgHasElems_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_                                                                                                                                                                                   func(*XsdGoPkgHasElems_ApprovalTimesequenceAssignmentschema_ApprovalTime_XsdtDateTime_, bool) error
	XsdGoPkgHasElems_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_                                                                                                                                        func(*XsdGoPkgHasElems_SearchHITsResultsequenceTxsdSearchHITsResponseSearchHITsResponseschema_SearchHITsResult_TSearchHITsResult_, bool) error
	XsdGoPkgHasElems_AssignQualification                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_AssignQualification, bool) error
	XsdGoPkgHasElems_PageNumbersequenceGetQualificationsForQualificationTypeRequestschema_PageNumber_XsdtInt_                                                                                                                                                          func(*XsdGoPkgHasElems_PageNumbersequenceGetQualificationsForQualificationTypeRequestschema_PageNumber_XsdtInt_, bool) error
	XsdGoPkgHasElem_RequestsequenceHelpschema_Request_THelpRequest_                                                                                                                                                                                                    func(*XsdGoPkgHasElem_RequestsequenceHelpschema_Request_THelpRequest_, bool) error
	XsdGoPkgHasElem_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_                                                                                                                                                                                        func(*XsdGoPkgHasElem_IsValidsequenceTxsdRequestRequestschema_IsValid_XsdtString_, bool) error
	XsdGoPkgHasElem_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_                                                                                                                                                             func(*XsdGoPkgHasElem_MaxAssignmentsIncrementsequenceExtendHITRequestschema_MaxAssignmentsIncrement_XsdtInt_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdRegisterHITTypeRegisterHITTypeschema_Request_TRegisterHITTypeRequest_                                                                                                                                                          func(*XsdGoPkgHasElems_RequestsequenceTxsdRegisterHITTypeRegisterHITTypeschema_Request_TRegisterHITTypeRequest_, bool) error
	TxsdDisableHIT                                                                                                                                                                                                                                                     func(*TxsdDisableHIT, bool) error
	XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_                                                                                                                                                                                            func(*XsdGoPkgHasElem_ValuesequenceHITLayoutParameterschema_Value_XsdtString_, bool) error
	XsdGoPkgHasElem_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_                                                                                                            func(*XsdGoPkgHasElem_RejectQualificationRequestRequestsequenceTxsdRequestRequestschema_RejectQualificationRequestRequest_TRejectQualificationRequestRequest_, bool) error
	XsdGoPkgHasElem_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_                                                                                                                                             func(*XsdGoPkgHasElem_AssignmentReviewReportsequenceGetReviewResultsForHITResultschema_AssignmentReviewReport_TReviewReport_, bool) error
	XsdGoPkgHasElems_ResultsequenceReviewActionDetailschema_Result_XsdtString_                                                                                                                                                                                         func(*XsdGoPkgHasElems_ResultsequenceReviewActionDetailschema_Result_XsdtString_, bool) error
	XsdGoPkgHasElems_GetFileUploadURLRequestsequenceRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_                                                                                                                                                    func(*XsdGoPkgHasElems_GetFileUploadURLRequestsequenceRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_, bool) error
	TPolicyParameter                                                                                                                                                                                                                                                   func(*TPolicyParameter, bool) error
	XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_                                                                                                                                                      func(*XsdGoPkgHasElem_RetryDelayInSecondssequenceCreateQualificationTypeRequestschema_RetryDelayInSeconds_XsdtLong_, bool) error
	XsdGoPkgHasElems_ApproveAssignmentResultsequenceTxsdApproveAssignmentResponseApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_                                                                                                     func(*XsdGoPkgHasElems_ApproveAssignmentResultsequenceTxsdApproveAssignmentResponseApproveAssignmentResponseschema_ApproveAssignmentResult_TApproveAssignmentResult_, bool) error
	XsdGoPkgHasElems_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_                                                                                                                                                                       func(*XsdGoPkgHasElems_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_, bool) error
	XsdGoPkgHasElem_GetFileUploadURLRequestsequenceTxsdRequestRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_                                                                                                                                          func(*XsdGoPkgHasElem_GetFileUploadURLRequestsequenceTxsdRequestRequestschema_GetFileUploadURLRequest_TGetFileUploadURLRequest_, bool) error
	XsdGoPkgHasElems_GetQualificationScoreResponse                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_GetQualificationScoreResponse, bool) error
	XsdGoPkgHasElem_RequestsequenceBlockWorkerschema_Request_TBlockWorkerRequest_                                                                                                                                                                                      func(*XsdGoPkgHasElem_RequestsequenceBlockWorkerschema_Request_TBlockWorkerRequest_, bool) error
	XsdGoPkgHasElems_BlockWorkerResponse                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_BlockWorkerResponse, bool) error
	TxsdUnblockWorker                                                                                                                                                                                                                                                  func(*TxsdUnblockWorker, bool) error
	XsdGoPkgHasElems_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_                                                                                                                                     func(*XsdGoPkgHasElems_SortPropertysequenceSearchQualificationTypesRequestschema_SortProperty_TSearchQualificationTypesSortProperty_, bool) error
	TxsdForceExpireHIT                                                                                                                                                                                                                                                 func(*TxsdForceExpireHIT, bool) error
	TxsdCreateQualificationType                                                                                                                                                                                                                                        func(*TxsdCreateQualificationType, bool) error
	XsdGoPkgHasElem_RejectQualificationRequest                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_RejectQualificationRequest, bool) error
	TxsdGetQualificationType                                                                                                                                                                                                                                           func(*TxsdGetQualificationType, bool) error
	XsdGoPkgHasElems_DisposeQualificationTypeResponse                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_DisposeQualificationTypeResponse, bool) error
	TGrantQualificationResult                                                                                                                                                                                                                                          func(*TGrantQualificationResult, bool) error
	XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_                                                                                                                                                                         func(*XsdGoPkgHasElem_AssignmentIdsequenceGetBonusPaymentsRequestschema_AssignmentId_XsdtString_, bool) error
	XsdGoPkgHasElems_GetQualificationsForQualificationType                                                                                                                                                                                                             func(*XsdGoPkgHasElems_GetQualificationsForQualificationType, bool) error
	XsdGoPkgHasElems_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_                                                                                                                                        func(*XsdGoPkgHasElems_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_                                                                                                                                  func(*XsdGoPkgHasElems_RequestsequenceTxsdCreateQualificationTypeCreateQualificationTypeschema_Request_TCreateQualificationTypeRequest_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_                                                                                                                                                                          func(*XsdGoPkgHasElem_RequestsequenceTxsdDisposeHITDisposeHITschema_Request_TDisposeHITRequest_, bool) error
	XsdGoPkgHasElems_AssignQualificationRequestsequenceRequestschema_AssignQualificationRequest_TAssignQualificationRequest_                                                                                                                                           func(*XsdGoPkgHasElems_AssignQualificationRequestsequenceRequestschema_AssignQualificationRequest_TAssignQualificationRequest_, bool) error
	XsdGoPkgHasElems_ForceExpireHITRequestsequenceRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_                                                                                                                                                          func(*XsdGoPkgHasElems_ForceExpireHITRequestsequenceRequestschema_ForceExpireHITRequest_TForceExpireHITRequest_, bool) error
	XsdGoPkgHasElems_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_                                                                                                                                       func(*XsdGoPkgHasElems_NotifyWorkersFailureMessagesequenceNotifyWorkersFailureStatusschema_NotifyWorkersFailureMessage_XsdtString_, bool) error
	TxsdErrors                                                                                                                                                                                                                                                         func(*TxsdErrors, bool) error
	XsdGoPkgHasElem_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_                                                                                                                           func(*XsdGoPkgHasElem_GetRequesterStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterStatisticRequest_TGetRequesterStatisticRequest_, bool) error
	TReviewResultDetail                                                                                                                                                                                                                                                func(*TReviewResultDetail, bool) error
	XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_                                                                                                           func(*XsdGoPkgHasElems_QualificationTypesequenceTxsdCreateQualificationTypeResponseCreateQualificationTypeResponseschema_QualificationType_TQualificationType_, bool) error
	TDisposeQualificationTypeRequest                                                                                                                                                                                                                                   func(*TDisposeQualificationTypeRequest, bool) error
	TxsdGetHIT                                                                                                                                                                                                                                                         func(*TxsdGetHIT, bool) error
	TGrantBonusResult                                                                                                                                                                                                                                                  func(*TGrantBonusResult, bool) error
	XsdGoPkgHasElem_GetAssignmentResultsequenceGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_                                                                                                                                                   func(*XsdGoPkgHasElem_GetAssignmentResultsequenceGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_, bool) error
	TGetBlockedWorkersRequest                                                                                                                                                                                                                                          func(*TGetBlockedWorkersRequest, bool) error
	XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_                                                                                                                                                                      func(*XsdGoPkgHasElem_TotalNumResultssequenceGetReviewableHITsResultschema_TotalNumResults_XsdtInt_, bool) error
	XsdGoPkgHasElems_GetQualificationType                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_GetQualificationType, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterWorkerStatisticGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_                                                                                                                      func(*XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterWorkerStatisticGetRequesterWorkerStatisticschema_Request_TGetRequesterWorkerStatisticRequest_, bool) error
	XsdGoPkgHasElem_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_                                                                                                                                                                                            func(*XsdGoPkgHasElem_SubdivisionsequenceLocaleschema_Subdivision_XsdtString_, bool) error
	XsdGoPkgHasElem_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_                                                                                                                                                                    func(*XsdGoPkgHasElem_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_, bool) error
	XsdGoPkgHasElems_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_                                                                                                                                      func(*XsdGoPkgHasElems_GetBlockedWorkersRequestsequenceTxsdRequestRequestschema_GetBlockedWorkersRequest_TGetBlockedWorkersRequest_, bool) error
	XsdGoPkgHasElem_CreateQualificationTypeRequestsequenceTxsdRequestRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_                                                                                                                     func(*XsdGoPkgHasElem_CreateQualificationTypeRequestsequenceTxsdRequestRequestschema_CreateQualificationTypeRequest_TCreateQualificationTypeRequest_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdChangeHITTypeOfHITChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_                                                                                                                                                 func(*XsdGoPkgHasElems_RequestsequenceTxsdChangeHITTypeOfHITChangeHITTypeOfHITschema_Request_TChangeHITTypeOfHITRequest_, bool) error
	XsdGoPkgHasElem_DisposeQualificationType                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_DisposeQualificationType, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterStatisticGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_                                                                                                                                        func(*XsdGoPkgHasElems_RequestsequenceTxsdGetRequesterStatisticGetRequesterStatisticschema_Request_TGetRequesterStatisticRequest_, bool) error
	XsdGoPkgHasElems_AboutsequenceHelpRequestschema_About_XsdtString_                                                                                                                                                                                                  func(*XsdGoPkgHasElems_AboutsequenceHelpRequestschema_About_XsdtString_, bool) error
	XsdGoPkgHasElem_GetReviewResultsForHIT                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_GetReviewResultsForHIT, bool) error
	TxsdGetFileUploadURL                                                                                                                                                                                                                                               func(*TxsdGetFileUploadURL, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetBonusPaymentsGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_                                                                                                                                                       func(*XsdGoPkgHasElems_RequestsequenceTxsdGetBonusPaymentsGetBonusPaymentsschema_Request_TGetBonusPaymentsRequest_, bool) error
	XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_                                                                                                                                                                              func(*XsdGoPkgHasElem_CredentialsequenceTxsdCreateHITCreateHITschema_Credential_XsdtString_, bool) error
	TxsdGrantQualification                                                                                                                                                                                                                                             func(*TxsdGrantQualification, bool) error
	XsdGoPkgHasElems_GrantQualificationRequestsequenceRequestschema_GrantQualificationRequest_TGrantQualificationRequest_                                                                                                                                              func(*XsdGoPkgHasElems_GrantQualificationRequestsequenceRequestschema_GrantQualificationRequest_TGrantQualificationRequest_, bool) error
	XsdGoPkgHasElem_GrantQualificationResponse                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_GrantQualificationResponse, bool) error
	TxsdRevokeQualificationResponse                                                                                                                                                                                                                                    func(*TxsdRevokeQualificationResponse, bool) error
	XsdGoPkgHasElems_GetRequesterStatisticResponse                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_GetRequesterStatisticResponse, bool) error
	XsdGoPkgHasElem_ForceExpireHIT                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_ForceExpireHIT, bool) error
	XsdGoPkgHasElems_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_                                                                                                     func(*XsdGoPkgHasElems_GetBlockedWorkersResultsequenceTxsdGetBlockedWorkersResponseGetBlockedWorkersResponseschema_GetBlockedWorkersResult_TGetBlockedWorkersResult_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_                                                                                                                                            func(*XsdGoPkgHasElem_RequestsequenceTxsdGetAssignmentsForHITGetAssignmentsForHITschema_Request_TGetAssignmentsForHITRequest_, bool) error
	XsdGoPkgHasElem_BodysequenceClaimschema_Body_XsdtString_                                                                                                                                                                                                           func(*XsdGoPkgHasElem_BodysequenceClaimschema_Body_XsdtString_, bool) error
	TRegisterHITTypeResult                                                                                                                                                                                                                                             func(*TRegisterHITTypeResult, bool) error
	TGetQualificationsForQualificationTypeResult                                                                                                                                                                                                                       func(*TGetQualificationsForQualificationTypeResult, bool) error
	XsdGoPkgHasElem_GetHITResponse                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_GetHITResponse, bool) error
	XsdGoPkgHasElems_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_                                                                                                                                                                  func(*XsdGoPkgHasElems_AutoGrantedsequenceCreateQualificationTypeRequestschema_AutoGranted_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_                                                                                                                                func(*XsdGoPkgHasElem_RequestsequenceTxsdDisposeQualificationTypeDisposeQualificationTypeschema_Request_TDisposeQualificationTypeRequest_, bool) error
	XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_                                                                                                                                                                        func(*XsdGoPkgHasElem_AnswerKeysequenceCreateQualificationTypeRequestschema_AnswerKey_XsdtString_, bool) error
	XsdGoPkgHasElem_RequestsequenceRegisterHITTypeschema_Request_TRegisterHITTypeRequest_                                                                                                                                                                              func(*XsdGoPkgHasElem_RequestsequenceRegisterHITTypeschema_Request_TRegisterHITTypeRequest_, bool) error
	XsdGoPkgHasElem_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_                                                                                                                  func(*XsdGoPkgHasElem_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_, bool) error
	XsdGoPkgHasElem_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_                                                                                                                                                               func(*XsdGoPkgHasElem_ArgumentsequenceTxsdArgumentsArgumentsschema_Argument_TxsdArgumentsSequenceArgument_, bool) error
	XsdGoPkgHasElems_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_                                                                                                                                                                func(*XsdGoPkgHasElems_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdNotifyWorkersNotifyWorkersschema_Request_TNotifyWorkersRequest_                                                                                                                                                                func(*XsdGoPkgHasElems_RequestsequenceTxsdNotifyWorkersNotifyWorkersschema_Request_TNotifyWorkersRequest_, bool) error
	XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_                                                                                                                                                                                                func(*XsdGoPkgHasElem_RewardsequenceCreateHITRequestschema_Reward_TPrice_, bool) error
	XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_                                                                                                                                                                  func(*XsdGoPkgHasElem_RequesterAnnotationsequenceCreateHITRequestschema_RequesterAnnotation_XsdtString_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_                                                                                                                                                       func(*XsdGoPkgHasElems_RequestsequenceTxsdGetFileUploadURLGetFileUploadURLschema_Request_TGetFileUploadURLRequest_, bool) error
	XsdGoPkgHasElems_CreateQualificationType                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_CreateQualificationType, bool) error
	XsdGoPkgHasElems_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_                                                                                                                                                                           func(*XsdGoPkgHasElems_AutoApprovalTimesequenceAssignmentschema_AutoApprovalTime_XsdtDateTime_, bool) error
	XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_                                                                                                                                                                                  func(*XsdGoPkgHasElem_DescriptionsequenceCreateHITRequestschema_Description_XsdtString_, bool) error
	XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_                                                                                                                                                                                      func(*XsdGoPkgHasElem_ActionIdsequenceReviewResultDetailschema_ActionId_XsdtString_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_                                                                                                                                              func(*XsdGoPkgHasElems_RequestsequenceTxsdRevokeQualificationRevokeQualificationschema_Request_TRevokeQualificationRequest_, bool) error
	XsdGoPkgHasElem_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_                                                                                       func(*XsdGoPkgHasElem_GetAssignmentsForHITResultsequenceTxsdGetAssignmentsForHITResponseGetAssignmentsForHITResponseschema_GetAssignmentsForHITResult_TGetAssignmentsForHITResult_, bool) error
	TBlockWorkerRequest                                                                                                                                                                                                                                                func(*TBlockWorkerRequest, bool) error
	XsdGoPkgHasElem_GetHITsForQualificationType                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_GetHITsForQualificationType, bool) error
	XsdGoPkgHasElems_GetQualificationsForQualificationTypeResultsequenceTxsdGetQualificationsForQualificationTypeResponseGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_ func(*XsdGoPkgHasElems_GetQualificationsForQualificationTypeResultsequenceTxsdGetQualificationsForQualificationTypeResponseGetQualificationsForQualificationTypeResponseschema_GetQualificationsForQualificationTypeResult_TGetQualificationsForQualificationTypeResult_, bool) error
	XsdGoPkgHasElem_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_                                                                                                                                                                             func(*XsdGoPkgHasElem_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_, bool) error
	XsdGoPkgHasElem_UpdateQualificationType                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_UpdateQualificationType, bool) error
	XsdGoPkgHasElem_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_                                                                                                                  func(*XsdGoPkgHasElem_ElementssequenceTxsdResponseGroupInformationResponseGroupInformationschema_Elements_TxsdResponseGroupInformationSequenceElements_, bool) error
	XsdGoPkgHasElem_GetFileUploadURLResponse                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_GetFileUploadURLResponse, bool) error
	XsdGoPkgHasElem_ChangeHITTypeOfHITResponse                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_ChangeHITTypeOfHITResponse, bool) error
	XsdGoPkgHasElems_AssignmentIdsequenceRejectAssignmentRequestschema_AssignmentId_XsdtString_                                                                                                                                                                        func(*XsdGoPkgHasElems_AssignmentIdsequenceRejectAssignmentRequestschema_AssignmentId_XsdtString_, bool) error
	XsdGoPkgHasElems_RequestIdsequenceOperationRequestschema_RequestId_XsdtString_                                                                                                                                                                                     func(*XsdGoPkgHasElems_RequestIdsequenceOperationRequestschema_RequestId_XsdtString_, bool) error
	XsdGoPkgHasElems_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_                                                                                                                                                                            func(*XsdGoPkgHasElems_EventTypesequenceNotificationSpecificationschema_EventType_TEventType_, bool) error
	TSetHITAsReviewingResult                                                                                                                                                                                                                                           func(*TSetHITAsReviewingResult, bool) error
	TxsdGetQualificationRequests                                                                                                                                                                                                                                       func(*TxsdGetQualificationRequests, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGrantQualificationGrantQualificationschema_Request_TGrantQualificationRequest_                                                                                                                                                 func(*XsdGoPkgHasElems_RequestsequenceTxsdGrantQualificationGrantQualificationschema_Request_TGrantQualificationRequest_, bool) error
	XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_                                                                                                                                                                                     func(*XsdGoPkgHasElem_CountsequenceGetRequesterStatisticRequestschema_Count_XsdtInt_, bool) error
	TxsdRejectQualificationRequestResponse                                                                                                                                                                                                                             func(*TxsdRejectQualificationRequestResponse, bool) error
	XsdGoPkgHasElem_AssignQualification                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_AssignQualification, bool) error
	XsdGoPkgHasElem_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_                                                                             func(*XsdGoPkgHasElem_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_, bool) error
	XsdGoPkgHasElem_SearchHITsRequestsequenceTxsdRequestRequestschema_SearchHITsRequest_TSearchHITsRequest_                                                                                                                                                            func(*XsdGoPkgHasElem_SearchHITsRequestsequenceTxsdRequestRequestschema_SearchHITsRequest_TSearchHITsRequest_, bool) error
	TGetAssignmentsForHITResult                                                                                                                                                                                                                                        func(*TGetAssignmentsForHITResult, bool) error
	XsdGoPkgHasElems_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_                                                                                                                                                                                 func(*XsdGoPkgHasElems_ObjectTypesequenceReviewActionDetailschema_ObjectType_XsdtString_, bool) error
	XsdGoPkgHasElem_GetQualificationType                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_GetQualificationType, bool) error
	XsdGoPkgHasElems_GetBlockedWorkersResponse                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_GetBlockedWorkersResponse, bool) error
	XsdGoPkgHasElem_NotifyWorkersResultsequenceNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_                                                                                                                                                   func(*XsdGoPkgHasElem_NotifyWorkersResultsequenceNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_, bool) error
	TGetReviewableHITsRequest                                                                                                                                                                                                                                          func(*TGetReviewableHITsRequest, bool) error
	TGetBonusPaymentsRequest                                                                                                                                                                                                                                           func(*TGetBonusPaymentsRequest, bool) error
	TQualification                                                                                                                                                                                                                                                     func(*TQualification, bool) error
	XsdGoPkgHasElems_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_                                                                                           func(*XsdGoPkgHasElems_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_, bool) error
	XsdGoPkgHasElems_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_                                                                                                                                                                                func(*XsdGoPkgHasElems_MapEntrysequencePolicyParameterschema_MapEntry_TParameterMapEntry_, bool) error
	TKeyValuePair                                                                                                                                                                                                                                                      func(*TKeyValuePair, bool) error
	XsdGoPkgHasElems_ForceExpireHIT                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_ForceExpireHIT, bool) error
	TxsdGetAssignmentsForHITResponse                                                                                                                                                                                                                                   func(*TxsdGetAssignmentsForHITResponse, bool) error
	XsdGoPkgHasElems_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_                                                                                                                                                                             func(*XsdGoPkgHasElems_HelpRequestsequenceTxsdRequestRequestschema_HelpRequest_THelpRequest_, bool) error
	TGetFileUploadURLRequest                                                                                                                                                                                                                                           func(*TGetFileUploadURLRequest, bool) error
	XsdGoPkgHasElems_RegisterHITTypeResponse                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_RegisterHITTypeResponse, bool) error
	TSetHITTypeNotificationResult                                                                                                                                                                                                                                      func(*TSetHITTypeNotificationResult, bool) error
	TxsdGetRequesterStatisticResponse                                                                                                                                                                                                                                  func(*TxsdGetRequesterStatisticResponse, bool) error
	XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_                                                                                                                                                             func(*XsdGoPkgHasElem_AutoGrantedValuesequenceCreateQualificationTypeRequestschema_AutoGrantedValue_XsdtInt_, bool) error
	XsdGoPkgHasElem_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_                                                                                                                                                                 func(*XsdGoPkgHasElem_TransportsequenceNotificationSpecificationschema_Transport_TNotificationTransport_, bool) error
	XsdGoPkgHasElem_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_                                                                                                                                                           func(*XsdGoPkgHasElem_HITReviewReportsequenceGetReviewResultsForHITResultschema_HITReviewReport_TReviewReport_, bool) error
	XsdGoPkgHasElems_CredentialsequenceBlockWorkerschema_Credential_XsdtString_                                                                                                                                                                                        func(*XsdGoPkgHasElems_CredentialsequenceBlockWorkerschema_Credential_XsdtString_, bool) error
	XsdGoPkgHasElem_DisableHIT                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_DisableHIT, bool) error
	XsdGoPkgHasElems_GetRequesterWorkerStatistic                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_GetRequesterWorkerStatistic, bool) error
	XsdGoPkgHasElem_BlockWorkerResultsequenceBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_                                                                                                                                                           func(*XsdGoPkgHasElem_BlockWorkerResultsequenceBlockWorkerResponseschema_BlockWorkerResult_TBlockWorkerResult_, bool) error
	XsdGoPkgHasElems_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_                                                                                                                                                           func(*XsdGoPkgHasElems_GrantBonusRequestsequenceTxsdRequestRequestschema_GrantBonusRequest_TGrantBonusRequest_, bool) error
	XsdGoPkgHasElem_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_                                                                                                                                              func(*XsdGoPkgHasElem_ExtendHITResultsequenceTxsdExtendHITResponseExtendHITResponseschema_ExtendHITResult_TExtendHITResult_, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_                                                                                                                                                    func(*XsdGoPkgHasElems_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_, bool) error
	XsdGoPkgHasElems_GetBonusPaymentsResultsequenceTxsdGetBonusPaymentsResponseGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_                                                                                                          func(*XsdGoPkgHasElems_GetBonusPaymentsResultsequenceTxsdGetBonusPaymentsResponseGetBonusPaymentsResponseschema_GetBonusPaymentsResult_TGetBonusPaymentsResult_, bool) error
	TxsdGetRequesterWorkerStatistic                                                                                                                                                                                                                                    func(*TxsdGetRequesterWorkerStatistic, bool) error
	XsdGoPkgHasElem_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_                                                                                                                                         func(*XsdGoPkgHasElem_GrantBonusResultsequenceTxsdGrantBonusResponseGrantBonusResponseschema_GrantBonusResult_TGrantBonusResult_, bool) error
	XsdGoPkgHasElems_GetAssignmentResultsequenceTxsdGetAssignmentResponseGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_                                                                                                                         func(*XsdGoPkgHasElems_GetAssignmentResultsequenceTxsdGetAssignmentResponseGetAssignmentResponseschema_GetAssignmentResult_TGetAssignmentResult_, bool) error
	XsdGoPkgHasElems_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_                                                                                                                                                                          func(*XsdGoPkgHasElems_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_, bool) error
	TAssignQualificationResult                                                                                                                                                                                                                                         func(*TAssignQualificationResult, bool) error
	XsdGoPkgHasElem_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_                                                                                            func(*XsdGoPkgHasElem_RevokeQualificationResultsequenceTxsdRevokeQualificationResponseRevokeQualificationResponseschema_RevokeQualificationResult_TRevokeQualificationResult_, bool) error
	XsdGoPkgHasElem_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_                                                                                                                                                                            func(*XsdGoPkgHasElem_CompleteTimesequenceReviewActionDetailschema_CompleteTime_XsdtDateTime_, bool) error
	TQualificationRequest                                                                                                                                                                                                                                              func(*TQualificationRequest, bool) error
	XsdGoPkgHasElem_Information                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_Information, bool) error
	XsdGoPkgHasElem_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_                                                                                                                                                                           func(*XsdGoPkgHasElem_ReviewResultsequenceReviewReportschema_ReviewResult_TReviewResultDetail_, bool) error
	XsdGoPkgHasElem_ApproveAssignmentRequestsequenceTxsdRequestRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_                                                                                                                                       func(*XsdGoPkgHasElem_ApproveAssignmentRequestsequenceTxsdRequestRequestschema_ApproveAssignmentRequest_TApproveAssignmentRequest_, bool) error
	TCreateQualificationTypeRequest                                                                                                                                                                                                                                    func(*TCreateQualificationTypeRequest, bool) error
	XsdGoPkgHasElems_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_                                                                                                                 func(*XsdGoPkgHasElems_DisposeQualificationTypeRequestsequenceTxsdRequestRequestschema_DisposeQualificationTypeRequest_TDisposeQualificationTypeRequest_, bool) error
	XsdGoPkgHasElem_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_                                                                                                                                                            func(*XsdGoPkgHasElem_DisposeHITRequestsequenceTxsdRequestRequestschema_DisposeHITRequest_TDisposeHITRequest_, bool) error
	XsdGoPkgHasElem_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_                                                                                                                                                               func(*XsdGoPkgHasElem_ExtendHITRequestsequenceTxsdRequestRequestschema_ExtendHITRequest_TExtendHITRequest_, bool) error
	XsdGoPkgHasElems_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_                                                                            func(*XsdGoPkgHasElems_SetHITTypeNotificationResultsequenceTxsdSetHITTypeNotificationResponseSetHITTypeNotificationResponseschema_SetHITTypeNotificationResult_TSetHITTypeNotificationResult_, bool) error
	TxsdResponseGroupInformation                                                                                                                                                                                                                                       func(*TxsdResponseGroupInformation, bool) error
	TApproveAssignmentRequest                                                                                                                                                                                                                                          func(*TApproveAssignmentRequest, bool) error
	XsdGoPkgHasElem_GetReviewableHITs                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_GetReviewableHITs, bool) error
	XsdGoPkgHasElems_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_                                                                                                                                                                       func(*XsdGoPkgHasElems_GetHITRequestsequenceTxsdRequestRequestschema_GetHITRequest_TGetHITRequest_, bool) error
	XsdGoPkgHasElem_GetQualificationScoreResponse                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_GetQualificationScoreResponse, bool) error
	XsdGoPkgHasElem_RequestsequenceApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_                                                                                                                                                          func(*XsdGoPkgHasElem_RequestsequenceApproveRejectedAssignmentschema_Request_TApproveRejectedAssignmentRequest_, bool) error
	XsdGoPkgHasElems_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_                                                                                                                                                           func(*XsdGoPkgHasElems_RetrieveResultssequenceGetReviewResultsForHITRequestschema_RetrieveResults_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_                                                                                                                                                                       func(*XsdGoPkgHasElems_FileUploadURLsequenceGetFileUploadURLResultschema_FileUploadURL_XsdtString_, bool) error
	XsdGoPkgHasElem_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_                                                                                                                                         func(*XsdGoPkgHasElem_DisposeHITResultsequenceTxsdDisposeHITResponseDisposeHITResponseschema_DisposeHITResult_TDisposeHITResult_, bool) error
	XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_                                                                                                                                                    func(*XsdGoPkgHasElem_AssignmentDurationInSecondssequenceCreateHITRequestschema_AssignmentDurationInSeconds_XsdtLong_, bool) error
	TGetQualificationsForQualificationTypeRequest                                                                                                                                                                                                                      func(*TGetQualificationsForQualificationTypeRequest, bool) error
	XsdGoPkgHasElems_NotifyWorkersResponse                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_NotifyWorkersResponse, bool) error
	XsdGoPkgHasElem_RequestsequenceGrantQualificationschema_Request_TGrantQualificationRequest_                                                                                                                                                                        func(*XsdGoPkgHasElem_RequestsequenceGrantQualificationschema_Request_TGrantQualificationRequest_, bool) error
	XsdGoPkgHasElems_SearchQualificationTypesResponse                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_SearchQualificationTypesResponse, bool) error
	XsdGoPkgHasElems_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_                                                                                                                                                                    func(*XsdGoPkgHasElems_AvailableBalancesequenceGetAccountBalanceResultschema_AvailableBalance_TPrice_, bool) error
	XsdGoPkgHasElems_OperationRequest                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_OperationRequest, bool) error
	XsdGoPkgHasElem_DisableHITRequestsequenceTxsdRequestRequestschema_DisableHITRequest_TDisableHITRequest_                                                                                                                                                            func(*XsdGoPkgHasElem_DisableHITRequestsequenceTxsdRequestRequestschema_DisableHITRequest_TDisableHITRequest_, bool) error
	TxsdHTTPHeadersSequenceHeader                                                                                                                                                                                                                                      func(*TxsdHTTPHeadersSequenceHeader, bool) error
	XsdGoPkgHasElem_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_                                                                                                                                                                                func(*XsdGoPkgHasElem_SubjectTypesequenceReviewResultDetailschema_SubjectType_XsdtString_, bool) error
	TxsdGetBlockedWorkers                                                                                                                                                                                                                                              func(*TxsdGetBlockedWorkers, bool) error
	TRegisterHITTypeRequest                                                                                                                                                                                                                                            func(*TRegisterHITTypeRequest, bool) error
	XsdGoPkgHasElems_RegisterHITType                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_RegisterHITType, bool) error
	XsdGoPkgHasElem_GetQualificationRequestsResponse                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_GetQualificationRequestsResponse, bool) error
	XsdGoPkgHasElems_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_                                                                                                                             func(*XsdGoPkgHasElems_QualificationTypeStatussequenceCreateQualificationTypeRequestschema_QualificationTypeStatus_TQualificationTypeStatus_, bool) error
	XsdGoPkgHasElems_LongValuesequenceDataPointschema_LongValue_XsdtLong_                                                                                                                                                                                              func(*XsdGoPkgHasElems_LongValuesequenceDataPointschema_LongValue_XsdtLong_, bool) error
	XsdGoPkgHasElems_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_                                                                                                                                                                                   func(*XsdGoPkgHasElems_UnusedsequenceGetAccountBalanceRequestschema_Unused_XsdtString_, bool) error
	XsdGoPkgHasElems_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_                                                                                                                                                                                    func(*XsdGoPkgHasElems_BonusAmountsequenceGrantBonusRequestschema_BonusAmount_TPrice_, bool) error
	XsdGoPkgHasElems_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_                                                                                                                                                 func(*XsdGoPkgHasElems_ExpirationIncrementInSecondssequenceExtendHITRequestschema_ExpirationIncrementInSeconds_XsdtLong_, bool) error
	XsdGoPkgHasElem_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_                                                                                                                                              func(*XsdGoPkgHasElem_SortPropertysequenceGetAssignmentsForHITRequestschema_SortProperty_TGetAssignmentsForHITSortProperty_, bool) error
	XsdGoPkgHasElem_GetReviewableHITsResponse                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_GetReviewableHITsResponse, bool) error
	XsdGoPkgHasElems_RejectQualificationRequest                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_RejectQualificationRequest, bool) error
	XsdGoPkgHasElems_HITIdsequenceGetReviewResultsForHITRequestschema_HITId_XsdtString_                                                                                                                                                                                func(*XsdGoPkgHasElems_HITIdsequenceGetReviewResultsForHITRequestschema_HITId_XsdtString_, bool) error
	XsdGoPkgHasElem_Errors                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_Errors, bool) error
	XsdGoPkgHasElems_HTTPHeaders                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_HTTPHeaders, bool) error
	XsdGoPkgHasElem_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_                                                                                                                func(*XsdGoPkgHasElem_RegisterHITTypeResultsequenceTxsdRegisterHITTypeResponseRegisterHITTypeResponseschema_RegisterHITTypeResult_TRegisterHITTypeResult_, bool) error
	XsdGoPkgHasElem_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_                                                                                                                                                   func(*XsdGoPkgHasElem_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_, bool) error
	XsdGoPkgHasElems_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_                                                                  func(*XsdGoPkgHasElems_GetQualificationRequestsResultsequenceTxsdGetQualificationRequestsResponseGetQualificationRequestsResponseschema_GetQualificationRequestsResult_TGetQualificationRequestsResult_, bool) error
	TxsdGetRequesterStatistic                                                                                                                                                                                                                                          func(*TxsdGetRequesterStatistic, bool) error
	XsdGoPkgHasElem_OperationInformation                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_OperationInformation, bool) error
	XsdGoPkgHasElem_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_                                                                                                                                                                                         func(*XsdGoPkgHasElem_DoubleValuesequenceDataPointschema_DoubleValue_XsdtDouble_, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_                                                                                                                                                     func(*XsdGoPkgHasElem_RequestsequenceTxsdApproveAssignmentApproveAssignmentschema_Request_TApproveAssignmentRequest_, bool) error
	XsdGoPkgHasElem_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_                                                                                                                                                                                    func(*XsdGoPkgHasElem_ParametersequenceReviewPolicyschema_Parameter_TPolicyParameter_, bool) error
	XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_                                                                                                                                                                                              func(*XsdGoPkgHasElem_NamesequenceHITLayoutParameterschema_Name_XsdtString_, bool) error
	TxsdSendTestEventNotification                                                                                                                                                                                                                                      func(*TxsdSendTestEventNotification, bool) error
	XsdGoPkgHasElems_GetAssignment                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_GetAssignment, bool) error
	XsdGoPkgHasElem_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_                                                                                                                                         func(*XsdGoPkgHasElem_DisableHITResultsequenceTxsdDisableHITResponseDisableHITResponseschema_DisableHITResult_TDisableHITResult_, bool) error
	XsdGoPkgHasElems_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_                                                                                                                 func(*XsdGoPkgHasElems_GetQualificationRequestsRequestsequenceTxsdRequestRequestschema_GetQualificationRequestsRequest_TGetQualificationRequestsRequest_, bool) error
	XsdGoPkgHasElem_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_                                                                                                                                                      func(*XsdGoPkgHasElem_MustBeRequestablesequenceSearchQualificationTypesRequestschema_MustBeRequestable_XsdtBoolean_, bool) error
	TSearchHITsRequest                                                                                                                                                                                                                                                 func(*TSearchHITsRequest, bool) error
	TxsdGetAssignment                                                                                                                                                                                                                                                  func(*TxsdGetAssignment, bool) error
	XsdGoPkgHasElems_RequesterAnnotationsequenceHITschema_RequesterAnnotation_XsdtString_                                                                                                                                                                              func(*XsdGoPkgHasElems_RequesterAnnotationsequenceHITschema_RequesterAnnotation_XsdtString_, bool) error
	XsdGoPkgHasElems_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_                                                                                                                                                                   func(*XsdGoPkgHasElems_NumberOfAssignmentsPendingsequenceHITschema_NumberOfAssignmentsPending_XsdtInt_, bool) error
	XsdGoPkgHasElems_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_                                                                          func(*XsdGoPkgHasElems_GetQualificationsForQualificationTypeRequestsequenceTxsdRequestRequestschema_GetQualificationsForQualificationTypeRequest_TGetQualificationsForQualificationTypeRequest_, bool) error
	XsdGoPkgHasElem_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_                                                                                                                                                  func(*XsdGoPkgHasElem_MustBeOwnedByCallersequenceSearchQualificationTypesRequestschema_MustBeOwnedByCaller_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_                                                                                                                                                                            func(*XsdGoPkgHasElem_IsRequestablesequenceQualificationTypeschema_IsRequestable_XsdtBoolean_, bool) error
	TxsdGetAccountBalance                                                                                                                                                                                                                                              func(*TxsdGetAccountBalance, bool) error
	XsdGoPkgHasElems_TestsequenceQualificationTypeschema_Test_XsdtString_                                                                                                                                                                                              func(*XsdGoPkgHasElems_TestsequenceQualificationTypeschema_Test_XsdtString_, bool) error
	TUpdateQualificationScoreRequest                                                                                                                                                                                                                                   func(*TUpdateQualificationScoreRequest, bool) error
	XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_                                                                             func(*XsdGoPkgHasElems_ParametersequenceTxsdOperationInformationSequenceRequiredParametersRequiredParameterssequenceTxsdOperationInformationOperationInformationschema_Parameter_XsdtString_, bool) error
	TxsdOperationInformationSequenceAvailableResponseGroups                                                                                                                                                                                                            func(*TxsdOperationInformationSequenceAvailableResponseGroups, bool) error
	XsdGoPkgHasElems_ResponseGroupInformation                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_ResponseGroupInformation, bool) error
	XsdGoPkgHasElems_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_                                                                                                                                                                                  func(*XsdGoPkgHasElems_RevertsequenceSetHITAsReviewingRequestschema_Revert_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_                                                                                                                                                  func(*XsdGoPkgHasElems_GetAssignmentRequestsequenceTxsdRequestRequestschema_GetAssignmentRequest_TGetAssignmentRequest_, bool) error
	XsdGoPkgHasElems_CountsequenceGetRequesterWorkerStatisticRequestschema_Count_XsdtInt_                                                                                                                                                                              func(*XsdGoPkgHasElems_CountsequenceGetRequesterWorkerStatisticRequestschema_Count_XsdtInt_, bool) error
	XsdGoPkgHasElems_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_                                                                                                                                            func(*XsdGoPkgHasElems_RegisterHITTypeRequestsequenceTxsdRequestRequestschema_RegisterHITTypeRequest_TRegisterHITTypeRequest_, bool) error
	TSendTestEventNotificationResult                                                                                                                                                                                                                                   func(*TSendTestEventNotificationResult, bool) error
	XsdGoPkgHasElems_GetReviewResultsForHITResponse                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_GetReviewResultsForHITResponse, bool) error
	XsdGoPkgHasElem_UpdateQualificationScoreResponse                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_UpdateQualificationScoreResponse, bool) error
	TxsdGetAccountBalanceResponse                                                                                                                                                                                                                                      func(*TxsdGetAccountBalanceResponse, bool) error
	THelpRequest                                                                                                                                                                                                                                                       func(*THelpRequest, bool) error
	TxsdGetHITsForQualificationType                                                                                                                                                                                                                                    func(*TxsdGetHITsForQualificationType, bool) error
	XsdGoPkgHasElem_GrantBonusResponse                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_GrantBonusResponse, bool) error
	XsdGoPkgHasElem_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_                                                                                                                                                                        func(*XsdGoPkgHasElem_LifetimeInSecondssequenceCreateHITRequestschema_LifetimeInSeconds_XsdtLong_, bool) error
	XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_                                                                                                                                                                                       func(*XsdGoPkgHasElem_HITIdsequenceGetBonusPaymentsRequestschema_HITId_XsdtString_, bool) error
	TUpdateQualificationTypeRequest                                                                                                                                                                                                                                    func(*TUpdateQualificationTypeRequest, bool) error
	XsdGoPkgHasElems_UnblockWorkerRequestsequenceRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_                                                                                                                                                             func(*XsdGoPkgHasElems_UnblockWorkerRequestsequenceRequestschema_UnblockWorkerRequest_TUnblockWorkerRequest_, bool) error
	XsdGoPkgHasElem_HITStatussequenceHITschema_HITStatus_THITStatus_                                                                                                                                                                                                   func(*XsdGoPkgHasElem_HITStatussequenceHITschema_HITStatus_THITStatus_, bool) error
	XsdGoPkgHasElems_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_                                                                                                        func(*XsdGoPkgHasElems_GetRequesterWorkerStatisticRequestsequenceTxsdRequestRequestschema_GetRequesterWorkerStatisticRequest_TGetRequesterWorkerStatisticRequest_, bool) error
	XsdGoPkgHasElems_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_                                                                                                                                                               func(*XsdGoPkgHasElems_NumberOfAssignmentsAvailablesequenceHITschema_NumberOfAssignmentsAvailable_XsdtInt_, bool) error
	XsdGoPkgHasCdata                                                                                                                                                                                                                                                   func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_                                                                                                                                                                                                 func(*XsdGoPkgHasElem_KeysequenceParameterMapEntryschema_Key_XsdtString_, bool) error
	TRejectQualificationRequestRequest                                                                                                                                                                                                                                 func(*TRejectQualificationRequestRequest, bool) error
	XsdGoPkgHasElems_RequestsequenceTxsdGrantBonusGrantBonusschema_Request_TGrantBonusRequest_                                                                                                                                                                         func(*XsdGoPkgHasElems_RequestsequenceTxsdGrantBonusGrantBonusschema_Request_TGrantBonusRequest_, bool) error
	XsdGoPkgHasElem_RequestsequenceGetHITschema_Request_TGetHITRequest_                                                                                                                                                                                                func(*XsdGoPkgHasElem_RequestsequenceGetHITschema_Request_TGetHITRequest_, bool) error
	TxsdGetReviewableHITsResponse                                                                                                                                                                                                                                      func(*TxsdGetReviewableHITsResponse, bool) error
	TxsdRejectAssignment                                                                                                                                                                                                                                               func(*TxsdRejectAssignment, bool) error
	TxsdCreateQualificationTypeResponse                                                                                                                                                                                                                                func(*TxsdCreateQualificationTypeResponse, bool) error
	XsdGoPkgHasElems_PageSizesequenceGetQualificationRequestsRequestschema_PageSize_XsdtInt_                                                                                                                                                                           func(*XsdGoPkgHasElems_PageSizesequenceGetQualificationRequestsRequestschema_PageSize_XsdtInt_, bool) error
	TRejectQualificationRequestResult                                                                                                                                                                                                                                  func(*TRejectQualificationRequestResult, bool) error
	XsdGoPkgHasElems_NotifyWorkersResultsequenceTxsdNotifyWorkersResponseNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_                                                                                                                         func(*XsdGoPkgHasElems_NotifyWorkersResultsequenceTxsdNotifyWorkersResponseNotifyWorkersResponseschema_NotifyWorkersResult_TNotifyWorkersResult_, bool) error
	XsdGoPkgHasElem_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_                                                                                                                                         func(*XsdGoPkgHasElem_QualificationRequirementsequenceCreateHITRequestschema_QualificationRequirement_TQualificationRequirement_, bool) error
	XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_                                                                                                                                                          func(*XsdGoPkgHasElem_QualificationTypeIdsequenceQualificationRequirementschema_QualificationTypeId_XsdtString_, bool) error
	XsdGoPkgHasElem_SetHITTypeNotificationResponse                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_SetHITTypeNotificationResponse, bool) error
	TGetFileUploadURLResult                                                                                                                                                                                                                                            func(*TGetFileUploadURLResult, bool) error
	TBonusPayment                                                                                                                                                                                                                                                      func(*TBonusPayment, bool) error
	XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_                                                                                                                                           func(*XsdGoPkgHasElem_QualificationRequestIdsequenceRejectQualificationRequestRequestschema_QualificationRequestId_XsdtString_, bool) error
	TxsdSetHITAsReviewingResponse                                                                                                                                                                                                                                      func(*TxsdSetHITAsReviewingResponse, bool) error
	TNotifyWorkersResult                                                                                                                                                                                                                                               func(*TNotifyWorkersResult, bool) error
	TxsdInformation                                                                                                                                                                                                                                                    func(*TxsdInformation, bool) error
	XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_                                                                                                                                                              func(*XsdGoPkgHasElem_RequesterFeedbacksequenceApproveAssignmentRequestschema_RequesterFeedback_XsdtString_, bool) error
	TGetAccountBalanceRequest                                                                                                                                                                                                                                          func(*TGetAccountBalanceRequest, bool) error
	XsdGoPkgHasElems_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_                                                                                                                               func(*XsdGoPkgHasElems_NotifyWorkersFailureStatussequenceNotifyWorkersResultschema_NotifyWorkersFailureStatus_TNotifyWorkersFailureStatus_, bool) error
	XsdGoPkgHasElems_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_                                                                                                                                      func(*XsdGoPkgHasElems_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_, bool) error
	XsdGoPkgHasElem_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_                                                                                                                                       func(*XsdGoPkgHasElem_SetHITAsReviewingRequestsequenceTxsdRequestRequestschema_SetHITAsReviewingRequest_TSetHITAsReviewingRequest_, bool) error
	XsdGoPkgHasElems_GrantBonusResponse                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_GrantBonusResponse, bool) error
	XsdGoPkgHasElem_RevokeQualificationResponse                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_RevokeQualificationResponse, bool) error
	XsdGoPkgHasElems_AssignmentsequenceGetAssignmentsForHITResultschema_Assignment_TAssignment_                                                                                                                                                                        func(*XsdGoPkgHasElems_AssignmentsequenceGetAssignmentsForHITResultschema_Assignment_TAssignment_, bool) error
	TxsdGetRequesterWorkerStatisticResponse                                                                                                                                                                                                                            func(*TxsdGetRequesterWorkerStatisticResponse, bool) error
	XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_                                                                                                                                         func(*XsdGoPkgHasElem_RequestsequenceTxsdGetQualificationScoreGetQualificationScoreschema_Request_TGetQualificationScoreRequest_, bool) error
	TClaim                                                                                                                                                                                                                                                             func(*TClaim, bool) error
}
